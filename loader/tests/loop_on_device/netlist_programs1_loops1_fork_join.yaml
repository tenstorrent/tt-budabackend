# Untilize directly to queue allocated in host memory

devices:
  arch: [grayskull, wormhole, wormhole_b0]

queues:
  in0:                {type: queue, input: HOST      , entries: 80, grid_size: [1, 1], t: 1, mblock: [1, 1], ublock: [1, 1], df: Float16, target_device: 0, loc: dram, dram: [[0, 0x30000000]]}
  out0:               {type: queue, input: binary_0  , entries: 80, grid_size: [1, 1], t: 1, mblock: [1, 1], ublock: [1, 1], df: Float16, target_device: 0, loc: dram, dram: [[0, 0x10000000]]}

graphs:
  graph0:
    target_device: 0
    input_count: 4

    unary0:   {type: gelu, grid_loc: [0, 0],  grid_size: [1, 1], inputs: [in0],     in_df: [Float16], acc_df: Float16, out_df: Float16,  intermed_df: Float16, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [1, 1], ublock: [1, 1]}
    unary1:   {type: gelu, grid_loc: [0, 1],  grid_size: [1, 1], inputs: [unary0],  in_df: [Float16], acc_df: Float16, out_df: Float16,  intermed_df: Float16, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [1, 1], ublock: [1, 1]}
    unary2:   {type: gelu, grid_loc: [0, 2],  grid_size: [1, 1], inputs: [unary1],  in_df: [Float16], acc_df: Float16, out_df: Float16,  intermed_df: Float16, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [1, 1], ublock: [1, 1]}
    unary3:   {type: gelu, grid_loc: [0, 3],  grid_size: [1, 1], inputs: [unary2],  in_df: [Float16], acc_df: Float16, out_df: Float16,  intermed_df: Float16, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [1, 1], ublock: [1, 1]}
    unary4:   {type: gelu, grid_loc: [0, 4],  grid_size: [1, 1], inputs: [unary3],  in_df: [Float16], acc_df: Float16, out_df: Float16,  intermed_df: Float16, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [1, 1], ublock: [1, 1]}
    unary5:   {type: gelu, grid_loc: [1, 0],  grid_size: [1, 1], inputs: [unary4],  in_df: [Float16], acc_df: Float16, out_df: Float16,  intermed_df: Float16, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [1, 1], ublock: [1, 1]}
    unary6:   {type: gelu, grid_loc: [1, 1],  grid_size: [1, 1], inputs: [unary5],  in_df: [Float16], acc_df: Float16, out_df: Float16,  intermed_df: Float16, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [1, 1], ublock: [1, 1]}
    unary7:   {type: gelu, grid_loc: [1, 2],  grid_size: [1, 1], inputs: [unary6],  in_df: [Float16], acc_df: Float16, out_df: Float16,  intermed_df: Float16, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [1, 1], ublock: [1, 1]}
    unary8:   {type: gelu, grid_loc: [1, 3],  grid_size: [1, 1], inputs: [unary7],  in_df: [Float16], acc_df: Float16, out_df: Float16,  intermed_df: Float16, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [1, 1], ublock: [1, 1]}
    unary9:   {type: gelu, grid_loc: [1, 4],  grid_size: [1, 1], inputs: [unary8],  in_df: [Float16], acc_df: Float16, out_df: Float16,  intermed_df: Float16, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [1, 1], ublock: [1, 1]}
    binary_0: {type: add,  grid_loc: [2, 2],  grid_size: [1, 1], inputs: [in0, unary9], in_df: [Float16, Float16], acc_df: Float16, out_df: Float16,  intermed_df: Float16, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [1, 1], ublock: [1, 1]}

programs:
  - program_0:
      - param: [$p_loop_count]
      - staticvar: {$lptr0: 0, $gptr0: 0}
      - var: {$c_input_count: 4, $c_input_wrap: 160}
      - loop: $p_loop_count
      - execute: {graph_name: graph0, queue_settings: {
          in0: {prologue: false, epilogue: false, zero: false,  rd_ptr_local: $lptr0, rd_ptr_global: $gptr0},
      }}
      - varinst: [$lptr0, incwrap, $c_input_count, $c_input_wrap] # incr and wrap
      - varinst: [$gptr0, incwrap, $c_input_count, $c_input_wrap] # incr and wrap
      - endloop

test-config:
  comparison-config:
    type: AllCloseHw
    atol: 0.01
    rtol: 0.15
    check_pct: 0.50
    check_pcc: 0.92
    verbosity: Concise
  stimulus-config:
    type: Normal
    normal_mean: 0.0
    normal_stddev: 0.1
  io-config:
    inputs: [in0]
    outputs: [out0]
