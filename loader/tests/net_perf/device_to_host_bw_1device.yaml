devices:
  arch: grayskull

queues:
  dram_input0_device0: {type: queue, input: HOST, entries: 1, grid_size: [1, 1], t: 1, mblock: [4, 4], ublock: [2, 4], ublock_order: r, df: Float16_b, target_device: 0 ,loc: dram ,dram: [[0, 0x10000000]]}
  output_device0: {type: queue, input: target_op_device0, entries: 1024, grid_size: [1, 1], t: 1, mblock: [4, 4], ublock: [2, 4], ublock_order: r, df: Float16_b, target_device: 0, loc: host, host: [0x0]}


graphs:
  test_op_device0:
    target_device: 0
    input_count:  1024
    target_op_device0: {type: nop, grid_loc: [0, 0], grid_size: [1, 1], inputs: [dram_input0_device0], in_df: [Float16_b], acc_df: Float16_b, out_df: Float16_b , intermed_df: Float16_b, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi4, untilize_output: true, t: 1,mblock: [4, 4], ublock: [2, 4], input_0_tms: []}

programs:
  - program0:
      - var: [$lptr, $gptr, $c_loop_count, $c_input_count]
      - varinst: [$c_loop_count, set, 1]  # load loop count
      - loop: $c_loop_count
      - execute: {graph_name: test_op_device0, queue_settings: {
          dram_input0_device0: {prologue: true, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}}}
      - varinst: [$lptr, add, $lptr, $c_input_count] # add two variables
      - varinst: [$gptr, add, $gptr, $c_input_count] # add two variables
      - endloop 

performance-check:
  config-device0:
    output-bw:
      expected: 4.15
      rtol: 0.10
    graph-name: test_op_device0
    program-name: program0
    target-cores: []
    target-inputs:
    - 0
    target-ops:
    - target_op_device0

