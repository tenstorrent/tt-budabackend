# Tilized output to queue allocated in dram memory

devices:
  arch: [grayskull, wormhole, wormhole_b0]

queues:
  in: {type: queue, input: HOST   , entries: 8, grid_size: [2, 4], t: 16, mblock: [8, 8], ublock: [2, 2], df: Bfp8, target_device: 0, loc: dram, dram: [[0, 0x30000000], [0, 0x32000000], [1, 0x32000000], [1, 0x30000000], [2, 0x30000000], [2, 0x34000000], [3, 0x32000000], [3, 0x36000000]], tile_dim: [16, 32]}
  in1: {type: queue, input: HOST   , entries: 8, grid_size: [1, 2], t: 8, mblock: [8, 8], ublock: [2, 2], df: Float16, target_device: 0, loc: host, host: [[0, 0x20000000], [0, 0x30000000]], tile_dim: [1, 32], ublock_order: c}
  in2: {type: queue, input: HOST   , entries: 8, grid_size: [1, 1], t: 10, mblock: [8, 8], ublock: [2, 2], df: Bfp8_b, target_device: 0, loc: dram, dram: [[2, 0x10000000]]}
  out: {type: queue, input: unary0 , entries: 8, grid_size: [1, 1], t: 16, mblock: [16, 16], ublock: [2, 4], df: Float16, target_device: 0, loc: host, host: [[0, 0x8000000]], tile_dim: [16, 32]}
  out1: {type: queue, input: unary1   , entries: 8, grid_size: [1, 2], t: 8, mblock: [8, 8], ublock: [2, 2], df: Float16, target_device: 0, loc: dram, dram: [[0, 0x10000000], [0, 0x20000000]], tile_dim: [1, 32]}
  out2: {type: queue, input: unary2   , entries: 8, grid_size: [1, 1], t: 10, mblock: [8, 8], ublock: [2, 2], df: Float16, target_device: 0, loc: dram, dram: [[4, 0x30000000]]}

graphs:
  test_unary:
    target_device: 0
    input_count: 8
    unary0: {type: nop, grid_loc: [0, 0], grid_size: [2, 4], inputs: [in], in_df: [Bfp8], acc_df: Bfp8, out_df: Float16,  intermed_df: Bfp8, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi4, untilize_output: true, t: 16, mblock: [8, 8], ublock: [2, 2], tile_dim: [16, 32]}
    unary1: {type: nop, grid_loc: [2, 2], grid_size: [1, 2], inputs: [in1], in_df: [Float16], acc_df: Float16, out_df: Float16,  intermed_df: Float16, ublock_order: c, buf_size_mb: 2, math_fidelity: HiFi4, untilize_output: false, t: 8, mblock: [8, 8], ublock: [2, 2], tile_dim: [1, 32]}
    unary2: {type: nop, grid_loc: [2, 4], grid_size: [1, 1], inputs: [in2], in_df: [Bfp8_b], acc_df: Bfp8_b, out_df: Float16,  intermed_df: Bfp8_b, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi4, untilize_output: true, t: 10, mblock: [8, 8], ublock: [2, 2]}
programs:
  - program_unary:
      - staticvar: [$lptr, $gptr, $c_loop_count, $c_input_count]
      - varinst: [$c_loop_count, set, 1]  # load loop count
      - varinst: [$c_input_count, set, 8]  # load input count
      - loop: $c_loop_count
      - execute: {graph_name: test_unary, queue_settings: {
          in: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
          in1: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
          in2: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}}}
      - varinst: [$lptr, incwrap, $c_input_count, 16] # add two variables
      - varinst: [$gptr, incwrap, $c_input_count, 16] # add two variables
      - endloop 

