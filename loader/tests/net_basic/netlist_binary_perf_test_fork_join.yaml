devices:
  arch: [grayskull, wormhole, wormhole_b0]

queues:
  # q0: {type: ram, input: HOST    , entries: 1, grid_size: [1, 2], t: 1, mblock: [4, 4], ublock: [2, 4], df: Float16, target_device: 0, loc: dram, dram: [[1, 0x10000000], [1, 0x11000000]]}
  # q1: {type: ram, input: HOST    , entries: 1, grid_size: [1, 2], t: 1, mblock: [4, 4], ublock: [2, 4], df: Float16, target_device: 0, loc: dram, dram: [[1, 0x20000000], [1, 0x21000000]]}
  # q2: {type: queue, input: binary3 , entries: 32, grid_size: [1, 2], t: 1, mblock: [4, 4], ublock: [2, 4], df: Float16, target_device: 0, loc: dram, dram: [[0, 0x10000000], [2, 0x10000000]]}

  q0: {type: ram, input: HOST    , entries: 1, grid_size: [1, 1], t: 1, mblock: [2, 2], ublock: [2, 2], df: Bfp8, target_device: 0, loc: dram, dram: [[1, 0x10000000]]}
  q1_0: {type: ram, input: HOST    , entries: 1, grid_size: [1, 1], t: 1, mblock: [2, 2], ublock: [2, 2], df: Bfp8, target_device: 0, loc: dram, dram: [[1, 0x20000000]]}
  q1_1: {type: ram, input: HOST    , entries: 1, grid_size: [1, 1], t: 1, mblock: [2, 2], ublock: [2, 2], df: Bfp8, target_device: 0, loc: dram, dram: [[1, 0x21000000]]}
  q1_2: {type: ram, input: HOST    , entries: 1, grid_size: [1, 1], t: 1, mblock: [2, 2], ublock: [2, 2], df: Bfp8, target_device: 0, loc: dram, dram: [[1, 0x22000000]]}
  q1_3: {type: ram, input: HOST    , entries: 1, grid_size: [1, 1], t: 1, mblock: [2, 2], ublock: [2, 2], df: Bfp8, target_device: 0, loc: dram, dram: [[1, 0x23000000]]}
  q1_4: {type: ram, input: HOST    , entries: 1, grid_size: [1, 1], t: 1, mblock: [2, 2], ublock: [2, 2], df: Bfp8, target_device: 0, loc: dram, dram: [[1, 0x24000000]]}
  q1_5: {type: ram, input: HOST    , entries: 1, grid_size: [1, 1], t: 1, mblock: [2, 2], ublock: [2, 2], df: Bfp8, target_device: 0, loc: dram, dram: [[1, 0x25000000]]}
  q2: {type: queue, input: binary3 , entries: 32, grid_size: [1, 1], t: 1, mblock: [2, 2], ublock: [2, 2], df: Bfp8, target_device: 0, loc: dram, dram: [[0, 0x10000000]]}

graphs:
  test_binary:
    target_device: 0
    input_count: 32
    feeder0: {type: nop, grid_loc: [0, 0], grid_size: [1, 1], inputs: [q0], in_df: [Bfp8], acc_df: Float16, out_df: Bfp8,  intermed_df: Bfp8, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [2, 2], ublock: [2, 2] }
    matmul0: {type: matmul, grid_loc: [0, 1], grid_size: [1, 1], inputs: [feeder0, q1_0], in_df: [Bfp8, Bfp8], acc_df: Float16, out_df: Bfp8,  intermed_df: Bfp8, ublock_order: r, buf_size_mb: 2, input_buf_min_size_tiles: [368, 0], math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [2, 2], ublock: [2, 2], attributes: {m_k: 2, u_kt: 2} }

    # buffer: {type: nop, grid_loc: [1, 0], grid_size: [1, 1], inputs: [matmul0], in_df: [Bfp8], acc_df: Float16, out_df: Bfp8,  intermed_df: Bfp8, ublock_order: r, buf_size_mb: 4, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [2, 2], ublock: [2, 2] }
    
    matmul1: {type: matmul, grid_loc: [0, 2], grid_size: [1, 1], inputs: [matmul0, q1_1], in_df: [Bfp8, Bfp8], acc_df: Float16, out_df: Bfp8,  intermed_df: Bfp8, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [2, 2], ublock: [2, 2], attributes: {m_k: 2, u_kt: 2} }
    matmul2: {type: matmul, grid_loc: [0, 3], grid_size: [1, 1], inputs: [matmul1, q1_2], in_df: [Bfp8, Bfp8], acc_df: Float16, out_df: Bfp8,  intermed_df: Bfp8, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [2, 2], ublock: [2, 2], attributes: {m_k: 2, u_kt: 2} }
    
    binary1: {type: add, grid_loc: [0, 4], grid_size: [1, 1], inputs: [matmul0, matmul2], in_df: [Bfp8, Bfp8], acc_df: Float16, out_df: Bfp8,  intermed_df: Bfp8, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [2, 2], ublock: [2, 2] }

    bridge: {type: nop, grid_loc: [2, 0], grid_size: [1, 1], inputs: [binary1], in_df: [Bfp8], acc_df: Float16, out_df: Bfp8,  intermed_df: Bfp8, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [2, 2], ublock: [2, 2] }
    matmul3: {type: matmul, grid_loc: [2, 1], grid_size: [1, 1], inputs: [bridge, q1_3], in_df: [Bfp8, Bfp8], acc_df: Float16, out_df: Bfp8,  intermed_df: Bfp8, ublock_order: r, buf_size_mb: 2, input_buf_min_size_tiles: [368, 0], math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [2, 2], ublock: [2, 2], attributes: {m_k: 2, u_kt: 2} }

    buffer_2: {type: nop, grid_loc: [3, 0], grid_size: [1, 1], inputs: [matmul3], in_df: [Bfp8], acc_df: Float16, out_df: Bfp8,  intermed_df: Bfp8, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [2, 2], ublock: [2, 2] }
    
    matmul4: {type: matmul, grid_loc: [2, 2], grid_size: [1, 1], inputs: [matmul3, q1_4], in_df: [Bfp8, Bfp8], acc_df: Float16, out_df: Bfp8,  intermed_df: Bfp8, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [2, 2], ublock: [2, 2], attributes: {m_k: 2, u_kt: 2} }
    matmul5: {type: matmul, grid_loc: [2, 3], grid_size: [1, 1], inputs: [matmul4, q1_5], in_df: [Bfp8, Bfp8], acc_df: Float16, out_df: Bfp8,  intermed_df: Bfp8, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [2, 2], ublock: [2, 2], attributes: {m_k: 2, u_kt: 2} }
    
    binary2: {type: add, grid_loc: [2, 4], grid_size: [1, 1], inputs: [buffer_2, matmul5], in_df: [Bfp8, Bfp8], acc_df: Float16, out_df: Bfp8,  intermed_df: Bfp8, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [2, 2], ublock: [2, 2] }

    binary3: {type: add, grid_loc: [3, 1], grid_size: [1, 1], inputs: [matmul0, binary2], in_df: [Bfp8, Bfp8], acc_df: Float16, out_df: Bfp8,  intermed_df: Bfp8, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [2, 2], ublock: [2, 2] }


programs:
  - program0:
      - var: [$lptr, $gptr, $c_loop_count, $c_input_count, $c_zero]
      - varinst: [$c_zero, set, 0]
      - varinst: [$c_loop_count, set, 1]  # load loop count
      - varinst: [$c_input_count, set, 32]  # load input count
      - loop: $c_loop_count
      - execute: {graph_name: test_binary, queue_settings: {
          q0: {prologue: true, epilogue: false, zero: false, wr_ptr_global: $c_zero, rd_ptr_global: $c_zero},
          q1_0: {prologue: true, epilogue: false, zero: false, wr_ptr_global: $c_zero, rd_ptr_global: $c_zero},
          q1_1: {prologue: true, epilogue: false, zero: false, wr_ptr_global: $c_zero, rd_ptr_global: $c_zero},
          q1_2: {prologue: true, epilogue: false, zero: false, wr_ptr_global: $c_zero, rd_ptr_global: $c_zero},
          q1_3: {prologue: true, epilogue: false, zero: false, wr_ptr_global: $c_zero, rd_ptr_global: $c_zero},
          q1_4: {prologue: true, epilogue: false, zero: false, wr_ptr_global: $c_zero, rd_ptr_global: $c_zero},
          q1_5: {prologue: true, epilogue: false, zero: false, wr_ptr_global: $c_zero, rd_ptr_global: $c_zero}}}
      - varinst: [$lptr, add, $lptr, $c_input_count] # add two variables
      - varinst: [$gptr, add, $gptr, $c_input_count] # add two variables
      - endloop 

test-config:
  comparison-config:
    type: AllCloseHw
    atol: 0.01
    rtol: 0.15
    check_pct: 0.75
    check_pcc: 0.97
    verbosity: Concise
  stimulus-config:
    type: Normal
    normal_mean: 0.0
    normal_stddev: 0.25
  io-config:
    inputs: [q0, q1_0, q1_1, q1_2]
    outputs: [q2]
