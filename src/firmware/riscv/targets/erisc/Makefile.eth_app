include $(BUDA_HOME)/infra/common.mk

ARCH_NAME ?= grayskull
OVERLAY_DECOUPLE ?= 0

SOURCES = src/erisc.cc \
          src/api/eth_init.cpp \
          src/api/eth_ss.cpp


SOURCES += $(BUDA_HOME)/src/firmware/riscv/common/dram_stream_intf.cc
SOURCES += $(BUDA_HOME)/src/firmware/riscv/common/unpack_pack_stream_intf.cc
SOURCES += $(BUDA_HOME)/src/firmware/riscv/common/risc_common.cc
SOURCES += $(BUDA_HOME)/src/firmware/riscv/common/risc_epoch.cc

ifeq ("$(ARCH_NAME)","wormhole_b0")
  SOURCES += $(BUDA_HOME)/src/firmware/riscv/wormhole/risc_chip_specific.cc
else
  SOURCES += $(BUDA_HOME)/src/firmware/riscv/$(ARCH_NAME)/risc_chip_specific.cc
endif

ifeq ("$(ARCH_NAME)", "wormhole_b0")
  SOURCES += $(BUDA_HOME)/src/firmware/riscv/wormhole/noc_nonblocking_api.cc
endif
ifeq ("$(ARCH_NAME)", "wormhole")
  SOURCES += $(BUDA_HOME)/src/firmware/riscv/$(ARCH_NAME)/noc_nonblocking_api.cc
endif

ifeq ("$(ARCH_NAME)", "wormhole_b0")
  SOURCES += $(BUDA_HOME)/src/firmware/riscv/wormhole/noc/noc.c
else
  SOURCES += $(BUDA_HOME)/src/firmware/riscv/$(ARCH_NAME)/noc/noc.c
endif

ifdef ($(NUM_EXEC_LOOP_ITERATIONS))
DEFINES += $(addprefix -DNUM_EXEC_LOOP_ITERATIONS=, $(NUM_EXEC_LOOP_ITERATIONS))
endif
ifeq ($(OVERLAY_DECOUPLE), 1)
DEFINES += $(addprefix -DOVERLAY_DECOUPLE=, $(OVERLAY_DECOUPLE))
endif

FIRMWARE_NAME = erisc_app

DEFINES += -DETH_TEST_FW -DETH_INIT_FW -DERISC

ifeq ("$(ARCH_NAME)", "wormhole_b0")
DEFINES += -DRISC_B0_HW
endif

ifeq ("$(ARCH_NAME)", "wormhole_b0")
  LINKER_SCRIPT_NAME := erisc-b0-app.ld
  ADDITIONAL_TARGET = $(OUTPUT_DIR)/split_iram_l1
else
  LINKER_SCRIPT_NAME := erisc-app.ld
  ADDITIONAL_TARGET = $(OUTPUT_DIR)/$(FIRMWARE_NAME).hex
endif

BUILD_TARGET = ETH_APP

XXD=xxd
SED=sed

INCLUDES = 

OPT_FLAGS = -flto -ffast-math -Os -g

CXX_LANG_FLAGS = -Wall -std=c++17 -Wno-unknown-pragmas -fno-use-cxa-atexit -fno-delete-null-pointer-checks -Wno-error=multistatement-macros

include ../../toolchain/riscv.mk

all :: $(OUTPUT_DIR)/$(FIRMWARE_NAME).srec $(OUTPUT_DIR)/$(FIRMWARE_NAME).map $(OUTPUT_DIR)/$(FIRMWARE_NAME).bin $(ADDITIONAL_TARGET)

$(OUTPUT_DIR)/$(FIRMWARE_NAME).srec: $(OUTPUT_DIR)/$(FIRMWARE_NAME).elf
	@$(OBJCOPY) -O srec $< $@

$(OUTPUT_DIR)/split_iram_l1: $(OUTPUT_DIR)/$(FIRMWARE_NAME).elf
	@$(OBJCOPY) --only-section=.text $< $(OUTPUT_DIR)/$(FIRMWARE_NAME).iram.elf
	@$(OBJCOPY) --remove-section=.text $< $(OUTPUT_DIR)/$(FIRMWARE_NAME).l1.elf
	@$(OBJCOPY) -O verilog $(OUTPUT_DIR)/$(FIRMWARE_NAME).iram.elf $(OUTPUT_DIR)/$(FIRMWARE_NAME).iram.tmp
	@$(OBJCOPY) -O verilog $(OUTPUT_DIR)/$(FIRMWARE_NAME).l1.elf $(OUTPUT_DIR)/$(FIRMWARE_NAME).l1.tmp
	@python3 $(TOOLCHAIN)/hex8tohex32.py $(OUTPUT_DIR)/$(FIRMWARE_NAME).iram.tmp > $(OUTPUT_DIR)/$(FIRMWARE_NAME).iram.hex
	@python3 $(TOOLCHAIN)/hex8tohex32.py $(OUTPUT_DIR)/$(FIRMWARE_NAME).l1.tmp > $(OUTPUT_DIR)/$(FIRMWARE_NAME).l1.hex
	@rm $(OUTPUT_DIR)/$(FIRMWARE_NAME).iram.tmp $(OUTPUT_DIR)/$(FIRMWARE_NAME).l1.tmp
	@touch $(OUTPUT_DIR)/split_iram_l1

clean:
	rm -fdr $(OUTPUT_DIR)
