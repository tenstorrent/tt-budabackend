include $(BUDA_HOME)/infra/common.mk

ARCH_NAME ?= wormhole

SOURCES = sw_load_test.cc \
          ../../api/eth_init.cpp \
          ../../api/eth_ss.cpp \
          ../../rtos/rtos.cc \
          ../../eth_routing_v2.cpp \
          ../common/test_app_common.cpp

# SOURCES += $(BUDA_HOME)/src/firmware/riscv/common/dram_stream_intf.cc
# SOURCES += $(BUDA_HOME)/src/firmware/riscv/common/unpack_pack_stream_intf.cc
# SOURCES += $(BUDA_HOME)/src/firmware/riscv/common/risc_common.cc
# SOURCES += $(BUDA_HOME)/src/firmware/riscv/common/risc_epoch.cc

ifeq ("$(ARCH_NAME)", "wormhole_b0")
  SOURCES += $(BUDA_HOME)/src/firmware/riscv/wormhole/noc/noc.c
else
  SOURCES += $(BUDA_HOME)/src/firmware/riscv/$(ARCH_NAME)/noc/noc.c
endif

FIRMWARE_NAME = sw_load_test

DEFINES += -DETH_TEST_FW -DETH_INIT_FW -DERISC

ifeq ("$(ARCH_NAME)", "wormhole_b0")
DEFINES += -DRISC_B0_HW
endif

LINKER_SCRIPT_NAME := erisc-app.ld
ADDITIONAL_TARGET = $(OUTPUT_DIR)/$(FIRMWARE_NAME).hex

BUILD_TARGET = ETH_APP

XXD=xxd
SED=sed

INCLUDES = 

OPT_FLAGS = -flto -ffast-math -Os -g

CXX_LANG_FLAGS = -Wall -std=c++17 -Wno-unknown-pragmas -fno-use-cxa-atexit -Wno-error=multistatement-macros

include ../../../../../toolchain/riscv.mk

all :: $(OUTPUT_DIR)/$(FIRMWARE_NAME).srec $(OUTPUT_DIR)/$(FIRMWARE_NAME).map $(OUTPUT_DIR)/$(FIRMWARE_NAME).bin $(FIRMWARE_NAME).hex $(ADDITIONAL_TARGET)

$(OUTPUT_DIR)/$(FIRMWARE_NAME).srec: $(OUTPUT_DIR)/$(FIRMWARE_NAME).elf
	$(OBJCOPY) -O srec $< $@

$(FIRMWARE_NAME).hex: $(OUTPUT_DIR)/$(FIRMWARE_NAME).hex
	mkdir -p out
	cp $(OUTPUT_DIR)/$(FIRMWARE_NAME).hex out/$(FIRMWARE_NAME).hex

split_iram_l1: $(OUTPUT_DIR)/$(FIRMWARE_NAME).elf
	$(OBJCOPY) --only-section=.text $< $(OUTPUT_DIR)/$(FIRMWARE_NAME).iram.elf
	$(OBJCOPY) --remove-section=.text $< $(OUTPUT_DIR)/$(FIRMWARE_NAME).l1.elf
	$(OBJCOPY) -O verilog $(OUTPUT_DIR)/$(FIRMWARE_NAME).iram.elf $(OUTPUT_DIR)/$(FIRMWARE_NAME).iram.tmp
	$(OBJCOPY) -O verilog $(OUTPUT_DIR)/$(FIRMWARE_NAME).l1.elf $(OUTPUT_DIR)/$(FIRMWARE_NAME).l1.tmp
	python3 $(TOOLCHAIN)/hex8tohex32.py $(OUTPUT_DIR)/$(FIRMWARE_NAME).iram.tmp > $(OUTPUT_DIR)/$(FIRMWARE_NAME).iram.hex
	python3 $(TOOLCHAIN)/hex8tohex32.py $(OUTPUT_DIR)/$(FIRMWARE_NAME).l1.tmp > $(OUTPUT_DIR)/$(FIRMWARE_NAME).l1.hex
	rm $(OUTPUT_DIR)/$(FIRMWARE_NAME).iram.tmp $(OUTPUT_DIR)/$(FIRMWARE_NAME).l1.tmp

clean:
	rm -fdr $(OUTPUT_DIR)
	rm -f out/$(FIRMWARE_NAME).hex




