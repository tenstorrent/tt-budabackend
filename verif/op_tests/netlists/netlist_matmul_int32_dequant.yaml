devices:
  arch: WORMHOLE_B0

queues:
  #input0:  {type: ram, input: HOST, entries: 1, grid_size: [1, 1], t: 1, mblock: [1, 4], ublock: [1, 1], df: Bfp8, target_device: 0, loc: dram, dram: [[0, 0x32000000]]}
  #input1:  {type: ram, input: HOST, entries: 1, grid_size: [1, 1], t: 1, mblock: [4, 1], ublock: [1, 4], df: Bfp8, target_device: 0, loc: dram, dram: [[0, 0x30000000]]}
  input0:  {type: queue, input: HOST, entries: 128, grid_size: [1, 1], t: 2, mblock: [2, 2], ublock: [2, 2], df: Int8, target_device: 0, loc: dram, dram: [[0, 0x30000000]]}
  input1:  {type: queue, input: HOST, entries: 128, grid_size: [1, 1], t: 2, mblock: [2, 2], ublock: [2, 2], df: Int8, target_device: 0, loc: dram, dram: [[0, 0x10000000]]}
  bias:    {type: queue, input: HOST, entries: 128, grid_size: [1, 1], t: 2, mblock: [2, 2], ublock: [2, 2], df: Int32, target_device: 0, loc: dram, dram: [[1, 0x39000000]]}
  scalers:  {type: queue, input: HOST, entries: 128, grid_size: [1, 1], t: 2, mblock: [2, 2], ublock: [2, 2], df: Float32, target_device: 0, loc: dram, dram: [[3, 0x39000000]]}
  output0: {type: queue, input: op0 , entries: 128, grid_size: [1, 1], t: 2, mblock: [2, 2], ublock: [2, 2], df: Bfp8, target_device: 0, loc: dram, dram: [[2, 0x3e000000]]}

graphs:
  test_op:
    target_device: 0
    input_count:  2
    op0:
      type: matmul
      grid_loc: [0, 0]   # [r,c]
      grid_size: [1, 1] # [r,c]
      inputs: [input0, input1, bias, scalers]
      in_df: [Int8, Int8, Int32, Float32]
      acc_df: Int32
      out_df: Bfp8
      intermed_df: Int32
      ublock_order: r
      buf_size_mb: 2
      math_fidelity: HiFi4
      attributes: {bias: true, m_k: 2, u_kt: 2, l1_acc: false, dequant: true, zero_point: 1.0} #, kernel_broadcast: [1]}
      untilize_output: false
      t: 2
      mblock: [2, 2]
      ublock: [2, 2]

programs:
  - program0:
      - var : [$c_loop_count, $c_input_count, $c_zero]
      - staticvar : {$lptr: 0, $gptr: 0}
      - varinst: [$c_loop_count, set, 1]  # load loop count
      - varinst : [$c_input_count, set, 2]
      - loop: $c_loop_count
      - execute: {graph_name: test_op, queue_settings: {
         input0: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
         bias: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
         scalers: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
         input1: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}}}
       #  input0: {prologue: false, epilogue: false, zero: false, wr_ptr_global: $c_zero, rd_ptr_global: $c_zero},
       #  input1: {prologue: false, epilogue: false, zero: false, wr_ptr_global: $c_zero, rd_ptr_global: $c_zero}}}
      - varinst: [$lptr, incwrap, $c_input_count, 256] # add two variables
      - varinst: [$gptr, incwrap, $c_input_count, 256] # add two variables
      - endloop

test-config:
  test-args:
    program_loop_count: 1
  comparison-config:
    type: AllCloseHw
    atol: 0.01
    rtol: 0.3
    check_pct: 0.90
    check_pcc: 0.99
    verbosity: Concise
  stimulus-config:
    type: Uniform
    #type: Constant
    #type: DebugTileId
    debug_tile_id_step: 1.0
    debug_tile_id_base: 1.0
    uniform_lower_bound: -5.0
    uniform_upper_bound: 5.0
    overrides:      
      scalers:         
        type: Uniform
        uniform_lower_bound: -1.0
        uniform_upper_bound: 1.0
      bias:         
        type: Uniform
        uniform_lower_bound: -50.0
        uniform_upper_bound: 50.0
