
devices:
  arch: [grayskull, wormhole_b0]

queues:
  input0:  {type: queue, input: HOST, entries: 4, grid_size: [7, 8], t: 1, mblock: [3, 3], ublock: [1, 2], df: Float16, target_device: 0, loc: dram, dram: [[0, 0x1ce0c4c0], [5, 0x1ce30de0], [1, 0x1ce55700], [4, 0x1ce7a020], [5, 0x1ce9e940], [5, 0x1cec3260], [5, 0x1cee7b80], [3, 0x1cf0c4a0], [2, 0x1cf30dc0], [3, 0x1cf556e0], [3, 0x1cf7a000], [1, 0x1cf9e920], [3, 0x1cfc3240], [3, 0x1cfe7b60], [5, 0x1d00c480], [2, 0x1d030da0], [4, 0x1d0556c0], [4, 0x1d079fe0], [2, 0x1d09e900], [2, 0x1d0c3220], [3, 0x1d0e7b40], [4, 0x1d10c460], [2, 0x1d130d80], [2, 0x1d1556a0], [4, 0x1d179fc0], [4, 0x1d19e8e0], [0, 0x1d1c3200], [5, 0x1d1e7b20], [2, 0x1d20c440], [2, 0x1d230d60], [2, 0x1d255680], [3, 0x1d279fa0], [2, 0x1d29e8c0], [2, 0x1d2c31e0], [0, 0x1d2e7b00], [0, 0x1d30c420], [4, 0x1d330d40], [3, 0x1d355660], [3, 0x1d379f80], [5, 0x1d39e8a0], [3, 0x1d3c31c0], [3, 0x1d3e7ae0], [3, 0x1d40c400], [4, 0x1d430d20], [3, 0x1d455640], [1, 0x1d479f60], [3, 0x1d49e880], [5, 0x1d4c31a0], [3, 0x1d4e7ac0], [5, 0x1d50c3e0], [5, 0x1d530d00], [0, 0x1d555620], [0, 0x1d579f40], [3, 0x1d59e860], [5, 0x1d5c3180], [3, 0x1d5e7aa0]]}
  input1:  {type: queue, input: HOST, entries: 4, grid_size: [8, 8], t: 1, mblock: [3, 3], ublock: [2, 4], df: Float16, target_device: 0, loc: dram, dram: [[0, 0x22c1e200], [5, 0x22cb0620], [1, 0x22d42a40], [4, 0x22dd4e60], [5, 0x22e67280], [5, 0x22ef96a0], [5, 0x22f8bac0], [3, 0x2301dee0], [2, 0x230b0300], [3, 0x23142720], [3, 0x231d4b40], [1, 0x23266f60], [3, 0x232f9380], [3, 0x2338b7a0], [5, 0x2341dbc0], [2, 0x234affe0], [4, 0x23542400], [4, 0x235d4820], [2, 0x23666c40], [2, 0x236f9060], [3, 0x2378b480], [4, 0x2381d8a0], [2, 0x238afcc0], [2, 0x239420e0], [4, 0x239d4500], [4, 0x23a66920], [0, 0x23af8d40], [5, 0x23b8b160], [2, 0x23c1d580], [2, 0x23caf9a0], [2, 0x23d41dc0], [3, 0x23dd41e0], [2, 0x23e66600], [2, 0x23ef8a20], [0, 0x23f8ae40], [0, 0x2401d260], [4, 0x240af680], [3, 0x24141aa0], [3, 0x241d3ec0], [5, 0x242662e0], [3, 0x242f8700], [3, 0x2438ab20], [3, 0x2441cf40], [4, 0x244af360], [3, 0x24541780], [1, 0x245d3ba0], [3, 0x24665fc0], [5, 0x246f83e0], [3, 0x2478a800], [5, 0x2481cc20], [5, 0x248af040], [0, 0x24941460], [0, 0x249d3880], [3, 0x24a65ca0], [5, 0x24af80c0], [3, 0x24b8a4e0], [3, 0x24c1c900], [4, 0x24caed20], [5, 0x24d41140], [3, 0x24dd3560], [3, 0x24e65980], [4, 0x24ef7da0], [5, 0x24f8a1c0], [4, 0x2501c5e0]]}
  output: {type: queue, input: op0 , entries: 4, grid_size: [7, 8], t: 1, mblock: [3, 3], ublock: [1, 4], df: Float16, target_device: 0, loc: dram, dram: [[0, 0x2dd18ca0], [5, 0x2dd61ec0], [1, 0x2ddab0e0], [4, 0x2ddf4300], [5, 0x2de3d520], [5, 0x2de86740], [5, 0x2decf960], [3, 0x2df18b80], [2, 0x2df61da0], [3, 0x2dfaafc0], [3, 0x2dff41e0], [1, 0x2e03d400], [3, 0x2e086620], [3, 0x2e0cf840], [5, 0x2e118a60], [2, 0x2e161c80], [4, 0x2e1aaea0], [4, 0x2e1f40c0], [2, 0x2e23d2e0], [2, 0x2e286500], [3, 0x2e2cf720], [4, 0x2e318940], [2, 0x2e361b60], [2, 0x2e3aad80], [4, 0x2e3f3fa0], [4, 0x2e43d1c0], [0, 0x2e4863e0], [5, 0x2e4cf600], [2, 0x2e518820], [2, 0x2e561a40], [2, 0x2e5aac60], [3, 0x2e5f3e80], [2, 0x2e63d0a0], [2, 0x2e6862c0], [0, 0x2e6cf4e0], [0, 0x2e718700], [4, 0x2e761920], [3, 0x2e7aab40], [3, 0x2e7f3d60], [5, 0x2e83cf80], [3, 0x2e8861a0], [3, 0x2e8cf3c0], [3, 0x2e9185e0], [4, 0x2e961800], [3, 0x2e9aaa20], [1, 0x2e9f3c40], [3, 0x2ea3ce60], [5, 0x2ea86080], [3, 0x2eacf2a0], [5, 0x2eb184c0], [5, 0x2eb616e0], [0, 0x2ebaa900], [0, 0x2ebf3b20], [3, 0x2ec3cd40], [5, 0x2ec85f60], [3, 0x2eccf180]]}

graphs:
  test_op:
    target_device: 0
    input_count:  2
    op0:
      type: matmul
      grid_loc: [0, 0]   # [r,c]
      grid_size: [7, 8] # [r,c]
      inputs: [input0, input1]
      in_df: [Float16, Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 2
      math_fidelity: HiFi3
      attributes: {m_k: 24, u_kt: 2}
      untilize_output: false
      t: 1
      mblock: [3,  3]
      ublock: [1, 4]
      input_0_tms:
      input_1_tms: None

programs:
  - program0:
      - var : [$c_loop_count, $c_input_count]
      - staticvar : {$lptr: 0, $gptr: 0}
      - varinst: [$c_loop_count, set, 1]  # load loop count
      - varinst : [$c_input_count, set, 2]
      - loop: $c_loop_count
      - execute: {graph_name: test_op, queue_settings: {
         input0: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
         input1: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}}}
      - varinst: [$lptr, incwrap, $c_input_count, 8] # add two variables
      - varinst: [$gptr, incwrap, $c_input_count, 8] # add two variables
      - endloop

test-config:
  test-args:
    program_loop_count: 1
  comparison-config:
    type: AllCloseHw
    atol: 0.01
    rtol: 0.15
    check_pct: 0.8
    check_pcc: 0.99
    verbosity: Concise
  stimulus-config:
    type: Uniform
    uniform_lower_bound: -2.0
    uniform_upper_bound: 2.0
