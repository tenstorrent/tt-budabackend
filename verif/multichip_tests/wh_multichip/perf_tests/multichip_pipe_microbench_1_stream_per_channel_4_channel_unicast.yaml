# This test is expected to run on a system with 2 WH chips, where each one has PCIe connectivity to host
devices:
 arch: wormhole

queues:
  q0    : {type: queue, input: HOST   , entries: 64, grid_size: [1, 1], t: 1, mblock: [32, 1], ublock: [8, 1], df: Float16, target_device: 0, loc: dram, dram: [[0, 0x38da000]]} 
  output0: {type: queue, input: add_out , entries: 64, grid_size: [1, 1], t: 1, mblock: [32, 1], ublock: [8, 1], df: Float16, target_device: 1, loc: host, host: [0x0]}

graphs:
  test_unary_chip0:
    target_device: 0
    input_count: 4096
    unary0_0: {type: datacopy, grid_loc: [0, 0], grid_size: [1, 1], inputs: [q0], acc_df: Float16, in_df: [Float16], out_df: Float16,  intermed_df: Float16, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [32, 1], ublock: [8, 1], input_0_tms: []}
    unary0_1: {type: datacopy, grid_loc: [0, 1], grid_size: [1, 1], inputs: [q0], acc_df: Float16, in_df: [Float16], out_df: Float16,  intermed_df: Float16, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [32, 1], ublock: [8, 1], input_0_tms: []}
    unary0_2: {type: datacopy, grid_loc: [0, 2], grid_size: [1, 1], inputs: [q0], acc_df: Float16, in_df: [Float16], out_df: Float16,  intermed_df: Float16, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [32, 1], ublock: [8, 1], input_0_tms: []}
    unary0_3: {type: datacopy, grid_loc: [0, 3], grid_size: [1, 1], inputs: [q0], acc_df: Float16, in_df: [Float16], out_df: Float16,  intermed_df: Float16, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [32, 1], ublock: [8, 1], input_0_tms: []}

  test_unary_chip1:
    target_device: 1
    input_count: 4096
    unary1_0: {type: datacopy, grid_loc: [0, 0], grid_size: [1, 1], inputs: [unary0_0], acc_df: Float16, in_df: [Float16], out_df: Float16,  intermed_df: Float16, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [32, 1], ublock: [8, 1], input_0_tms: []}
    unary1_1: {type: datacopy, grid_loc: [0, 1], grid_size: [1, 1], inputs: [unary0_1], acc_df: Float16, in_df: [Float16], out_df: Float16,  intermed_df: Float16, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [32, 1], ublock: [8, 1], input_0_tms: []}
    unary1_2: {type: datacopy, grid_loc: [0, 2], grid_size: [1, 1], inputs: [unary0_2], acc_df: Float16, in_df: [Float16], out_df: Float16,  intermed_df: Float16, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [32, 1], ublock: [8, 1], input_0_tms: []}
    unary1_3: {type: datacopy, grid_loc: [0, 3], grid_size: [1, 1], inputs: [unary0_3], acc_df: Float16, in_df: [Float16], out_df: Float16,  intermed_df: Float16, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [32, 1], ublock: [8, 1], input_0_tms: []}

    add0: {type: add, grid_loc: [1, 0], grid_size: [1, 1], inputs: [unary1_0, unary1_1], acc_df: Float16, in_df: [Float16, Float16], out_df: Float16,  intermed_df: Float16, ublock_order: r, buf_size_mb: 1, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [32, 1], ublock: [8, 1], input_0_tms: []}
    add1: {type: add, grid_loc: [1, 1], grid_size: [1, 1], inputs: [unary1_2, unary1_3], acc_df: Float16, in_df: [Float16, Float16], out_df: Float16,  intermed_df: Float16, ublock_order: r, buf_size_mb: 1, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [32, 1], ublock: [8, 1], input_0_tms: []}

    add_out: {type: add, grid_loc: [2, 0], grid_size: [1, 1], inputs: [add0, add1], acc_df: Float16, in_df: [Float16, Float16], out_df: Float16,  intermed_df: Float16, ublock_order: r, buf_size_mb: 1, math_fidelity: HiFi3, untilize_output: true, t: 1, mblock: [32, 1], ublock: [8, 1], input_0_tms: []}


programs:
  - program0:
      - var: [$0, $1, $5, $8]
      - var: {$c_microbatch_size: 1, $c_one: 1, $c_zero: 0}
      - varinst: [$5, set, 1] # LOAD an 8 into $5
      - varinst: [$8, set, 1] # LOAD a  1 into $8 
      - loop: $5
      - execute: {graph_name: test_unary_chip0, queue_settings: {q0: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $c_zero, rd_ptr_global: $c_zero}}}
      - execute: {graph_name: test_unary_chip1, queue_settings: {}}
      - varinst: [$0, add, $0, $8] # add two variables
      - varinst: [$1, add, $1, $8] # add two variables
      - endloop: 

