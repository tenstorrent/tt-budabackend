devices:
 arch: [wormhole, wormhole_b0]

# device map
#     0   1   2   3   4   5   6   7
#    -------------------------------
# 0 |   |   |   |   |   |   |   |   |
#    -------------------------------
# 1 |   |   |   |   |   |   |   |   |
#    -------------------------------
# 2 |   |   |   |   | 2 | 1 | 4 | 7 |
#    -------------------------------
# 3 |   |   |   |   | 3 | 0*| 5 | 6 |
#    -------------------------------
# 4 |   |   |   |   |   |   |   |   |
#    -------------------------------


queues:
  q0    : {type: queue, input: HOST   , entries: 32, grid_size: [1, 1], t: 1, mblock: [2, 2], ublock: [2, 2], df: Float32, target_device: 0, loc: dram, dram: [[0, 0x10000000]]}

  output0   : {type: queue, input: op0   , entries: 32, grid_size: [1, 1], t: 1, mblock: [2, 2], ublock: [2, 2], df: Float32, target_device: 0, loc: dram, dram: [[1, 0x10000000]]}
  output1   : {type: queue, input: op1   , entries: 32, grid_size: [1, 1], t: 1, mblock: [2, 2], ublock: [2, 2], df: Float32, target_device: 1, loc: dram, dram: [[1, 0x10000000]]}
  output2   : {type: queue, input: op2   , entries: 32, grid_size: [1, 1], t: 1, mblock: [2, 2], ublock: [2, 2], df: Float32, target_device: 2, loc: dram, dram: [[1, 0x10000000]]}
  output3   : {type: queue, input: op3   , entries: 32, grid_size: [1, 1], t: 1, mblock: [2, 2], ublock: [2, 2], df: Float32, target_device: 3, loc: dram, dram: [[1, 0x10000000]]}
  output4   : {type: queue, input: op4   , entries: 32, grid_size: [1, 1], t: 1, mblock: [2, 2], ublock: [2, 2], df: Float32, target_device: 4, loc: dram, dram: [[1, 0x10000000]]}
  output5   : {type: queue, input: op5   , entries: 32, grid_size: [1, 1], t: 1, mblock: [2, 2], ublock: [2, 2], df: Float32, target_device: 5, loc: dram, dram: [[1, 0x10000000]]}
  output6   : {type: queue, input: op6   , entries: 32, grid_size: [1, 1], t: 1, mblock: [2, 2], ublock: [2, 2], df: Float32, target_device: 6, loc: dram, dram: [[1, 0x10000000]]}
  output7   : {type: queue, input: op7   , entries: 32, grid_size: [1, 1], t: 1, mblock: [2, 2], ublock: [2, 2], df: Float32, target_device: 7, loc: dram, dram: [[1, 0x10000000]]}

graphs:
  test_unary_chip0:
    target_device: 0
    input_count: 32
    forked_buffer_op: {type: datacopy, grid_loc: [0, 0], grid_size: [1, 1], inputs: [q0], acc_df: Float32, in_df: [Float32], out_df: Float32,  intermed_df: Float32, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [2, 2], ublock: [2, 2], input_0_tms: []}
    op0: {type: datacopy, grid_loc: [1, 0], grid_size: [1, 1], inputs: [forked_buffer_op], acc_df: Float32, in_df: [Float32], out_df: Float32,  intermed_df: Float32, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [2, 2], ublock: [2, 2], input_0_tms: []}

  test_unary_chip1:
    target_device: 1
    input_count: 32
    op1: {type: datacopy, grid_loc: [0, 0], grid_size: [1, 1], inputs: [forked_buffer_op], acc_df: Float32, in_df: [Float32], out_df: Float32,  intermed_df: Float32, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [2, 2], ublock: [2, 2], input_0_tms: []}

  test_unary_chip2:
    target_device: 2
    input_count: 32
    op2: {type: datacopy, grid_loc: [0, 0], grid_size: [1, 1], inputs: [forked_buffer_op], acc_df: Float32, in_df: [Float32], out_df: Float32,  intermed_df: Float32, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [2, 2], ublock: [2, 2], input_0_tms: []}

  test_unary_chip3:
    target_device: 3
    input_count: 32
    op3: {type: datacopy, grid_loc: [0, 0], grid_size: [1, 1], inputs: [forked_buffer_op], acc_df: Float32, in_df: [Float32], out_df: Float32,  intermed_df: Float32, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [2, 2], ublock: [2, 2], input_0_tms: []}

  test_unary_chip4:
    target_device: 4
    input_count: 32
    op4: {type: datacopy, grid_loc: [0, 0], grid_size: [1, 1], inputs: [forked_buffer_op], acc_df: Float32, in_df: [Float32], out_df: Float32,  intermed_df: Float32, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [2, 2], ublock: [2, 2], input_0_tms: []}

  test_unary_chip5:
    target_device: 5
    input_count: 32
    op5: {type: datacopy, grid_loc: [0, 0], grid_size: [1, 1], inputs: [forked_buffer_op], acc_df: Float32, in_df: [Float32], out_df: Float32,  intermed_df: Float32, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [2, 2], ublock: [2, 2], input_0_tms: []}

  test_unary_chip6:
    target_device: 6
    input_count: 32
    op6: {type: datacopy, grid_loc: [0, 0], grid_size: [1, 1], inputs: [forked_buffer_op], acc_df: Float32, in_df: [Float32], out_df: Float32,  intermed_df: Float32, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [2, 2], ublock: [2, 2], input_0_tms: []}

  test_unary_chip7:
    target_device: 7
    input_count: 32
    op7: {type: datacopy, grid_loc: [0, 0], grid_size: [1, 1], inputs: [forked_buffer_op], acc_df: Float32, in_df: [Float32], out_df: Float32,  intermed_df: Float32, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [2, 2], ublock: [2, 2], input_0_tms: []}
    
programs:
  - program0:
      - var: [$0, $1, $5, $8]
      - varinst: [$5, set, 1] # LOAD an 8 into $5
      - varinst: [$8, set, 1] # LOAD a  1 into $8 
      - loop: $5
      - execute: {graph_name: test_unary_chip0, queue_settings: {q0: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $0, rd_ptr_global: $0}}}
      - execute: {graph_name: test_unary_chip1, queue_settings: {}}
      - execute: {graph_name: test_unary_chip2, queue_settings: {}}
      - execute: {graph_name: test_unary_chip3, queue_settings: {}}
      - execute: {graph_name: test_unary_chip4, queue_settings: {}}
      - execute: {graph_name: test_unary_chip5, queue_settings: {}}
      - execute: {graph_name: test_unary_chip6, queue_settings: {}}
      - execute: {graph_name: test_unary_chip7, queue_settings: {}}
      - varinst: [$0, add, $0, $8] # add two variables
      - endloop: 

