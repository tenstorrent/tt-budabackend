# This test forces us to route a longer way around the cluster because one of the data edges input add0 will use all eth streams between chip0 and chip1.
# So the other pipes must go through chip0 -> chip2 -> chip3 -> chip1

devices:
 arch: [wormhole, wormhole_b0]

# device map:
#  ------------------------------------------
# | 0: 0_0  |  1: 0_1  |  2: 0_2  |  3: 0_3  |
# |------------------------------------------|
# | 4: 1_0  |  5: 1_1  |  6: 1_2  |  7: 1_3  |
#  ------------------------------------------

#     0   1   2   3   4   5   6   7
#    -------------------------------
# 0 |   |   |   |   |   |   |   |   |
#    -------------------------------
# 1 |   |   |   |   |   |   |   |   |
#    -------------------------------
# 2 |   |   |   |   | 2 | 1 | 4 | 7 |
#    -------------------------------
# 3 |   |   |   |   | 3 | 0 | 5 | 6 |
#    -------------------------------
# 4 |   |   |   |   |   |   |   |   |
#    -------------------------------



queues:
  q0    : {type: queue, input: HOST   , entries: 64, grid_size: [4, 8], t: 1, mblock: [2, 2], ublock: [2, 2], df: Float16, target_device: 3, loc: dram, dram: [
    [0, 0x10000000], [0, 0x14000000], [0, 0x18000000], [0, 0x1c000000], [0, 0x20000000], [0, 0x24000000], [0, 0x28000000], [0, 0x2c000000], 
    [0, 0x11000000], [0, 0x15000000], [0, 0x19000000], [0, 0x1d000000], [0, 0x21000000], [0, 0x25000000], [0, 0x29000000], [0, 0x2d000000], 
    [0, 0x12000000], [0, 0x16000000], [0, 0x1a000000], [0, 0x1e000000], [0, 0x22000000], [0, 0x26000000], [0, 0x2a000000], [0, 0x2e000000], 
    [0, 0x13000000], [0, 0x17000000], [0, 0x1b000000], [0, 0x1f000000], [0, 0x23000000], [0, 0x27000000], [0, 0x2b000000], [0, 0x2f000000]
    ]}
  
  q1    : {type: queue, input: HOST   , entries: 64, grid_size: [4, 8], t: 1, mblock: [2, 2], ublock: [2, 2], df: Float16, target_device: 0, loc: dram, dram: [
    [0, 0x10000000], [0, 0x14000000], [0, 0x18000000], [0, 0x1c000000], [0, 0x20000000], [0, 0x24000000], [0, 0x28000000], [0, 0x2c000000], 
    [0, 0x11000000], [0, 0x15000000], [0, 0x19000000], [0, 0x1d000000], [0, 0x21000000], [0, 0x25000000], [0, 0x29000000], [0, 0x2d000000], 
    [0, 0x12000000], [0, 0x16000000], [0, 0x1a000000], [0, 0x1e000000], [0, 0x22000000], [0, 0x26000000], [0, 0x2a000000], [0, 0x2e000000], 
    [0, 0x13000000], [0, 0x17000000], [0, 0x1b000000], [0, 0x1f000000], [0, 0x23000000], [0, 0x27000000], [0, 0x2b000000], [0, 0x2f000000]
    ]}

  output0: {type: queue, input: unary2 , entries: 64, grid_size: [4, 8], t: 1, mblock: [2, 2], ublock: [2, 2], df: Float16, target_device: 5, loc: dram, dram: [
    [0, 0x10000000], [0, 0x14000000], [0, 0x18000000], [0, 0x1c000000], [0, 0x20000000], [0, 0x24000000], [0, 0x28000000], [0, 0x2c000000], 
    [0, 0x11000000], [0, 0x15000000], [0, 0x19000000], [0, 0x1d000000], [0, 0x21000000], [0, 0x25000000], [0, 0x29000000], [0, 0x2d000000], 
    [0, 0x12000000], [0, 0x16000000], [0, 0x1a000000], [0, 0x1e000000], [0, 0x22000000], [0, 0x26000000], [0, 0x2a000000], [0, 0x2e000000], 
    [0, 0x13000000], [0, 0x17000000], [0, 0x1b000000], [0, 0x1f000000], [0, 0x23000000], [0, 0x27000000], [0, 0x2b000000], [0, 0x2f000000]
    ]}
  output1: {type: queue, input: unary3 , entries: 64, grid_size: [4, 8], t: 1, mblock: [2, 2], ublock: [2, 2], df: Float16, target_device: 6, loc: dram, dram: [
    [0, 0x10000000], [0, 0x14000000], [0, 0x18000000], [0, 0x1c000000], [0, 0x20000000], [0, 0x24000000], [0, 0x28000000], [0, 0x2c000000], 
    [0, 0x11000000], [0, 0x15000000], [0, 0x19000000], [0, 0x1d000000], [0, 0x21000000], [0, 0x25000000], [0, 0x29000000], [0, 0x2d000000], 
    [0, 0x12000000], [0, 0x16000000], [0, 0x1a000000], [0, 0x1e000000], [0, 0x22000000], [0, 0x26000000], [0, 0x2a000000], [0, 0x2e000000], 
    [0, 0x13000000], [0, 0x17000000], [0, 0x1b000000], [0, 0x1f000000], [0, 0x23000000], [0, 0x27000000], [0, 0x2b000000], [0, 0x2f000000]
    ]}

graphs:
  test_unary_chip3:
    target_device: 3
    input_count: 64
    unary0: {type: sqrt, grid_loc: [0, 0], grid_size: [4,8], inputs: [q0], acc_df: Float16, in_df: [Float16], out_df: Float16, ublock_order: r, buf_size_mb: 2,  intermed_df: Float16, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [2, 2], ublock: [2, 2], input_0_tms: []}
  test_unary_chip0:
    target_device: 0
    input_count: 64
    unary1: {type: gelu, grid_loc: [0, 0], grid_size: [4,8], inputs: [q1], acc_df: Float16, in_df: [Float16], out_df: Float16, ublock_order: r, buf_size_mb: 2,  intermed_df: Float16, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [2, 2], ublock: [2, 2], input_0_tms: []}
  test_unary_chip5:
    target_device: 5
    input_count: 64
    unary2: {type: datacopy, grid_loc: [0, 0], grid_size: [4,8], inputs: [unary1], acc_df: Float16, in_df: [Float16], out_df: Float16, ublock_order: r, buf_size_mb: 2,  intermed_df: Float16, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [2, 2], ublock: [2, 2], input_0_tms: []}
  test_unary_chip6:
    target_device: 6
    input_count: 64
    unary3: {type: datacopy, grid_loc: [0, 0], grid_size: [4,8], inputs: [unary0], acc_df: Float16, in_df: [Float16], out_df: Float16, ublock_order: r, buf_size_mb: 2,  intermed_df: Float16, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [2, 2], ublock: [2, 2], input_0_tms: []}

  test_unary_chip1:
    target_device: 1
    input_count: 64
  test_unary_chip2:
    target_device: 2
    input_count: 64
  test_unary_chip4:
    target_device: 4
    input_count: 64
  test_unary_chip7:
    target_device: 7
    input_count: 64


programs:
  - program0:
      - var: [$0, $1, $5, $8]
      - varinst: [$5, set, 1] # LOAD an 8 into $5
      - varinst: [$8, set, 1] # LOAD a  1 into $8 
      - loop: $5
      - execute: {graph_name: test_unary_chip0, queue_settings: {q1: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $0, rd_ptr_global: $0}}}
      - execute: {graph_name: test_unary_chip1, queue_settings: {}}
      - execute: {graph_name: test_unary_chip2, queue_settings: {}}
      - execute: {graph_name: test_unary_chip3, queue_settings: {q0: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $0, rd_ptr_global: $0}}}
      - execute: {graph_name: test_unary_chip4, queue_settings: {}}
      - execute: {graph_name: test_unary_chip5, queue_settings: {}}
      - execute: {graph_name: test_unary_chip6, queue_settings: {}}
      - execute: {graph_name: test_unary_chip7, queue_settings: {}}
      - varinst: [$0, add, $0, $8] # add two variables
      - varinst: [$1, add, $1, $8] # add two variables
      - endloop: 

