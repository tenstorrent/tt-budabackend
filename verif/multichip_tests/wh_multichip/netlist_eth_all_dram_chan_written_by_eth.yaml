devices:
 arch: [wormhole, wormhole_b0]

queues:
  q0    : {type: queue, input: HOST   , entries: 1, grid_size: [1, 1], t: 1, mblock: [2, 2], ublock: [2, 2], df: Float16, target_device: 0, loc: dram, dram: [[0, 0x10000000]]} #, [0, 0x1000], [0, 0x1000], [0, 0x1000]]}
  q1    : {type: queue, input: HOST   , entries: 1, grid_size: [1, 1], t: 1, mblock: [2, 2], ublock: [2, 2], df: Float16, target_device: 0, loc: dram, dram: [[1, 0x10000000]]} #, [0, 0x1000], [0, 0x1000], [0, 0x1000]]}
  q2    : {type: queue, input: HOST   , entries: 1, grid_size: [1, 1], t: 1, mblock: [2, 2], ublock: [2, 2], df: Float16, target_device: 0, loc: dram, dram: [[2, 0x10000000]]} #, [0, 0x1000], [0, 0x1000], [0, 0x1000]]}
  q3    : {type: queue, input: HOST   , entries: 1, grid_size: [1, 1], t: 1, mblock: [2, 2], ublock: [2, 2], df: Float16, target_device: 0, loc: dram, dram: [[3, 0x10000000]]} #, [0, 0x1000], [0, 0x1000], [0, 0x1000]]}
  q4    : {type: queue, input: HOST   , entries: 1, grid_size: [1, 1], t: 1, mblock: [2, 2], ublock: [2, 2], df: Float16, target_device: 0, loc: dram, dram: [[4, 0x10000000]]} #, [0, 0x1000], [0, 0x1000], [0, 0x1000]]}
  q5    : {type: queue, input: HOST   , entries: 1, grid_size: [1, 1], t: 1, mblock: [2, 2], ublock: [2, 2], df: Float16, target_device: 0, loc: dram, dram: [[5, 0x10000000]]} #, [0, 0x1000], [0, 0x1000], [0, 0x1000]]}
  output0: {type: queue, input: unary0 , entries: 1, grid_size: [1, 1], t: 1, mblock: [2, 2], ublock: [2, 2], df: Float16, target_device: 1, loc: dram, dram: [[0, 0x20000000]]} #, [0, 0x2000], [0, 0x2000], [0, 0x2000]]}
  output1: {type: queue, input: unary1 , entries: 1, grid_size: [1, 1], t: 1, mblock: [2, 2], ublock: [2, 2], df: Float16, target_device: 1, loc: dram, dram: [[1, 0x20000000]]} #, [0, 0x2000], [0, 0x2000], [0, 0x2000]]}
  output2: {type: queue, input: unary2 , entries: 1, grid_size: [1, 1], t: 1, mblock: [2, 2], ublock: [2, 2], df: Float16, target_device: 1, loc: dram, dram: [[2, 0x20000000]]} #, [0, 0x2000], [0, 0x2000], [0, 0x2000]]}
  output3: {type: queue, input: unary3 , entries: 1, grid_size: [1, 1], t: 1, mblock: [2, 2], ublock: [2, 2], df: Float16, target_device: 1, loc: dram, dram: [[3, 0x20000000]]} #, [0, 0x2000], [0, 0x2000], [0, 0x2000]]}
  output4: {type: queue, input: unary4 , entries: 1, grid_size: [1, 1], t: 1, mblock: [2, 2], ublock: [2, 2], df: Float16, target_device: 1, loc: dram, dram: [[4, 0x20000000]]} #, [0, 0x2000], [0, 0x2000], [0, 0x2000]]}
  output5: {type: queue, input: unary5 , entries: 1, grid_size: [1, 1], t: 1, mblock: [2, 2], ublock: [2, 2], df: Float16, target_device: 1, loc: dram, dram: [[5, 0x20000000]]} #, [0, 0x2000], [0, 0x2000], [0, 0x2000]]}

graphs:

  test_unary_chip0:
    target_device: 0
    input_count: 1
    unary0: {type: datacopy, grid_loc: [2, 2], grid_size: [1, 1], inputs: [q0], acc_df: Float16, in_df: [Float16], out_df: Float16,  intermed_df: Float16, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [2, 2], ublock: [2, 2], input_0_tms: []}
    unary1: {type: datacopy, grid_loc: [3, 2], grid_size: [1, 1], inputs: [q1], acc_df: Float16, in_df: [Float16], out_df: Float16,  intermed_df: Float16, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [2, 2], ublock: [2, 2], input_0_tms: []}
    unary2: {type: datacopy, grid_loc: [4, 2], grid_size: [1, 1], inputs: [q2], acc_df: Float16, in_df: [Float16], out_df: Float16,  intermed_df: Float16, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [2, 2], ublock: [2, 2], input_0_tms: []}
    unary3: {type: datacopy, grid_loc: [5, 2], grid_size: [1, 1], inputs: [q3], acc_df: Float16, in_df: [Float16], out_df: Float16,  intermed_df: Float16, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [2, 2], ublock: [2, 2], input_0_tms: []}
    unary4: {type: datacopy, grid_loc: [6, 2], grid_size: [1, 1], inputs: [q4], acc_df: Float16, in_df: [Float16], out_df: Float16,  intermed_df: Float16, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [2, 2], ublock: [2, 2], input_0_tms: []}
    unary5: {type: datacopy, grid_loc: [7, 2], grid_size: [1, 1], inputs: [q5], acc_df: Float16, in_df: [Float16], out_df: Float16,  intermed_df: Float16, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [2, 2], ublock: [2, 2], input_0_tms: []}

  test_unary_chip1:
    target_device: 1
    input_count: 1

programs:
  - program0:
      - var: [$0, $1, $5, $8]
      - varinst: [$5, set, 1] # LOAD an 8 into $5
      - varinst: [$8, set, 1] # LOAD a  1 into $8 
      - loop: $5
      - execute: {graph_name: test_unary_chip0, queue_settings: {
        q0: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $0, rd_ptr_global: $0},
        q1: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $0, rd_ptr_global: $0},
        q2: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $0, rd_ptr_global: $0},
        q3: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $0, rd_ptr_global: $0},
        q4: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $0, rd_ptr_global: $0},
        q5: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $0, rd_ptr_global: $0}
      }}
      - execute: {graph_name: test_unary_chip1, queue_settings: {}}
      - varinst: [$0, add, $0, $8] # add two variables
      - varinst: [$1, add, $1, $8] # add two variables
      - endloop: 

