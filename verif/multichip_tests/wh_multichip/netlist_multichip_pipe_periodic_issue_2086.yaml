# test_config_id=$TEMPLATE_test_config_id
devices:
  arch: wormhole_b0

queues:
  input0_dram:
    type: queue
    input: HOST
    entries: 2
    grid_size: [8, 3]
    t: 1
    mblock: [6, 1]
    ublock: [1, 1]
    df: Float16
    ublock_order: r
    target_device: 0
    loc: dram
    dram: [[1, 0x10000000], [1, 0x100061a0], [1, 0x1000c340], [1, 0x100124e0], [1, 0x10018680], [1, 0x1001e820], [1, 0x100249c0], [1, 0x1002ab60], [1, 0x10030d00], [1, 0x10036ea0], [1, 0x1003d040], [1, 0x100431e0], [1, 0x10049380], [1, 0x1004f520], [1, 0x100556c0], [1, 0x1005b860], [1, 0x10061a00], [1, 0x10067ba0], [1, 0x1006dd40], [1, 0x10073ee0], [1, 0x1007a080], [1, 0x10080220], [1, 0x100863c0], [1, 0x1008c560]]

  input1_dram:
    type: queue
    input: HOST
    entries: 2
    grid_size: [1, 1]
    t: 20
    mblock: [3, 1]
    ublock: [3, 2]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[2, 0x10000000]]

  output_dram:
    type: queue
    input: output
    entries: 2
    grid_size: [4, 1]
    t: 20
    mblock: [3, 1]
    ublock: [4, 2]
    df: Float16
    target_device: 1
    loc: dram
    dram: [[3, 0x10000000], [3, 0x101e7820], [3, 0x103cf040], [3, 0x105b6860]]

graphs:
  graph_producer_chip_0:
    target_device: 0
    input_count: 2
    feeder0:
      type: datacopy
      grid_loc: [0, 0]
      grid_size: [8, 3]
      inputs: [input0_dram]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: c
      buf_size_mb: 2
      math_fidelity: HiFi4
      t: 1
      mblock: [6, 1]
      ublock: [1, 1]
    feeder1:
      type: datacopy
      grid_loc: [6, 3]
      grid_size: [1, 1]
      inputs: [input1_dram]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: c
      buf_size_mb: 20
      math_fidelity: HiFi4
      t: 20
      mblock: [3, 1]
      ublock: [3, 2]
  graph_consumer_chip_1:
    target_device: 1
    input_count: 2
    output:
      type: matmul
      grid_loc: [2, 3]
      grid_size: [4, 1]
      inputs: [feeder0, feeder1]
      in_df: [Float16, Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 1
      math_fidelity: HiFi4
      attributes: {m_k: 1, u_kt: 9}
      untilize_output: False
      t: 20
      mblock: [3, 1]
      ublock: [4, 2]
      input_0_tms: [broadcast: {c: 3}, broadcast: {z: 20}]
      input_1_tms: [transpose, transpose]

programs:
  - test_multi_tm_datacopy_matmul_program:
    - staticvar: [$lptr, $gptr]
    - var: {$p_microbatch_count: 1, $p_microbatch_size: 2}
    - var: {$c_zero: 0, $c_wrap: 2}                         # c_wrap = 2 - finally need to be equal to 2*entries == 2*microbatch_size*microbatch_count
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_size]  # c_wrap = 2*microbatch_size
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_count] # c_wrap = 2*microbatch_size*microbatch_count
    - loop: $p_microbatch_count #loop over number of microbatches that make a minibatch
    -   execute: {
          graph_name: graph_producer_chip_0,
          queue_settings: {
            input0_dram: {prologue: False, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
            input1_dram: {prologue: False, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}
          }
        }
    -   execute: {
          graph_name: graph_consumer_chip_1
        }
    -   varinst: [$lptr, incwrap, $p_microbatch_size, $c_wrap]
    -   varinst: [$gptr, incwrap, $p_microbatch_size, $c_wrap]
    - endloop

test-config:
  test-args:
    microbatch_count: 1 # entries / input_count
    microbatch_size: 2 # input_count
    minibatch_count: 1 # host loop iterations