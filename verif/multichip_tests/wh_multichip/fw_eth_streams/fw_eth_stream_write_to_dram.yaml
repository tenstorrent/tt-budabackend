devices:
 arch: [wormhole, wormhole_b0]

queues:
  q0    :      {type: queue, input: HOST, entries: 2, grid_size: [1, 1], t: 32, mblock: [1, 1], ublock: [1, 2], tile_dim: [32, 32], df: Float16_b, target_device: 0, loc: dram, dram: [[0, 0x30000000]]}
  q1:  {input: HOST, type: queue, entries: 2, grid_size: [1, 1], t: 32, mblock: [64, 2], ublock: [1, 1], ublock_order: r, tile_dim: [32, 32], df: Float16_b, target_device: 0, loc: dram, dram: [[0, 0x31000000]]}

  output_1: {input: concatenate_413.dc.concatenate.2, type: queue, entries: 2, grid_size: [1, 2], t: 32, mblock: [65, 1], ublock: [1, 1], ublock_order: r, tile_dim: [32, 32], df: Float16_b, target_device: 1, loc: dram, dram: [[0, 0x40d0100], [0, 0x40000000]]}
  output_2: {input: transpose_412.dc.sparse_matmul.3.lc2, type: queue, entries: 2, grid_size: [1, 1], t: 32, mblock: [1, 1], ublock: [1, 2], ublock_order: r, tile_dim: [32, 32], df: Float16_b, target_device: 1, loc: dram, dram: [[0, 0x42000000]]}

graphs:
  test_unary_chip0:
    target_device: 0
    input_count: 1
    transpose_412.dc.sparse_matmul.3.lc2: {type: gelu, grid_loc: [0, 0], grid_size: [1, 1], inputs: [q0],
         t: 32, mblock: [1, 1], ublock: [1, 2], tile_dim: [32, 32], buf_size_mb: 2, ublock_order: r, in_df: [Float16_b], out_df: Float16_b, intermed_df: Float16_b, acc_df: Float16_b, math_fidelity: HiFi3}
    concatenate_413.dc.concatenate.2: {type: splice, grid_loc: [1, 0], grid_size: [1, 2], inputs: [q1, transpose_412.dc.sparse_matmul.3.lc2],
         t: 32, mblock: [65, 1], ublock: [1, 1], tile_dim: [32, 32], buf_size_mb: 2, ublock_order: r, in_df: [Float16_b, Float16_b], out_df: Float16_b, intermed_df: Float32, acc_df: Float32, math_fidelity: HiFi3,
         attributes: {input0: [0, 64, 64], input1: [0, 1, 1]}}

  test_unary_chip1:
    target_device: 1
    input_count: 1

programs:
  - program0:
      - staticvar: {$0: 0, $ubatch: 1, $q_wrap: 4, $5: 1}
      - loop: $5
      - execute: {graph_name: test_unary_chip0, queue_settings: {
        q0: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $0, rd_ptr_global: $0},
        q1: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $0, rd_ptr_global: $0}
        }}
      - execute: {graph_name: test_unary_chip1, queue_settings: {}}
      - varinst: [$0, incwrap, $ubatch, $q_wrap] # add two variables
      - endloop: 

