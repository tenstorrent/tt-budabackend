devices:
 arch: [wormhole, wormhole_b0]

queues:
  q0    : {type: queue, input: HOST   , entries: 2, grid_size: [1, 1], t: 1, mblock: [2, 8], ublock: [2, 2], df: Float16, target_device: 0, loc: dram, dram: [[0, 0x10000000]]} #, [0, 0x1000], [0, 0x1000], [0, 0x1000]]}
  q1    : {type: queue, input: HOST   , entries: 2, grid_size: [1, 1], t: 1, mblock: [2, 8], ublock: [2, 2], df: Float16, target_device: 0, loc: dram, dram: [[0, 0x20000000]]} #, [0, 0x1000], [0, 0x1000], [0, 0x1000]]}
  output0: {type: queue, input: unary3 , entries: 2, grid_size: [1, 8], t: 1, mblock: [2, 1], ublock: [2, 2], df: Float16, target_device: 1, loc: dram, dram: [[0, 0x20000000], [0, 0x21000000], [0, 0x22000000], [0, 0x23000000], [0, 0x24000000],
  [0, 0x25000000], [0, 0x26000000], [0, 0x27000000]]} 
  output1: {type: queue, input: unary4 , entries: 2, grid_size: [1, 8], t: 1, mblock: [2, 1], ublock: [2, 2], df: Float16, target_device: 1, loc: dram, dram: [[0, 0x28000000], [0, 0x29000000], [0, 0x2a000000], [0, 0x2b000000], [0, 0x2c000000], 
  [0, 0x2d000000], [0, 0x2e000000], [0, 0x2f000000]]} 

graphs:
  test_unary_chip0:
    target_device: 0
    input_count: 1
    unary0: {type: datacopy, grid_loc: [0, 0], grid_size: [2, 8], inputs: [q0], acc_df: Float16, in_df: [Float16], out_df: Float16,  intermed_df: Float16, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [1, 1], ublock: [2, 2], input_0_tms: []}
    unary1: {type: datacopy, grid_loc: [2, 0], grid_size: [2, 8], inputs: [q1], acc_df: Float16, in_df: [Float16], out_df: Float16,  intermed_df: Float16, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [1, 1], ublock: [2, 2], input_0_tms: []}

  test_unary_chip1:
    target_device: 1
    input_count: 1
    unary3: {type: datacopy, grid_loc: [0, 0], grid_size: [1, 8], inputs: [unary0], acc_df: Float16, in_df: [Float16], out_df: Float16,  intermed_df: Float16, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [2, 1], ublock: [2, 2], input_0_tms: []}
    unary4: {type: datacopy, grid_loc: [1, 0], grid_size: [1, 8], inputs: [unary1], acc_df: Float16, in_df: [Float16], out_df: Float16,  intermed_df: Float16, ublock_order: r, buf_size_mb: 2, math_fidelity: HiFi3, untilize_output: false, t: 1, mblock: [2, 1], ublock: [2, 2], input_0_tms: []}

programs:
  - program0:
      - var: [$0, $1, $5, $8]
      - varinst: [$5, set, 1] # LOAD an 8 into $5
      - varinst: [$8, set, 1] # LOAD a  1 into $8 
      - loop: $5
      - execute: {graph_name: test_unary_chip0, queue_settings: {
        q0: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $0, rd_ptr_global: $0},
        q1: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $0, rd_ptr_global: $0}}}
      - execute: {graph_name: test_unary_chip1, queue_settings: {}}
      - varinst: [$0, add, $0, $8] # add two variables
      - varinst: [$1, add, $1, $8] # add two variables

      # - staticvar: {$gptr: 0, $lptr: 0}
      # - var: [$0, $1, $5, $8]
      # - var: {$loop_cnt: 1}
      # - loop: $loop_cnt
      # - execute: {graph_name: test_unary_chip0, queue_settings: {q0: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}}}
      # - execute: {graph_name: test_unary_chip1, queue_settings: {}}
      # - varinst: [$0, add, $0, $8] # add two variables
      # - varinst: [$1, add, $1, $8] # add two variables
      # - varinst: [$gptr, incwrap, 1, 4] # add two variables
      # - varinst: [$lptr, incwrap, 1, 4] # add two variables
      - endloop: 

