devices:
  arch: [grayskull, wormhole]

queues:

  # input
  input_activations:             {input: HOST, type: queue, entries: 1, grid_size: [1, 1], t: 1, mblock: [2, 2], ublock: [2, 2], df: Float16_b, target_device: 0, loc: dram, dram: [[2, 0x30000000]]}

  # output
  output_activations:            {input: ff_0_ff2.bias, type: queue, entries: 1, grid_size: [1, 1], t: 1, mblock: [4, 4], ublock: [1, 1], df: Float16_b, target_device: 0, loc: host, host: [0x0]}

  # parameter
  ff.intermediate.dense.bias:    {input: HOST, type: ram, entries: 1, grid_size: [1, 1], t: 1, mblock: [1, 8], ublock: [1, 2], df: Float16_b, target_device: 0, loc: dram, dram: [[0, 0x30000000]]}
  ff.intermediate.dense.weight:  {input: HOST, type: ram, entries: 1, grid_size: [1, 1], t: 1, mblock: [2, 8], ublock: [2, 2], df: Float16_b, target_device: 0, loc: dram, dram: [[1, 0x30000000]]}
  ff.output.dense.bias:          {input: HOST, type: ram, entries: 1, grid_size: [1, 1], t: 1, mblock: [1, 2], ublock: [1, 2], df: Float16_b, target_device: 0, loc: dram, dram: [[4, 0x30000000]]}
  ff.output.dense.weight:        {input: HOST, type: ram, entries: 1, grid_size: [1, 1], t: 1, mblock: [8, 2], ublock: [2, 2], df: Float16_b, target_device: 0, loc: dram, dram: [[5, 0x30000000]]}

graphs:
  fwd_0:
    target_device: 0
    input_count: 1
    ff_0_ff1: {type: matmul, grid_loc: [0, 0], grid_size: [1, 1], inputs: [input_activations, ff.intermediate.dense.weight],
         t: 1, mblock: [2, 8], ublock: [2, 2], in_df: [Float16_b, Float16_b], out_df: Float16_b, intermed_df: Float16_b, acc_df: Float16_b, math_fidelity: HiFi3,
         ublock_order: r, buf_size_mb: 2, attributes: {m_k: 2, u_kt: 2}}
    ff_0_ff1.bias: {type: add, grid_loc: [0, 1], grid_size: [1, 1], inputs: [ff_0_ff1, ff.intermediate.dense.bias],
         t: 1, mblock: [2, 8], ublock: [2, 2], in_df: [Float16_b, Float16_b], out_df: Float16_b, intermed_df: Float16_b, acc_df: Float16_b, math_fidelity: HiFi3,
         ublock_order: r, buf_size_mb: 2, input_1_tms: [broadcast: {r: 4}]}
    ff0_gelu: {type: gelu, grid_loc: [0, 2], grid_size: [1, 1], inputs: [ff_0_ff1.bias],
         t: 1, mblock: [2, 8], ublock: [2, 2], in_df: [Float16_b], out_df: Float16_b, intermed_df: Float16_b, acc_df: Float16_b, math_fidelity: HiFi3,
         ublock_order: r, buf_size_mb: 2, }
    ff_0_ff2: {type: matmul, grid_loc: [0, 3], grid_size: [1, 1], inputs: [ff0_gelu, ff.output.dense.weight],
         t: 1, mblock: [2, 2], ublock: [2, 2], in_df: [Float16_b, Float16_b], out_df: Float16_b, intermed_df: Float16_b, acc_df: Float16_b, math_fidelity: HiFi3,
         ublock_order: r, buf_size_mb: 2, attributes: {m_k: 8, u_kt: 2}}
    ff_0_ff2.bias: {type: add, grid_loc: [0, 4], grid_size: [1, 1], inputs: [ff_0_ff2, ff.output.dense.bias], untilize_output: true,
         t: 1, mblock: [2, 2], ublock: [2, 2], in_df: [Float16_b, Float16_b], out_df: Float16_b, intermed_df: Float16_b, acc_df: Float16_b, math_fidelity: HiFi3,
         ublock_order: r, buf_size_mb: 2, input_1_tms: [broadcast: {r: 4}]}


programs:
  - run_fwd:
    - param: [$p_microbatch_count]
    - var: {$c_microbatch_size: 1, $c_one: 1, $c_zero: 0}
    - staticvar: {$gptr_q0: 0, $lptr_q0: 0}
    - loop: $p_microbatch_count
    -   execute: {graph_name: fwd_0, queue_settings: {
               ff.output.dense.bias: {prologue: true, epilogue: false, zero: false, rd_ptr_global: $c_zero, wr_ptr_global: $c_zero},
               ff.output.dense.weight: {prologue: true, epilogue: false, zero: false, rd_ptr_global: $c_zero, wr_ptr_global: $c_zero},
               ff.intermediate.dense.bias: {prologue: true, epilogue: false, zero: false, rd_ptr_global: $c_zero, wr_ptr_global: $c_zero},
               ff.intermediate.dense.weight: {prologue: true, epilogue: false, zero: false, rd_ptr_global: $c_zero, wr_ptr_global: $c_zero},
               input_activations: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr_q0, rd_ptr_global: $gptr_q0}} }
    -   varinst: [$gptr_q0, incwrap, $c_microbatch_size, 1]
    -   varinst: [$lptr_q0, incwrap, $c_microbatch_size, 1]
    - endloop

test-config:
  comparison-config:
    type: AllCloseHw
    atol: 0.01
    rtol: 0.15
    check_pcc: 0.99
    check_pct: 0.80
    verbosity: Concise
  stimulus-config:
    type: Uniform
    uniform_lower_bound: -1.0
    uniform_upper_bound: 1.0
    overrides:
      .*\.weight: 
        type: Normal
        normal_mean: 0.0
        normal_stddev: 1.0
      .*\.bias:
        type: Constant
        constant_value: 1.0
  io-config:
    inputs: [input_activations]
    outputs: [output_activations]
