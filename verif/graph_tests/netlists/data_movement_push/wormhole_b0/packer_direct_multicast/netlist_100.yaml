# Source: netlist_34028ece5008dd4fe03b5451ae0a4db0.yaml

devices:
  arch: wormhole_b0

queues:
  input0_dram:
    type: queue
    input: HOST
    entries: 2
    grid_size: [1, 1]
    t: 1
    mblock: [15, 2]
    ublock: [1, 1]
    df: Float16
    ublock_order: r
    target_device: 0
    loc: dram
    dram: [[3, 0x10000000]]

  input1_dram:
    type: queue
    input: HOST
    entries: 2
    grid_size: [2, 8]
    t: 1
    mblock: [2, 12]
    ublock: [4, 1]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[1, 0x10000000], [1, 0x10061820], [1, 0x100c3040], [1, 0x10124860], [1, 0x10186080], [1, 0x101e78a0], [1, 0x102490c0], [1, 0x102aa8e0], [1, 0x1030c100], [1, 0x1036d920], [1, 0x103cf140], [1, 0x10430960], [1, 0x10492180], [1, 0x104f39a0], [1, 0x105551c0], [1, 0x105b69e0]]

  output_dram:
    type: queue
    input: output
    entries: 2
    grid_size: [1, 2]
    t: 16
    mblock: [15, 3]
    ublock: [1, 4]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[2, 0x10000000], [2, 0x10b6d020]]

graphs:
  test_multi_tm_datacopy_matmul:
    target_device: 0
    input_count: 2
    feeder0:
      type: datacopy
      grid_loc: [1, 4]
      grid_size: [1, 1]
      inputs: [input0_dram]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 2
      math_fidelity: HiFi4
      t: 1
      mblock: [5, 1]
      ublock: [3, 2]
    feeder1:
      type: datacopy
      grid_loc: [2, 1]
      grid_size: [2, 6]
      inputs: [input1_dram]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 2
      math_fidelity: HiFi4
      t: 1
      mblock: [8, 2]
      ublock: [1, 8]
    output:
      type: matmul
      grid_loc: [1, 5]
      grid_size: [1, 2]
      inputs: [feeder0, feeder1]
      in_df: [Float16, Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 1
      math_fidelity: HiFi4
      attributes: {m_k: 2, u_kt: 2}
      untilize_output: false
      t: 16
      mblock: [15, 3]
      ublock: [1, 4]
      input_0_tms: [broadcast: {z: 16}, broadcast: {r: 1}, broadcast: {c: 2}]
      input_1_tms: [hslice: 4, vslice: 4, broadcast: {r: 1}]

programs:
  - test_multi_tm_datacopy_matmul_program:
    - param: [$p_microbatch_count, $p_microbatch_size]
    - staticvar: [$lptr, $gptr]
    - var: {$c_zero: 0, $c_wrap: 2}                         # c_wrap = 2 - finally need to be equal to 2*entries == 2*microbatch_size*microbatch_count
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_size]  # c_wrap = 2*microbatch_size
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_count] # c_wrap = 2*microbatch_size*microbatch_count
    - loop: $p_microbatch_count #loop over number of microbatches that make a minibatch
    -   execute: {
          graph_name: test_multi_tm_datacopy_matmul,
          queue_settings: {
            input0_dram: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
            input1_dram: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}
          }
        }
    -   varinst: [$lptr, incwrap, $p_microbatch_size, $c_wrap]
    -   varinst: [$gptr, incwrap, $p_microbatch_size, $c_wrap]
    - endloop

test-config:
  test-args:
    microbatch_count: 1 # entries / input_count
    microbatch_size: 2 # input_count
    minibatch_count: 1 # host loop iterations