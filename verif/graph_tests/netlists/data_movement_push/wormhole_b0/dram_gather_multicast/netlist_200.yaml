# test_config_id=2
devices:
  arch: wormhole_b0

queues:
  input0_dram:
    type: queue
    input: HOST
    entries: 1
    grid_size: [2, 2]
    t: 1
    mblock: [28, 20]
    ublock: [4, 2]
    df: Float16
    ublock_order: r
    target_device: 0
    loc: dram
    dram: [[4, 0x10000000], [4, 0x108e3020], [4, 0x111c6040], [4, 0x11aa9060]]

  input1_dram:
    type: queue
    input: HOST
    entries: 1
    grid_size: [1, 3]
    t: 35
    mblock: [4, 4]
    ublock: [4, 2]
    df: Float16
    ublock_order: r
    target_device: 0
    loc: dram
    dram: [[1, 0x10000000], [1, 0x108e3020], [1, 0x111c6040]]

  output_dram:
    type: queue
    input: target_op0
    entries: 1
    grid_size: [8, 6]
    t: 35
    mblock: [1, 2]
    ublock: [4, 2]
    df: Float16
    ublock_order: r
    target_device: 0
    loc: dram
    dram: [[3, 0x10000000], [3, 0x1011c620], [3, 0x10238c40], [3, 0x10355260], [3, 0x10471880], [3, 0x1058dea0], [3, 0x106aa4c0], [3, 0x107c6ae0], [3, 0x108e3100], [3, 0x109ff720], [3, 0x10b1bd40], [3, 0x10c38360], [3, 0x10d54980], [3, 0x10e70fa0], [3, 0x10f8d5c0], [3, 0x110a9be0], [3, 0x111c6200], [3, 0x112e2820], [3, 0x113fee40], [3, 0x1151b460], [3, 0x11637a80], [3, 0x117540a0], [3, 0x118706c0], [3, 0x1198cce0], [3, 0x11aa9300], [3, 0x11bc5920], [3, 0x11ce1f40], [3, 0x11dfe560], [3, 0x11f1ab80], [3, 0x120371a0], [3, 0x121537c0], [3, 0x1226fde0], [3, 0x1238c400], [3, 0x124a8a20], [3, 0x125c5040], [3, 0x126e1660], [3, 0x127fdc80], [3, 0x1291a2a0], [3, 0x12a368c0], [3, 0x12b52ee0], [3, 0x12c6f500], [3, 0x12d8bb20], [3, 0x12ea8140], [3, 0x12fc4760], [3, 0x130e0d80], [3, 0x131fd3a0], [3, 0x133199c0], [3, 0x13435fe0]]

graphs:
  test_op:
    target_device: 0
    input_count: 1
    target_op0:
      type: matmul
      grid_loc: [0, 0]
      grid_size: [8, 6]
      inputs: [input0_dram, input1_dram]
      in_df: [Float16, Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 1
      math_fidelity: HiFi4
      attributes: {m_k: 2, u_kt: 8}
      t: 35
      mblock: [1, 2]
      ublock: [4, 2]
      input_0_tms: [hslice: 5, vslice: 7]
      untilize_output: false

programs:
  - program0:
    - staticvar: [$lptr, $gptr]
    - var: [$c_microbatch_count, $c_zero, $c_wrap]
    - varinst: [$c_microbatch_count, set, 1]
    - varinst: [$c_zero, set, 0]
    - varinst: [$c_wrap, set, 2]
    - varinst: [$c_wrap, mul, $c_wrap, 1]  # c_wrap = 2*microbatch_size
    - varinst: [$c_wrap, mul, $c_wrap, 1] # c_wrap = 2*microbatch_size*microbatch_count
    - loop: $c_microbatch_count #loop over number of microbatches that make a minibatch
    -   execute: {
          graph_name: test_op,
          queue_settings: {
               input0_dram: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
               input1_dram: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}
          }
        }
    -   varinst: [$lptr, incwrap, 1, $c_wrap]
    -   varinst: [$gptr, incwrap, 1, $c_wrap]
    - endloop

test-config:
  test-args:
    microbatch_count: 1 # entries / input_count
    microbatch_size: 1 # input_count
    minibatch_count: 1 # host loop iterations