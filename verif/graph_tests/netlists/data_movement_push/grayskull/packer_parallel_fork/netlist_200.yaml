# test_config_id=8
devices:
  arch: grayskull

queues:
  input0_dram:
    type: queue
    input: HOST
    entries: 1
    grid_size: [1, 1]
    t: 2
    mblock: [20, 220]
    ublock: [3, 1]
    df: Float16
    ublock_order: r
    target_device: 0
    loc: dram
    dram: [[2, 0x10000000]]

  output0_dram:
    type: queue
    input: drainer0
    entries: 1
    grid_size: [1, 1]
    t: 200
    mblock: [3, 44]
    ublock: [1, 1]
    df: Float16
    ublock_order: r
    target_device: 0
    loc: host
    host: [0x0]

  output1_dram:
    type: queue
    input: drainer1
    entries: 1
    grid_size: [1, 1]
    t: 200
    mblock: [3, 44]
    ublock: [1, 1]
    df: Float16
    ublock_order: r
    target_device: 0
    loc: host
    host: [0x345e420]

graphs:
  test_op:
    target_device: 0
    input_count: 1
    feeder0:
      type: datacopy
      grid_loc: [1, 1]
      grid_size: [1, 1]
      inputs: [input0_dram]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 2
      math_fidelity: HiFi4
      t: 200
      mblock: [1, 44]
      ublock: [3, 1]
      input_0_tms: [vslice: 20, hslice: 5]

    drainer0:
      type: datacopy
      grid_loc: [1, 3]
      grid_size: [1, 1]
      inputs: [feeder0]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 2
      math_fidelity: HiFi4
      untilize_output: true
      t: 200
      mblock: [3, 44]
      ublock: [1, 1]
      untilize_output: true

    drainer1:
      type: datacopy
      grid_loc: [1, 5]
      grid_size: [1, 1]
      inputs: [feeder0]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 2
      math_fidelity: HiFi4
      untilize_output: true
      t: 200
      mblock: [3, 44]
      ublock: [1, 1]
      untilize_output: true

programs:
  - program0:
    - var: [$c_microbatch_count, $c_zero]
    - staticvar: { $gptr_q0: 0, $lptr_q0: 0 }
    - varinst: [$c_microbatch_count, set, 1]
    - varinst: [$c_zero, set, 0]
    - loop: $c_microbatch_count #loop over number of microbatches that make a minibatch
    -   execute: {
          graph_name: test_op,
          queue_settings: {
               input0_dram: {
                prologue: false,
                epilogue: false,
                zero: false,
                rd_ptr_local: $lptr_q0,
                rd_ptr_global: $gptr_q0,
              }
          }
        }
    - endloop

test-config:
  test-args:
    microbatch_count: 1 # entries / input_count
    microbatch_size: 1 # input_count
    minibatch_count: 1 # host loop iterations