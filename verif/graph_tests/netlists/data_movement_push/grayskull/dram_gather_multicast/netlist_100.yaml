# test_config_id=5
devices:
  arch: grayskull

queues:
  input0_dram:
    type: queue
    input: HOST
    entries: 1
    grid_size: [1, 5]
    t: 1
    mblock: [20, 44]
    ublock: [1, 1]
    df: Float16
    ublock_order: r
    target_device: 0
    loc: dram
    dram: [[2, 0x10000000], [2, 0x101bee20], [2, 0x1037dc40], [2, 0x1053ca60], [2, 0x106fb880]]

  input1_dram:
    type: queue
    input: HOST
    entries: 1
    grid_size: [1, 12]
    t: 4
    mblock: [55, 1]
    ublock: [1, 3]
    df: Float16
    ublock_order: r
    target_device: 0
    loc: dram
    dram: [[1, 0x10000000], [1, 0x1014f2a0], [1, 0x1029e540], [1, 0x103ed7e0], [1, 0x1053ca80], [1, 0x1068bd20], [1, 0x107dafc0], [1, 0x1092a260], [1, 0x10a79500], [1, 0x10bc87a0], [1, 0x10d17a40], [1, 0x10e66ce0]]

  output_dram:
    type: queue
    input: target_op0
    entries: 1
    grid_size: [10, 2]
    t: 4
    mblock: [1, 18]
    ublock: [2, 1]
    df: Float16
    ublock_order: r
    target_device: 0
    loc: dram
    dram: [[0, 0x10000000], [0, 0x10049220], [0, 0x10092440], [0, 0x100db660], [0, 0x10124880], [0, 0x1016daa0], [0, 0x101b6cc0], [0, 0x101ffee0], [0, 0x10249100], [0, 0x10292320], [0, 0x102db540], [0, 0x10324760], [0, 0x1036d980], [0, 0x103b6ba0], [0, 0x103ffdc0], [0, 0x10448fe0], [0, 0x10492200], [0, 0x104db420], [0, 0x10524640], [0, 0x1056d860]]

graphs:
  test_op:
    target_device: 0
    input_count: 1
    target_op0:
      type: matmul
      grid_loc: [0, 2]
      grid_size: [10, 2]
      inputs: [input0_dram, input1_dram]
      in_df: [Float16, Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 2
      math_fidelity: HiFi4
      attributes: {m_k: 11, u_kt: 5}
      t: 4
      mblock: [1, 18]
      ublock: [2, 1]
      input_0_tms: [hslice: 4, vslice: 1]
      untilize_output: false

programs:
  - program0:
    - staticvar: [$lptr, $gptr]
    - var: [$c_microbatch_count, $c_zero, $c_wrap]
    - varinst: [$c_microbatch_count, set, 1]
    - varinst: [$c_zero, set, 0]
    - varinst: [$c_wrap, set, 2]
    - varinst: [$c_wrap, mul, $c_wrap, 1]  # c_wrap = 2*microbatch_size
    - varinst: [$c_wrap, mul, $c_wrap, 1] # c_wrap = 2*microbatch_size*microbatch_count
    - loop: $c_microbatch_count #loop over number of microbatches that make a minibatch
    -   execute: {
          graph_name: test_op,
          queue_settings: {
               input0_dram: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
               input1_dram: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}
          }
        }
    -   varinst: [$lptr, incwrap, 1, $c_wrap]
    -   varinst: [$gptr, incwrap, 1, $c_wrap]
    - endloop

test-config:
  test-args:
    microbatch_count: 1 # entries / input_count
    microbatch_size: 1 # input_count
    minibatch_count: 1 # host loop iterations