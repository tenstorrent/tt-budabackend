# test_config_id=9
devices:
  arch: grayskull

queues:
  input0_dram:
    type: queue
    input: HOST
    entries: 12
    grid_size: [1, 6]
    t: 1
    mblock: [2, 2]
    ublock: [1, 1]
    df: Float16
    ublock_order: r
    target_device: 0
    loc: dram
    dram: [[6, 0x10000000], [6, 0x10018620], [6, 0x10030c40], [6, 0x10049260], [6, 0x10061880], [6, 0x10079ea0]]

  input1_dram:
    type: queue
    input: HOST
    entries: 12
    grid_size: [6, 1]
    t: 1
    mblock: [1, 3]
    ublock: [2, 1]
    df: Float16
    ublock_order: r
    target_device: 0
    loc: dram
    dram: [[4, 0x10000000], [4, 0x10024920], [4, 0x10049240], [4, 0x1006db60], [4, 0x10092480], [4, 0x100b6da0]]

  output_dram:
    type: queue
    input: output
    entries: 12
    grid_size: [1, 3]
    t: 7
    mblock: [9, 1]
    ublock: [1, 3]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[5, 0x10000000], [5, 0x1047fba0], [5, 0x108ff740]]

graphs:
  test_multi_tm_datacopy_matmul:
    target_device: 0
    input_count: 6
    feeder0:
      type: datacopy
      grid_loc: [6, 0]
      grid_size: [1, 6]
      inputs: [input0_dram]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: c
      buf_size_mb: 6
      math_fidelity: HiFi4
      t: 1
      mblock: [2, 2]
      ublock: [1, 1]
      input_0_pad: {rt: 0, ct: 0, pad_value: 0.0}
    feeder1:
      type: datacopy
      grid_loc: [0, 9]
      grid_size: [6, 1]
      inputs: [input1_dram]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: c
      buf_size_mb: 2
      math_fidelity: HiFi4
      t: 1
      mblock: [1, 3]
      ublock: [2, 1]
      input_0_pad: {rt: 0, ct: 0, pad_value: 0.0}
    output:
      type: matmul
      grid_loc: [6, 6]
      grid_size: [1, 3]
      inputs: [feeder0, feeder1]
      in_df: [Float16, Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 1
      math_fidelity: HiFi4
      attributes: {m_k: 1, u_kt: 11}
      untilize_output: false
      t: 7
      mblock: [9, 1]
      ublock: [1, 3]

      input_0_unpad: {rt: 1, ct: 1}
      input_0_tms: [broadcast: {r: 2}, broadcast: {z: 7}]
      input_0_pad: {rt: 7, ct: 0, pad_value: 0.0}

      input_1_unpad: {rt: 1, ct: 2}
      input_1_tms: [broadcast: {z: 7}, broadcast: {c: 8}]
      input_1_pad: {rt: 0, ct: 1, pad_value: 0.0}

programs:
  - test_multi_tm_datacopy_matmul_program:
    - param: [$p_microbatch_count, $p_microbatch_size]
    - staticvar: [$lptr, $gptr]
    - var: {$c_zero: 0, $c_wrap: 2}                         # c_wrap = 2 - finally need to be equal to 2*entries == 2*microbatch_size*microbatch_count
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_size]  # c_wrap = 2*microbatch_size
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_count] # c_wrap = 2*microbatch_size*microbatch_count
    - loop: $p_microbatch_count #loop over number of microbatches that make a minibatch
    -   execute: {
          graph_name: test_multi_tm_datacopy_matmul,
          queue_settings: {
            input0_dram: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
            input1_dram: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}
          }
        }
    -   varinst: [$lptr, incwrap, $p_microbatch_size, $c_wrap]
    -   varinst: [$gptr, incwrap, $p_microbatch_size, $c_wrap]
    - endloop

test-config:
  test-args:
    microbatch_count: 2 # entries / input_count
    microbatch_size: 6 # input_count
    minibatch_count: 1 # host loop iterations# Generation Command: SEED=730 ARCH_NAME=grayskull verif/template_netlist/run_generate_ci_tests.sh test_modules.multi_tm_tests.test_datacopy_matmul_multiple_tms_and_reblock test_datacopy_matmul_pad_unpad_grayskull 9999 1