# test_config_id=57
devices:
  arch: grayskull

queues:
  input0_dram:
    type: queue
    input: HOST
    entries: 4
    grid_size: [2, 1]
    t: 9
    mblock: [8, 1]
    ublock: [1, 6]
    df: Float16
    ublock_order: r
    target_device: 0
    loc: dram
    dram: [[7, 0x10000000], [7, 0x1036d820]]

  input1_dram:
    type: queue
    input: HOST
    entries: 4
    grid_size: [2, 1]
    t: 9
    mblock: [6, 3]
    ublock: [1, 2]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[3, 0x10000000], [3, 0x10292220]]

  output_dram:
    type: queue
    input: output
    entries: 4
    grid_size: [3, 2]
    t: 3
    mblock: [2, 1]
    ublock: [1, 8]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[6, 0x10000000], [6, 0x10061820], [6, 0x100c3040], [6, 0x10124860], [6, 0x10186080], [6, 0x101e78a0]]

graphs:
  test_multi_tm_datacopy_matmul:
    target_device: 0
    input_count: 4
    feeder0:
      type: datacopy
      grid_loc: [7, 0]
      grid_size: [2, 1]
      inputs: [input0_dram]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 2
      math_fidelity: HiFi4
      t: 9
      mblock: [8, 1]
      ublock: [1, 6]
      input_0_pad: {rt: 0, ct: 0, pad_value: 0.0}
    feeder1:
      type: datacopy
      grid_loc: [7, 1]
      grid_size: [2, 1]
      inputs: [input1_dram]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 1
      math_fidelity: HiFi4
      t: 9
      mblock: [6, 3]
      ublock: [1, 2]
      input_0_pad: {rt: 0, ct: 0, pad_value: 0.0}
    output:
      type: matmul
      grid_loc: [4, 3]
      grid_size: [3, 2]
      inputs: [feeder0, feeder1]
      in_df: [Float16, Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 1
      math_fidelity: HiFi4
      attributes: {m_k: 3, u_kt: 3}
      untilize_output: false
      t: 3
      mblock: [2, 1]
      ublock: [1, 8]

      input_0_unpad: {rt: 1, ct: 5}
      input_0_tms: [vslice: 3, hstack: 9]
      input_0_pad: {rt: 1, ct: 0, pad_value: 0.0}

      input_1_unpad: {rt: 2, ct: 3}
      input_1_tms: [transpose, vstack: 3]
      input_1_pad: {rt: 0, ct: 6, pad_value: 0.0}

programs:
  - test_multi_tm_datacopy_matmul_program:
    - param: [$p_microbatch_count, $p_microbatch_size]
    - staticvar: [$lptr, $gptr]
    - var: {$c_zero: 0, $c_wrap: 2}                         # c_wrap = 2 - finally need to be equal to 2*entries == 2*microbatch_size*microbatch_count
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_size]  # c_wrap = 2*microbatch_size
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_count] # c_wrap = 2*microbatch_size*microbatch_count
    - loop: $p_microbatch_count #loop over number of microbatches that make a minibatch
    -   execute: {
          graph_name: test_multi_tm_datacopy_matmul,
          queue_settings: {
            input0_dram: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
            input1_dram: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}
          }
        }
    -   varinst: [$lptr, incwrap, $p_microbatch_size, $c_wrap]
    -   varinst: [$gptr, incwrap, $p_microbatch_size, $c_wrap]
    - endloop

test-config:
  test-args:
    microbatch_count: 1 # entries / input_count
    microbatch_size: 4 # input_count
    minibatch_count: 1 # host loop iterations