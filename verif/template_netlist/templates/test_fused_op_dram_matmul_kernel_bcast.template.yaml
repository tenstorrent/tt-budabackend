# test_config_id=$TEMPLATE_test_config_id
devices:
  arch: $TEMPLATE_arch_name

queues:
  input0_dram:
    type: queue
    input: HOST
    entries: $TEMPLATE_input0_dram_entries
    grid_size: [$TEMPLATE_input0_dram_grid_size_r, $TEMPLATE_input0_dram_grid_size_c]
    t: $TEMPLATE_input0_dram_t
    mblock: [$TEMPLATE_input0_dram_mb_r, $TEMPLATE_input0_dram_mb_c]
    ublock: [$TEMPLATE_input0_dram_ub_r, $TEMPLATE_input0_dram_ub_c]
    df: $TEMPLATE_input0_dram_df
    ublock_order: $TEMPLATE_input0_dram_ublock_order
    target_device: 0
    loc: $TEMPLATE_input0_dram_loc
    $TEMPLATE_input0_dram_loc: $TEMPLATE_input0_dram_buffers

  input1_dram:
    type: queue
    input: HOST
    entries: $TEMPLATE_input1_dram_entries
    grid_size: [$TEMPLATE_input1_dram_grid_size_r, $TEMPLATE_input1_dram_grid_size_c]
    t: $TEMPLATE_input1_dram_t
    mblock: [$TEMPLATE_input1_dram_mb_r, $TEMPLATE_input1_dram_mb_c]
    ublock: [$TEMPLATE_input1_dram_ub_r, $TEMPLATE_input1_dram_ub_c]
    df: $TEMPLATE_input1_dram_df
    ublock_order: $TEMPLATE_input1_dram_ublock_order
    target_device: 0
    loc: $TEMPLATE_input1_dram_loc
    $TEMPLATE_input1_dram_loc: $TEMPLATE_input1_dram_buffers

  input2_dram:
    type: queue
    input: HOST
    entries: $TEMPLATE_input2_dram_entries
    grid_size: [$TEMPLATE_input2_dram_grid_size_r, $TEMPLATE_input2_dram_grid_size_c]
    t: $TEMPLATE_input2_dram_t
    mblock: [$TEMPLATE_input2_dram_mb_r, $TEMPLATE_input2_dram_mb_c]
    ublock: [$TEMPLATE_input2_dram_ub_r, $TEMPLATE_input2_dram_ub_c]
    df: $TEMPLATE_input2_dram_df
    ublock_order: $TEMPLATE_input2_dram_ublock_order
    target_device: 0
    loc: $TEMPLATE_input2_dram_loc
    $TEMPLATE_input2_dram_loc: $TEMPLATE_input2_dram_buffers

  output_dram:
    type: queue
    input: op0
    entries: $TEMPLATE_output_dram_entries
    grid_size: [$TEMPLATE_output_dram_grid_size_r, $TEMPLATE_output_dram_grid_size_c]
    t: $TEMPLATE_output_dram_t
    mblock: [$TEMPLATE_output_dram_mb_r, $TEMPLATE_output_dram_mb_c]
    ublock: [$TEMPLATE_output_dram_ub_r, $TEMPLATE_output_dram_ub_c]
    df: $TEMPLATE_output_dram_df
    ublock_order: $TEMPLATE_output_dram_ublock_order
    target_device: 0
    loc: $TEMPLATE_output_dram_loc
    $TEMPLATE_output_dram_loc: $TEMPLATE_output_dram_buffers

graphs:
  test_fused_op:
    target_device: 0
    input_count: $TEMPLATE_microbatch_size

    op0:
      type: fused_op
      attributes: {
        fused_op_id: 0, # $TEMPLATE_kernel_bcast_attribute_partial
      }
      grid_loc: [$TEMPLATE_op0_loc_r, $TEMPLATE_op0_loc_c]
      grid_size: [$TEMPLATE_op0_grid_size_r, $TEMPLATE_op0_grid_size_c]
      inputs: [
        input0_dram,
        input1_dram,
        input2_dram
      ]
      in_df: [
        $TEMPLATE_op0_in0_df,
        $TEMPLATE_op0_in1_df,
        $TEMPLATE_op0_in2_df
      ]
      acc_df: $TEMPLATE_op0_acc_df
      out_df: $TEMPLATE_op0_out_df
      intermed_df: $TEMPLATE_op0_intermed_df
      ublock_order: $TEMPLATE_op0_ublock_order
      buf_size_mb: $TEMPLATE_op0_buf_size_mb
      math_fidelity: $TEMPLATE_math_fidelity
      untilize_output: $TEMPLATE_op0_untilize_output
      t: $TEMPLATE_op0_t
      mblock: [$TEMPLATE_op0_mb_r, $TEMPLATE_op0_mb_c]
      ublock: [$TEMPLATE_op0_ub_r, $TEMPLATE_op0_ub_c]
      input_0_tms: $TEMPLATE_input0_tms
      input_1_tms: $TEMPLATE_input1_tms
      input_2_tms: $TEMPLATE_input2_tms

programs:
  - test_fused_op_program:
    - param: [$p_microbatch_count, $p_microbatch_size]
    - staticvar: [$lptr, $gptr]
    - var: {$c_zero: 0, $c_wrap: 2}                         # c_wrap = 2 - finally need to be equal to 2*entries == 2*microbatch_size*microbatch_count
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_size]  # c_wrap = 2*microbatch_size
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_count] # c_wrap = 2*microbatch_size*microbatch_count
    - loop: $p_microbatch_count #loop over number of microbatches that make a minibatch
    -   execute: {
          graph_name: test_fused_op,
          queue_settings: {
               input0_dram: {prologue: $TEMPLATE_input0_dram_prologue, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
               input1_dram: {prologue: $TEMPLATE_input1_dram_prologue, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
               input2_dram: {prologue: $TEMPLATE_input2_dram_prologue, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}
          }
        }
    -   varinst: [$lptr, incwrap, $p_microbatch_size, $c_wrap]
    -   varinst: [$gptr, incwrap, $p_microbatch_size, $c_wrap]
    - endloop

fused_ops:
  0:
    inputs: 3
    intermediates: 2
    schedules:
      -
        # op -> matmul -> intermed
        - subop0: {type: matmul, inputs: [input0, input1], mblock: [$TEMPLATE_subop0_mb_r, $TEMPLATE_subop0_mb_c], ublock: [$TEMPLATE_subop0_ub_r, $TEMPLATE_subop0_ub_c], attributes: {m_k: $TEMPLATE_subop0_m_k, u_kt: $TEMPLATE_subop0_u_kt}, output: intermed0}
      -
        # dram + intermed -> intermed
        - subop1: {type: nop, inputs: [input2], mblock: [$TEMPLATE_subop1_mb_r, $TEMPLATE_subop1_mb_c], ublock: [$TEMPLATE_subop1_ub_r, $TEMPLATE_subop1_ub_c], output: intermed1}
      -
        # Accumulate all results as final output of the fused op.
        - subop_res_0: {type: add, inputs: [intermed0, intermed1], pop: [intermed0, intermed1], mblock: [$TEMPLATE_subop_res_0_mb_r, $TEMPLATE_subop_res_0_mb_c], ublock: [$TEMPLATE_subop_res_0_ub_r, $TEMPLATE_subop_res_0_ub_c], output: output}


test-config:
  test-args:
    microbatch_count: $TEMPLATE_microbatch_count # entries / input_count
    microbatch_size: $TEMPLATE_microbatch_size # input_count
    minibatch_count: $TEMPLATE_minibatch_count # host loop iterations
  test-generation-debug:
    kernel_broadcast_index: $TEMPLATE_kernel_bcast_idx # kernel broadcast index for this netlist