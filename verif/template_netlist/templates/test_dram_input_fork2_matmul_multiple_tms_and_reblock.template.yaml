# test_config_id=$TEMPLATE_test_config_id
devices:
  arch: $TEMPLATE_arch_name

queues:
  input0_dram:
    type: queue
    input: HOST
    entries: $TEMPLATE_input0_dram_entries
    grid_size: [$TEMPLATE_input0_dram_grid_size_r, $TEMPLATE_input0_dram_grid_size_c]
    t: $TEMPLATE_input0_dram_t
    mblock: [$TEMPLATE_input0_dram_mb_r, $TEMPLATE_input0_dram_mb_c]
    ublock: [$TEMPLATE_input0_dram_ub_r, $TEMPLATE_input0_dram_ub_c]
    df: $TEMPLATE_input0_dram_df
    ublock_order: $TEMPLATE_input0_dram_ublock_order
    target_device: 0
    loc: $TEMPLATE_input0_dram_loc
    $TEMPLATE_input0_dram_loc: $TEMPLATE_input0_dram_buffers

  input1_dram:
    type: queue
    input: HOST
    entries: $TEMPLATE_input1_dram_entries
    grid_size: [$TEMPLATE_input1_dram_grid_size_r, $TEMPLATE_input1_dram_grid_size_c]
    t: $TEMPLATE_input1_dram_t
    mblock: [$TEMPLATE_input1_dram_mb_r, $TEMPLATE_input1_dram_mb_c]
    ublock: [$TEMPLATE_input1_dram_ub_r, $TEMPLATE_input1_dram_ub_c]
    df: $TEMPLATE_input1_dram_df
    ublock_order: $TEMPLATE_input1_dram_ublock_order
    target_device: 0
    loc: $TEMPLATE_input1_dram_loc
    $TEMPLATE_input1_dram_loc: $TEMPLATE_input1_dram_buffers

  output0_dram:
    type: queue
    input: op0
    entries: $TEMPLATE_output0_dram_entries
    grid_size: [$TEMPLATE_output0_dram_grid_size_r, $TEMPLATE_output0_dram_grid_size_c]
    t: $TEMPLATE_output0_dram_t
    mblock: [$TEMPLATE_output0_dram_mb_r, $TEMPLATE_output0_dram_mb_c]
    ublock: [$TEMPLATE_output0_dram_ub_r, $TEMPLATE_output0_dram_ub_c]
    df: $TEMPLATE_output0_dram_df
    ublock_order: $TEMPLATE_output0_dram_ublock_order
    target_device: 0
    loc: $TEMPLATE_output0_dram_loc
    $TEMPLATE_output0_dram_loc: $TEMPLATE_output0_dram_buffers

  output1_dram:
    type: queue
    input: op1
    entries: $TEMPLATE_output1_dram_entries
    grid_size: [$TEMPLATE_output1_dram_grid_size_r, $TEMPLATE_output1_dram_grid_size_c]
    t: $TEMPLATE_output1_dram_t
    mblock: [$TEMPLATE_output1_dram_mb_r, $TEMPLATE_output1_dram_mb_c]
    ublock: [$TEMPLATE_output1_dram_ub_r, $TEMPLATE_output1_dram_ub_c]
    df: $TEMPLATE_output1_dram_df
    ublock_order: $TEMPLATE_output1_dram_ublock_order
    target_device: 0
    loc: $TEMPLATE_output1_dram_loc
    $TEMPLATE_output1_dram_loc: $TEMPLATE_output1_dram_buffers

graphs:
  test_multi_tm_dram_matmul:
    target_device: 0
    input_count: $TEMPLATE_microbatch_size
    op0:
      type: matmul
      grid_loc: [$TEMPLATE_op0_grid_loc_r, $TEMPLATE_op0_grid_loc_c]
      grid_size: [$TEMPLATE_op0_grid_size_r, $TEMPLATE_op0_grid_size_c]
      inputs: [input0_dram, input1_dram]
      in_df: [$TEMPLATE_input0_dram_df, $TEMPLATE_input1_dram_df]
      acc_df: $TEMPLATE_op0_dest_acc_df
      out_df: $TEMPLATE_op0_out_df
      intermed_df: $TEMPLATE_op0_intermed_df
      ublock_order: $TEMPLATE_op0_ublock_order
      buf_size_mb: $TEMPLATE_op0_buf_size_mb
      math_fidelity: $TEMPLATE_math_fidelity
      attributes: {m_k: $TEMPLATE_op0_mm_m_k, u_kt: $TEMPLATE_op0_mm_u_kt}
      untilize_output: $TEMPLATE_op0_untilize_output
      t: $TEMPLATE_op0_t
      mblock: [$TEMPLATE_op0_mb_r, $TEMPLATE_op0_mb_c]
      ublock: [$TEMPLATE_op0_ub_r, $TEMPLATE_op0_ub_c]
      input_0_tms: $TEMPLATE_op0_input0_tms
      input_1_tms: $TEMPLATE_op0_input1_tms

    op1:
      type: matmul
      grid_loc: [$TEMPLATE_op1_grid_loc_r, $TEMPLATE_op1_grid_loc_c]
      grid_size: [$TEMPLATE_op1_grid_size_r, $TEMPLATE_op1_grid_size_c]
      inputs: [input0_dram, input1_dram]
      in_df: [$TEMPLATE_input0_dram_df, $TEMPLATE_input1_dram_df]
      acc_df: $TEMPLATE_op1_dest_acc_df
      out_df: $TEMPLATE_op1_out_df
      intermed_df: $TEMPLATE_op1_intermed_df
      ublock_order: $TEMPLATE_op1_ublock_order
      buf_size_mb: $TEMPLATE_op1_buf_size_mb
      math_fidelity: $TEMPLATE_math_fidelity
      attributes: {m_k: $TEMPLATE_op_1_mm_m_k, u_kt: $TEMPLATE_op1_mm_u_kt}
      untilize_output: $TEMPLATE_op1_untilize_output
      t: $TEMPLATE_op1_t
      mblock: [$TEMPLATE_op1_mb_r, $TEMPLATE_op1_mb_c]
      ublock: [$TEMPLATE_op1_ub_r, $TEMPLATE_op1_ub_c]
      input_0_tms: $TEMPLATE_op1_input0_tms
      input_1_tms: $TEMPLATE_op1_input1_tms

programs:
  - test_multi_tm_dram_matmul_program:
    - param: [$p_microbatch_count, $p_microbatch_size]
    - staticvar: [$lptr, $gptr]
    - var: {$c_zero: 0, $c_wrap: 2}                         # c_wrap = 2 - finally need to be equal to 2*entries == 2*microbatch_size*microbatch_count
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_size]  # c_wrap = 2*microbatch_size
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_count] # c_wrap = 2*microbatch_size*microbatch_count
    - loop: $p_microbatch_count #loop over number of microbatches that make a minibatch
    -   execute: {
          graph_name: test_multi_tm_dram_matmul,
          queue_settings: {
               input0_dram: {prologue: $TEMPLATE_input0_dram_prologue, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
               input1_dram: {prologue: $TEMPLATE_input1_dram_prologue, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}
          }
        }
    -   varinst: [$lptr, incwrap, $p_microbatch_size, $c_wrap]
    -   varinst: [$gptr, incwrap, $p_microbatch_size, $c_wrap]
    - endloop

test-config:
  test-args:
    microbatch_count: $TEMPLATE_microbatch_count # entries / input_count
    microbatch_size: $TEMPLATE_microbatch_size # input_count
    minibatch_count: $TEMPLATE_minibatch_count # host loop iterations
