devices:
  arch: grayskull

queues:
  dram_input0:
    type: queue
    input: HOST
    entries: 12
    grid_size: [1, 10]
    t: 1
    mblock: [1, 1]
    ublock: [1, 2]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[5, 0x10000080], [5, 0x1000c3a0], [5, 0x100186c0], [5, 0x100249e0], [5, 0x10030d00], [5, 0x1003d020], [5, 0x10049340], [5, 0x10055660], [5, 0x10061980], [5, 0x1006dca0]]

  dram_input1:
    type: queue
    input: HOST
    entries: 12
    grid_size: [5, 1]
    t: 4
    mblock: [2, 5]
    ublock: [1, 6]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[6, 0x100000e0], [6, 0x105b6900], [6, 0x10b6d120], [6, 0x11123940], [6, 0x116da160]]

  dram_output:
    type: queue
    input: op0
    entries: 12
    grid_size: [2, 12]
    t: 2
    mblock: [1, 1]
    ublock: [1, 5]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[3, 0x100000a0], [3, 0x1003cfc0], [3, 0x10079ee0], [3, 0x100b6e00], [3, 0x100f3d20], [3, 0x10130c40], [3, 0x1016db60], [3, 0x101aaa80], [3, 0x101e79a0], [3, 0x102248c0], [3, 0x102617e0], [3, 0x1029e700], [3, 0x102db620], [3, 0x10318540], [3, 0x10355460], [3, 0x10392380], [3, 0x103cf2a0], [3, 0x1040c1c0], [3, 0x104490e0], [3, 0x10486000], [3, 0x104c2f20], [3, 0x104ffe40], [3, 0x1053cd60], [3, 0x10579c80]]

graphs:
  test_multi_tm_datacopy_matmul:
    target_device: 0
    input_count: 12
    feeder0:
      type: datacopy
      grid_loc: [7, 1]
      grid_size: [1, 10]
      inputs: [dram_input0]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 2
      math_fidelity: HiFi4
      untilize_output: false
      t: 1
      mblock: [1, 1]
      ublock: [1, 2]
    feeder1:
      type: datacopy
      grid_loc: [2, 1]
      grid_size: [5, 1]
      inputs: [dram_input1]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 2
      math_fidelity: HiFi4
      untilize_output: false
      t: 4
      mblock: [2, 5]
      ublock: [1, 6]
    op0:
      type: matmul
      grid_loc: [0, 0]
      grid_size: [2, 12]
      inputs: [feeder0, feeder1]
      in_df: [Float16, Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 2
      math_fidelity: HiFi4
      attributes: {m_k: 10, u_kt: 1}
      untilize_output: false
      t: 2
      mblock: [1, 1]
      ublock: [1, 5]
      input_0_tms: [hslice: 2, broadcast: {r: 2}]
      input_1_tms: [hstack: 2, vstack: 1]

programs:
  - test_multi_tm_datacopy_matmul_program:
    - param: [$p_microbatch_count, $p_microbatch_size]
    - staticvar: [$lptr, $gptr]
    - var: {$c_zero: 0, $c_wrap: 2}                         # c_wrap = 2 - finally need to be equal to 2*entries == 2*microbatch_size*microbatch_count
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_size]  # c_wrap = 2*microbatch_size
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_count] # c_wrap = 2*microbatch_size*microbatch_count
    - loop: $p_microbatch_count #loop over number of microbatches that make a minibatch
    -   execute: {
          graph_name: test_multi_tm_datacopy_matmul,
          queue_settings: {
            dram_input0: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
            dram_input1: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}
          }
        }
    -   varinst: [$lptr, incwrap, $p_microbatch_size, $c_wrap]
    -   varinst: [$gptr, incwrap, $p_microbatch_size, $c_wrap]
    - endloop

test-config:
  test-args:
    microbatch_count: 1 # entries / input_count
    microbatch_size: 12 # input_count
    minibatch_count: 1 # host loop iterations