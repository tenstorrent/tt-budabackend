devices:
  arch: grayskull

queues:
  dram_input0:
    type: queue
    input: HOST
    entries: 4
    grid_size: [1, 4]
    t: 24
    mblock: [1, 1]
    ublock: [1, 1]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[1, 0x10000060], [1, 0x10030c80], [1, 0x100618a0], [1, 0x100924c0]]

  dram_input1:
    type: queue
    input: HOST
    entries: 4
    grid_size: [5, 1]
    t: 8
    mblock: [2, 1]
    ublock: [2, 1]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[3, 0x10000040], [3, 0x10041060], [3, 0x10082080], [3, 0x100c30a0], [3, 0x101040c0]]

  dram_output:
    type: queue
    input: op0
    entries: 4
    grid_size: [6, 10]
    t: 8
    mblock: [4, 2]
    ublock: [1, 1]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[4, 0x10000020], [4, 0x10082040], [4, 0x10104060], [4, 0x10186080], [4, 0x102080a0], [4, 0x1028a0c0], [4, 0x1030c0e0], [4, 0x1038e100], [4, 0x10410120], [4, 0x10492140], [4, 0x10514160], [4, 0x10596180], [4, 0x106181a0], [4, 0x1069a1c0], [4, 0x1071c1e0], [4, 0x1079e200], [4, 0x10820220], [4, 0x108a2240], [4, 0x10924260], [4, 0x109a6280], [4, 0x10a282a0], [4, 0x10aaa2c0], [4, 0x10b2c2e0], [4, 0x10bae300], [4, 0x10c30320], [4, 0x10cb2340], [4, 0x10d34360], [4, 0x10db6380], [4, 0x10e383a0], [4, 0x10eba3c0], [4, 0x10f3c3e0], [4, 0x10fbe400], [4, 0x11040420], [4, 0x110c2440], [4, 0x11144460], [4, 0x111c6480], [4, 0x112484a0], [4, 0x112ca4c0], [4, 0x1134c4e0], [4, 0x113ce500], [4, 0x11450520], [4, 0x114d2540], [4, 0x11554560], [4, 0x115d6580], [4, 0x116585a0], [4, 0x116da5c0], [4, 0x1175c5e0], [4, 0x117de600], [4, 0x11860620], [4, 0x118e2640], [4, 0x11964660], [4, 0x119e6680], [4, 0x11a686a0], [4, 0x11aea6c0], [4, 0x11b6c6e0], [4, 0x11bee700], [4, 0x11c70720], [4, 0x11cf2740], [4, 0x11d74760], [4, 0x11df6780]]

graphs:
  test_multi_tm_datacopy_matmul:
    target_device: 0
    input_count: 2
    feeder0:
      type: datacopy
      grid_loc: [8, 1]
      grid_size: [1, 4]
      inputs: [dram_input0]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: c
      buf_size_mb: 2
      math_fidelity: HiFi4
      untilize_output: false
      t: 24
      mblock: [1, 1]
      ublock: [1, 1]
    feeder1:
      type: datacopy
      grid_loc: [0, 1]
      grid_size: [5, 1]
      inputs: [dram_input1]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: c
      buf_size_mb: 1
      math_fidelity: HiFi4
      untilize_output: false
      t: 8
      mblock: [2, 1]
      ublock: [2, 1]
    op0:
      type: matmul
      grid_loc: [0, 2]
      grid_size: [6, 10]
      inputs: [feeder0, feeder1]
      in_df: [Float16, Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 1
      math_fidelity: HiFi4
      attributes: {m_k: 1, u_kt: 4}
      untilize_output: false
      t: 8
      mblock: [4, 2]
      ublock: [1, 1]
      input_0_tms: [broadcast: {r: 8}, vstack: 3]
      input_1_tms: [broadcast: {c: 4}, transpose]

programs:
  - test_multi_tm_datacopy_matmul_program:
    - param: [$p_microbatch_count, $p_microbatch_size]
    - staticvar: [$lptr, $gptr]
    - var: {$c_zero: 0, $c_wrap: 2}                         # c_wrap = 2 - finally need to be equal to 2*entries == 2*microbatch_size*microbatch_count
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_size]  # c_wrap = 2*microbatch_size
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_count] # c_wrap = 2*microbatch_size*microbatch_count
    - loop: $p_microbatch_count #loop over number of microbatches that make a minibatch
    -   execute: {
          graph_name: test_multi_tm_datacopy_matmul,
          queue_settings: {
            dram_input0: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
            dram_input1: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}
          }
        }
    -   varinst: [$lptr, incwrap, $p_microbatch_size, $c_wrap]
    -   varinst: [$gptr, incwrap, $p_microbatch_size, $c_wrap]
    - endloop

test-config:
  test-args:
    microbatch_count: 2 # entries / input_count
    microbatch_size: 2 # input_count
    minibatch_count: 1 # host loop iterations