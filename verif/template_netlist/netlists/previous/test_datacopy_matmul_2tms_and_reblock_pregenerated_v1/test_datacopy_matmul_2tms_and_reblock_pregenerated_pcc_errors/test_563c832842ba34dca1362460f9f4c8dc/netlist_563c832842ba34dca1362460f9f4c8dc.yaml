devices:
  arch: grayskull

queues:
  dram_input0:
    type: queue
    input: HOST
    entries: 4
    grid_size: [2, 1]
    t: 2
    mblock: [4, 1]
    ublock: [2, 1]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[2, 0x10000000], [2, 0x10020820]]

  dram_input1:
    type: queue
    input: HOST
    entries: 4
    grid_size: [1, 3]
    t: 1
    mblock: [1, 28]
    ublock: [3, 2]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[6, 0x10000000], [6, 0x10155420], [6, 0x102aa840]]

  dram_output:
    type: queue
    input: op0
    entries: 4
    grid_size: [8, 4]
    t: 1
    mblock: [4, 21]
    ublock: [1, 1]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[0, 0x10000000], [0, 0x100aaa20], [0, 0x10155440], [0, 0x101ffe60], [0, 0x102aa880], [0, 0x103552a0], [0, 0x103ffcc0], [0, 0x104aa6e0], [0, 0x10555100], [0, 0x105ffb20], [0, 0x106aa540], [0, 0x10754f60], [0, 0x107ff980], [0, 0x108aa3a0], [0, 0x10954dc0], [0, 0x109ff7e0], [0, 0x10aaa200], [0, 0x10b54c20], [0, 0x10bff640], [0, 0x10caa060], [0, 0x10d54a80], [0, 0x10dff4a0], [0, 0x10ea9ec0], [0, 0x10f548e0], [0, 0x10fff300], [0, 0x110a9d20], [0, 0x11154740], [0, 0x111ff160], [0, 0x112a9b80], [0, 0x113545a0], [0, 0x113fefc0], [0, 0x114a99e0]]

graphs:
  test_multi_tm_datacopy_matmul:
    target_device: 0
    input_count: 4
    feeder0:
      type: datacopy
      grid_loc: [7, 11]
      grid_size: [2, 1]
      inputs: [dram_input0]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 2
      math_fidelity: HiFi4
      untilize_output: false
      t: 2
      mblock: [4, 1]
      ublock: [2, 1]
    feeder1:
      type: datacopy
      grid_loc: [9, 9]
      grid_size: [1, 3]
      inputs: [dram_input1]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: c
      buf_size_mb: 1
      math_fidelity: HiFi4
      untilize_output: false
      t: 1
      mblock: [1, 28]
      ublock: [3, 2]
    op0:
      type: matmul
      grid_loc: [2, 5]
      grid_size: [8, 4]
      inputs: [feeder0, feeder1]
      in_df: [Float16, Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 2
      math_fidelity: HiFi4
      attributes: {m_k: 6, u_kt: 1}
      untilize_output: false
      t: 1
      mblock: [4, 21]
      ublock: [1, 1]
      input_0_tms: [broadcast: {c: 6}, vstack: 2]
      input_1_tms: [hslice: 2, vstack: 2]

programs:
  - test_multi_tm_datacopy_matmul_program:
    - param: [$p_microbatch_count, $p_microbatch_size]
    - staticvar: [$lptr, $gptr]
    - var: {$c_zero: 0, $c_wrap: 2}                         # c_wrap = 2 - finally need to be equal to 2*entries == 2*microbatch_size*microbatch_count
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_size]  # c_wrap = 2*microbatch_size
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_count] # c_wrap = 2*microbatch_size*microbatch_count
    - loop: $p_microbatch_count #loop over number of microbatches that make a minibatch
    -   execute: {
          graph_name: test_multi_tm_datacopy_matmul,
          queue_settings: {
            dram_input0: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
            dram_input1: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}
          }
        }
    -   varinst: [$lptr, incwrap, $p_microbatch_size, $c_wrap]
    -   varinst: [$gptr, incwrap, $p_microbatch_size, $c_wrap]
    - endloop

test-config:
  test-args:
    microbatch_count: 1 # entries / input_count
    microbatch_size: 4 # input_count
    minibatch_count: 1 # host loop iterations