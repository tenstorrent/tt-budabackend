devices:
  arch: grayskull

queues:
  dram_input0:
    type: queue
    input: HOST
    entries: 1
    grid_size: [1, 3]
    t: 20
    mblock: [1, 1]
    ublock: [8, 1]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[7, 0x10000040], [7, 0x10051460], [7, 0x100a2880]]

  dram_input1:
    type: queue
    input: HOST
    entries: 1
    grid_size: [4, 1]
    t: 4
    mblock: [5, 1]
    ublock: [2, 1]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[2, 0x10000060], [2, 0x10014580], [2, 0x10028aa0], [2, 0x1003cfc0]]

  dram_output:
    type: queue
    input: op0
    entries: 1
    grid_size: [10, 4]
    t: 4
    mblock: [2, 10]
    ublock: [2, 1]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[1, 0x10000080], [1, 0x100514a0], [1, 0x100a28c0], [1, 0x100f3ce0], [1, 0x10145100], [1, 0x10196520], [1, 0x101e7940], [1, 0x10238d60], [1, 0x1028a180], [1, 0x102db5a0], [1, 0x1032c9c0], [1, 0x1037dde0], [1, 0x103cf200], [1, 0x10420620], [1, 0x10471a40], [1, 0x104c2e60], [1, 0x10514280], [1, 0x105656a0], [1, 0x105b6ac0], [1, 0x10607ee0], [1, 0x10659300], [1, 0x106aa720], [1, 0x106fbb40], [1, 0x1074cf60], [1, 0x1079e380], [1, 0x107ef7a0], [1, 0x10840bc0], [1, 0x10891fe0], [1, 0x108e3400], [1, 0x10934820], [1, 0x10985c40], [1, 0x109d7060], [1, 0x10a28480], [1, 0x10a798a0], [1, 0x10acacc0], [1, 0x10b1c0e0], [1, 0x10b6d500], [1, 0x10bbe920], [1, 0x10c0fd40], [1, 0x10c61160]]

graphs:
  test_multi_tm_datacopy_matmul:
    target_device: 0
    input_count: 1
    feeder0:
      type: datacopy
      grid_loc: [5, 6]
      grid_size: [1, 3]
      inputs: [dram_input0]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: c
      buf_size_mb: 1
      math_fidelity: HiFi4
      untilize_output: false
      t: 20
      mblock: [1, 1]
      ublock: [8, 1]
    feeder1:
      type: datacopy
      grid_loc: [5, 9]
      grid_size: [4, 1]
      inputs: [dram_input1]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 1
      math_fidelity: HiFi4
      untilize_output: false
      t: 4
      mblock: [5, 1]
      ublock: [2, 1]
    op0:
      type: matmul
      grid_loc: [0, 2]
      grid_size: [10, 4]
      inputs: [feeder0, feeder1]
      in_df: [Float16, Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 2
      math_fidelity: HiFi4
      attributes: {m_k: 3, u_kt: 1}
      untilize_output: false
      t: 4
      mblock: [2, 10]
      ublock: [2, 1]
      input_0_tms: [vslice: 2, vstack: 10]
      input_1_tms: [broadcast: {c: 3}, transpose]

programs:
  - test_multi_tm_datacopy_matmul_program:
    - param: [$p_microbatch_count, $p_microbatch_size]
    - staticvar: [$lptr, $gptr]
    - var: {$c_zero: 0, $c_wrap: 2}                         # c_wrap = 2 - finally need to be equal to 2*entries == 2*microbatch_size*microbatch_count
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_size]  # c_wrap = 2*microbatch_size
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_count] # c_wrap = 2*microbatch_size*microbatch_count
    - loop: $p_microbatch_count #loop over number of microbatches that make a minibatch
    -   execute: {
          graph_name: test_multi_tm_datacopy_matmul,
          queue_settings: {
            dram_input0: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
            dram_input1: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}
          }
        }
    -   varinst: [$lptr, incwrap, $p_microbatch_size, $c_wrap]
    -   varinst: [$gptr, incwrap, $p_microbatch_size, $c_wrap]
    - endloop

test-config:
  test-args:
    microbatch_count: 1 # entries / input_count
    microbatch_size: 1 # input_count
    minibatch_count: 1 # host loop iterations