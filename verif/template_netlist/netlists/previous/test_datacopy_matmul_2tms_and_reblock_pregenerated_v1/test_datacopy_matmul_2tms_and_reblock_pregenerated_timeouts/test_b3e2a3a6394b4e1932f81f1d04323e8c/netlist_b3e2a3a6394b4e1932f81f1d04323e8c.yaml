devices:
  arch: grayskull

queues:
  dram_input0:
    type: queue
    input: HOST
    entries: 2
    grid_size: [1, 1]
    t: 44
    mblock: [1, 1]
    ublock: [1, 1]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[6, 0x100000c0]]

  dram_input1:
    type: queue
    input: HOST
    entries: 2
    grid_size: [2, 12]
    t: 4
    mblock: [11, 7]
    ublock: [1, 1]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[1, 0x10000080], [1, 0x10138da0], [1, 0x10271ac0], [1, 0x103aa7e0], [1, 0x104e3500], [1, 0x1061c220], [1, 0x10754f40], [1, 0x1088dc60], [1, 0x109c6980], [1, 0x10aff6a0], [1, 0x10c383c0], [1, 0x10d710e0], [1, 0x10ea9e00], [1, 0x10fe2b20], [1, 0x1111b840], [1, 0x11254560], [1, 0x1138d280], [1, 0x114c5fa0], [1, 0x115fecc0], [1, 0x117379e0], [1, 0x11870700], [1, 0x119a9420], [1, 0x11ae2140], [1, 0x11c1ae60]]

  dram_output:
    type: queue
    input: op0
    entries: 2
    grid_size: [3, 4]
    t: 1
    mblock: [2, 6]
    ublock: [1, 7]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[3, 0x100000a0], [3, 0x100555c0], [3, 0x100aaae0], [3, 0x10100000], [3, 0x10155520], [3, 0x101aaa40], [3, 0x101fff60], [3, 0x10255480], [3, 0x102aa9a0], [3, 0x102ffec0], [3, 0x103553e0], [3, 0x103aa900]]

graphs:
  test_multi_tm_datacopy_matmul:
    target_device: 0
    input_count: 2
    feeder0:
      type: datacopy
      grid_loc: [9, 2]
      grid_size: [1, 1]
      inputs: [dram_input0]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: c
      buf_size_mb: 1
      math_fidelity: HiFi4
      untilize_output: false
      t: 44
      mblock: [1, 1]
      ublock: [1, 1]
    feeder1:
      type: datacopy
      grid_loc: [0, 0]
      grid_size: [2, 12]
      inputs: [dram_input1]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: c
      buf_size_mb: 2
      math_fidelity: HiFi4
      untilize_output: false
      t: 4
      mblock: [11, 7]
      ublock: [1, 1]
    op0:
      type: matmul
      grid_loc: [4, 0]
      grid_size: [3, 4]
      inputs: [feeder0, feeder1]
      in_df: [Float16, Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 1
      math_fidelity: HiFi4
      attributes: {m_k: 44, u_kt: 1}
      untilize_output: false
      t: 1
      mblock: [2, 6]
      ublock: [1, 7]
      input_0_tms: [broadcast: {r: 6}, hstack: 44]
      input_1_tms: [hstack: 2, vstack: 2]

programs:
  - test_multi_tm_datacopy_matmul_program:
    - param: [$p_microbatch_count, $p_microbatch_size]
    - staticvar: [$lptr, $gptr]
    - var: {$c_zero: 0, $c_wrap: 2}                         # c_wrap = 2 - finally need to be equal to 2*entries == 2*microbatch_size*microbatch_count
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_size]  # c_wrap = 2*microbatch_size
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_count] # c_wrap = 2*microbatch_size*microbatch_count
    - loop: $p_microbatch_count #loop over number of microbatches that make a minibatch
    -   execute: {
          graph_name: test_multi_tm_datacopy_matmul,
          queue_settings: {
            dram_input0: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
            dram_input1: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}
          }
        }
    -   varinst: [$lptr, incwrap, $p_microbatch_size, $c_wrap]
    -   varinst: [$gptr, incwrap, $p_microbatch_size, $c_wrap]
    - endloop

test-config:
  test-args:
    microbatch_count: 1 # entries / input_count
    microbatch_size: 2 # input_count
    minibatch_count: 1 # host loop iterations