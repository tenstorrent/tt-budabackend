devices:
  arch: grayskull

queues:
  dram_input0:
    type: queue
    input: HOST
    entries: 2
    grid_size: [2, 9]
    t: 4
    mblock: [18, 1]
    ublock: [1, 3]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[1, 0x10000040], [1, 0x100db660], [1, 0x101b6c80], [1, 0x102922a0], [1, 0x1036d8c0], [1, 0x10448ee0], [1, 0x10524500], [1, 0x105ffb20], [1, 0x106db140], [1, 0x107b6760], [1, 0x10891d80], [1, 0x1096d3a0], [1, 0x10a489c0], [1, 0x10b23fe0], [1, 0x10bff600], [1, 0x10cdac20], [1, 0x10db6240], [1, 0x10e91860]]

  dram_input1:
    type: queue
    input: HOST
    entries: 2
    grid_size: [3, 1]
    t: 28
    mblock: [1, 54]
    ublock: [1, 1]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[4, 0x10000060], [4, 0x105ffa80], [4, 0x10bff4a0]]

  dram_output:
    type: queue
    input: op0
    entries: 2
    grid_size: [6, 7]
    t: 4
    mblock: [3, 3]
    ublock: [1, 1]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[7, 0x10000020], [7, 0x10024940], [7, 0x10049260], [7, 0x1006db80], [7, 0x100924a0], [7, 0x100b6dc0], [7, 0x100db6e0], [7, 0x10100000], [7, 0x10124920], [7, 0x10149240], [7, 0x1016db60], [7, 0x10192480], [7, 0x101b6da0], [7, 0x101db6c0], [7, 0x101fffe0], [7, 0x10224900], [7, 0x10249220], [7, 0x1026db40], [7, 0x10292460], [7, 0x102b6d80], [7, 0x102db6a0], [7, 0x102fffc0], [7, 0x103248e0], [7, 0x10349200], [7, 0x1036db20], [7, 0x10392440], [7, 0x103b6d60], [7, 0x103db680], [7, 0x103fffa0], [7, 0x104248c0], [7, 0x104491e0], [7, 0x1046db00], [7, 0x10492420], [7, 0x104b6d40], [7, 0x104db660], [7, 0x104fff80], [7, 0x105248a0], [7, 0x105491c0], [7, 0x1056dae0], [7, 0x10592400], [7, 0x105b6d20], [7, 0x105db640]]

graphs:
  test_multi_tm_datacopy_matmul:
    target_device: 0
    input_count: 2
    feeder0:
      type: datacopy
      grid_loc: [1, 3]
      grid_size: [2, 9]
      inputs: [dram_input0]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 4
      math_fidelity: HiFi4
      untilize_output: false
      t: 4
      mblock: [18, 1]
      ublock: [1, 3]
    feeder1:
      type: datacopy
      grid_loc: [6, 9]
      grid_size: [3, 1]
      inputs: [dram_input1]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 1
      math_fidelity: HiFi4
      untilize_output: false
      t: 28
      mblock: [1, 54]
      ublock: [1, 1]
    op0:
      type: matmul
      grid_loc: [3, 1]
      grid_size: [6, 7]
      inputs: [feeder0, feeder1]
      in_df: [Float16, Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 8
      math_fidelity: HiFi4
      attributes: {m_k: 54, u_kt: 1}
      untilize_output: false
      t: 4
      mblock: [3, 3]
      ublock: [1, 1]
      input_0_tms: [vslice: 2, hstack: 2]
      input_1_tms: [transpose, hstack: 7]

programs:
  - test_multi_tm_datacopy_matmul_program:
    - param: [$p_microbatch_count, $p_microbatch_size]
    - staticvar: [$lptr, $gptr]
    - var: {$c_zero: 0, $c_wrap: 2}                         # c_wrap = 2 - finally need to be equal to 2*entries == 2*microbatch_size*microbatch_count
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_size]  # c_wrap = 2*microbatch_size
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_count] # c_wrap = 2*microbatch_size*microbatch_count
    - loop: $p_microbatch_count #loop over number of microbatches that make a minibatch
    -   execute: {
          graph_name: test_multi_tm_datacopy_matmul,
          queue_settings: {
            dram_input0: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
            dram_input1: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}
          }
        }
    -   varinst: [$lptr, incwrap, $p_microbatch_size, $c_wrap]
    -   varinst: [$gptr, incwrap, $p_microbatch_size, $c_wrap]
    - endloop

test-config:
  test-args:
    microbatch_count: 1 # entries / input_count
    microbatch_size: 2 # input_count
    minibatch_count: 1 # host loop iterations