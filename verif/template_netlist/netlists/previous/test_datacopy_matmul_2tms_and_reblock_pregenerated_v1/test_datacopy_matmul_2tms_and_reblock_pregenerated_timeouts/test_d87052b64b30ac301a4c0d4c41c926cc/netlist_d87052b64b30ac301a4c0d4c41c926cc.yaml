devices:
  arch: grayskull

queues:
  dram_input0:
    type: queue
    input: HOST
    entries: 1
    grid_size: [1, 4]
    t: 48
    mblock: [1, 1]
    ublock: [1, 1]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[2, 0x10000000], [2, 0x10018620], [2, 0x10030c40], [2, 0x10049260]]

  dram_input1:
    type: queue
    input: HOST
    entries: 1
    grid_size: [6, 5]
    t: 28
    mblock: [8, 1]
    ublock: [1, 2]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[6, 0x10000000], [6, 0x100e3820], [6, 0x101c7040], [6, 0x102aa860], [6, 0x1038e080], [6, 0x104718a0], [6, 0x105550c0], [6, 0x106388e0], [6, 0x1071c100], [6, 0x107ff920], [6, 0x108e3140], [6, 0x109c6960], [6, 0x10aaa180], [6, 0x10b8d9a0], [6, 0x10c711c0], [6, 0x10d549e0], [6, 0x10e38200], [6, 0x10f1ba20], [6, 0x10fff240], [6, 0x110e2a60], [6, 0x111c6280], [6, 0x112a9aa0], [6, 0x1138d2c0], [6, 0x11470ae0], [6, 0x11554300], [6, 0x11637b20], [6, 0x1171b340], [6, 0x117feb60], [6, 0x118e2380], [6, 0x119c5ba0]]

  dram_output:
    type: queue
    input: op0
    entries: 1
    grid_size: [3, 10]
    t: 8
    mblock: [1, 7]
    ublock: [2, 1]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[3, 0x10000000], [3, 0x10038e20], [3, 0x10071c40], [3, 0x100aaa60], [3, 0x100e3880], [3, 0x1011c6a0], [3, 0x101554c0], [3, 0x1018e2e0], [3, 0x101c7100], [3, 0x101fff20], [3, 0x10238d40], [3, 0x10271b60], [3, 0x102aa980], [3, 0x102e37a0], [3, 0x1031c5c0], [3, 0x103553e0], [3, 0x1038e200], [3, 0x103c7020], [3, 0x103ffe40], [3, 0x10438c60], [3, 0x10471a80], [3, 0x104aa8a0], [3, 0x104e36c0], [3, 0x1051c4e0], [3, 0x10555300], [3, 0x1058e120], [3, 0x105c6f40], [3, 0x105ffd60], [3, 0x10638b80], [3, 0x106719a0]]

graphs:
  test_multi_tm_datacopy_matmul:
    target_device: 0
    input_count: 1
    feeder0:
      type: datacopy
      grid_loc: [0, 0]
      grid_size: [1, 4]
      inputs: [dram_input0]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 12
      math_fidelity: HiFi4
      untilize_output: false
      t: 48
      mblock: [1, 1]
      ublock: [1, 1]
    feeder1:
      type: datacopy
      grid_loc: [1, 7]
      grid_size: [6, 5]
      inputs: [dram_input1]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 14
      math_fidelity: HiFi4
      untilize_output: false
      t: 28
      mblock: [8, 1]
      ublock: [1, 2]
    op0:
      type: matmul
      grid_loc: [7, 0]
      grid_size: [3, 10]
      inputs: [feeder0, feeder1]
      in_df: [Float16, Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 1
      math_fidelity: HiFi4
      attributes: {m_k: 12, u_kt: 2}
      untilize_output: false
      t: 8
      mblock: [1, 7]
      ublock: [2, 1]
      input_0_tms: [broadcast: {r: 6}, hstack: 6]
      input_1_tms: [vslice: 2, hstack: 7]

programs:
  - test_multi_tm_datacopy_matmul_program:
    - param: [$p_microbatch_count, $p_microbatch_size]
    - staticvar: [$lptr, $gptr]
    - var: {$c_zero: 0, $c_wrap: 2}                         # c_wrap = 2 - finally need to be equal to 2*entries == 2*microbatch_size*microbatch_count
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_size]  # c_wrap = 2*microbatch_size
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_count] # c_wrap = 2*microbatch_size*microbatch_count
    - loop: $p_microbatch_count #loop over number of microbatches that make a minibatch
    -   execute: {
          graph_name: test_multi_tm_datacopy_matmul,
          queue_settings: {
            dram_input0: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
            dram_input1: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}
          }
        }
    -   varinst: [$lptr, incwrap, $p_microbatch_size, $c_wrap]
    -   varinst: [$gptr, incwrap, $p_microbatch_size, $c_wrap]
    - endloop

test-config:
  test-args:
    microbatch_count: 1 # entries / input_count
    microbatch_size: 1 # input_count
    minibatch_count: 1 # host loop iterations