devices:
  arch: grayskull

queues:
  dram_input0:
    type: queue
    input: HOST
    entries: 1
    grid_size: [10, 8]
    t: 2
    mblock: [7, 3]
    ublock: [1, 2]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[0, 0x10000040], [0, 0x1002aae0], [0, 0x10055580], [0, 0x10080020], [0, 0x100aaac0], [0, 0x100d5560], [0, 0x10100000], [0, 0x1012aaa0], [0, 0x10155540], [0, 0x1017ffe0], [0, 0x101aaa80], [0, 0x101d5520], [0, 0x101fffc0], [0, 0x1022aa60], [0, 0x10255500], [0, 0x1027ffa0], [0, 0x102aaa40], [0, 0x102d54e0], [0, 0x102fff80], [0, 0x1032aa20], [0, 0x103554c0], [0, 0x1037ff60], [0, 0x103aaa00], [0, 0x103d54a0], [0, 0x103fff40], [0, 0x1042a9e0], [0, 0x10455480], [0, 0x1047ff20], [0, 0x104aa9c0], [0, 0x104d5460], [0, 0x104fff00], [0, 0x1052a9a0], [0, 0x10555440], [0, 0x1057fee0], [0, 0x105aa980], [0, 0x105d5420], [0, 0x105ffec0], [0, 0x1062a960], [0, 0x10655400], [0, 0x1067fea0], [0, 0x106aa940], [0, 0x106d53e0], [0, 0x106ffe80], [0, 0x1072a920], [0, 0x107553c0], [0, 0x1077fe60], [0, 0x107aa900], [0, 0x107d53a0], [0, 0x107ffe40], [0, 0x1082a8e0], [0, 0x10855380], [0, 0x1087fe20], [0, 0x108aa8c0], [0, 0x108d5360], [0, 0x108ffe00], [0, 0x1092a8a0], [0, 0x10955340], [0, 0x1097fde0], [0, 0x109aa880], [0, 0x109d5320], [0, 0x109ffdc0], [0, 0x10a2a860], [0, 0x10a55300], [0, 0x10a7fda0], [0, 0x10aaa840], [0, 0x10ad52e0], [0, 0x10affd80], [0, 0x10b2a820], [0, 0x10b552c0], [0, 0x10b7fd60], [0, 0x10baa800], [0, 0x10bd52a0], [0, 0x10bffd40], [0, 0x10c2a7e0], [0, 0x10c55280], [0, 0x10c7fd20], [0, 0x10caa7c0], [0, 0x10cd5260], [0, 0x10cffd00], [0, 0x10d2a7a0]]

  dram_input1:
    type: queue
    input: HOST
    entries: 1
    grid_size: [2, 1]
    t: 96
    mblock: [1, 1]
    ublock: [1, 1]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[1, 0x10000000], [1, 0x10030c20]]

  dram_output:
    type: queue
    input: op0
    entries: 1
    grid_size: [1, 1]
    t: 96
    mblock: [35, 1]
    ublock: [2, 2]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[3, 0x10000020]]

graphs:
  test_multi_tm_datacopy_matmul:
    target_device: 0
    input_count: 1
    feeder0:
      type: datacopy
      grid_loc: [0, 1]
      grid_size: [10, 8]
      inputs: [dram_input0]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 2
      math_fidelity: HiFi4
      untilize_output: false
      t: 2
      mblock: [7, 3]
      ublock: [1, 2]
    feeder1:
      type: datacopy
      grid_loc: [0, 0]
      grid_size: [2, 1]
      inputs: [dram_input1]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 1
      math_fidelity: HiFi4
      untilize_output: false
      t: 96
      mblock: [1, 1]
      ublock: [1, 1]
    op0:
      type: matmul
      grid_loc: [9, 0]
      grid_size: [1, 1]
      inputs: [feeder0, feeder1]
      in_df: [Float16, Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 1
      math_fidelity: HiFi4
      attributes: {m_k: 7, u_kt: 1}
      untilize_output: false
      t: 96
      mblock: [35, 1]
      ublock: [2, 2]
      input_0_tms: [hslice: 48, broadcast: {c: 7}]
      input_1_tms: [transpose, broadcast: {r: 7}]

programs:
  - test_multi_tm_datacopy_matmul_program:
    - param: [$p_microbatch_count, $p_microbatch_size]
    - staticvar: [$lptr, $gptr]
    - var: {$c_zero: 0, $c_wrap: 2}                         # c_wrap = 2 - finally need to be equal to 2*entries == 2*microbatch_size*microbatch_count
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_size]  # c_wrap = 2*microbatch_size
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_count] # c_wrap = 2*microbatch_size*microbatch_count
    - loop: $p_microbatch_count #loop over number of microbatches that make a minibatch
    -   execute: {
          graph_name: test_multi_tm_datacopy_matmul,
          queue_settings: {
            dram_input0: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
            dram_input1: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}
          }
        }
    -   varinst: [$lptr, incwrap, $p_microbatch_size, $c_wrap]
    -   varinst: [$gptr, incwrap, $p_microbatch_size, $c_wrap]
    - endloop

test-config:
  test-args:
    microbatch_count: 1 # entries / input_count
    microbatch_size: 1 # input_count
    minibatch_count: 1 # host loop iterations