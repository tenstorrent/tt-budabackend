devices:
  arch: grayskull

queues:
  dram_input0:
    type: queue
    input: HOST
    entries: 2
    grid_size: [2, 11]
    t: 1
    mblock: [8, 6]
    ublock: [1, 1]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[0, 0x10000060], [0, 0x10030c80], [0, 0x100618a0], [0, 0x100924c0], [0, 0x100c30e0], [0, 0x100f3d00], [0, 0x10124920], [0, 0x10155540], [0, 0x10186160], [0, 0x101b6d80], [0, 0x101e79a0], [0, 0x102185c0], [0, 0x102491e0], [0, 0x10279e00], [0, 0x102aaa20], [0, 0x102db640], [0, 0x1030c260], [0, 0x1033ce80], [0, 0x1036daa0], [0, 0x1039e6c0], [0, 0x103cf2e0], [0, 0x103fff00]]

  dram_input1:
    type: queue
    input: HOST
    entries: 2
    grid_size: [1, 3]
    t: 12
    mblock: [11, 1]
    ublock: [1, 8]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[2, 0x10000020], [2, 0x10430840], [2, 0x10861060]]

  dram_output:
    type: queue
    input: op0
    entries: 2
    grid_size: [2, 12]
    t: 6
    mblock: [1, 4]
    ublock: [8, 1]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[5, 0x10000040], [5, 0x100c3060], [5, 0x10186080], [5, 0x102490a0], [5, 0x1030c0c0], [5, 0x103cf0e0], [5, 0x10492100], [5, 0x10555120], [5, 0x10618140], [5, 0x106db160], [5, 0x1079e180], [5, 0x108611a0], [5, 0x109241c0], [5, 0x109e71e0], [5, 0x10aaa200], [5, 0x10b6d220], [5, 0x10c30240], [5, 0x10cf3260], [5, 0x10db6280], [5, 0x10e792a0], [5, 0x10f3c2c0], [5, 0x10fff2e0], [5, 0x110c2300], [5, 0x11185320]]

graphs:
  test_multi_tm_datacopy_matmul:
    target_device: 0
    input_count: 2
    feeder0:
      type: datacopy
      grid_loc: [0, 1]
      grid_size: [2, 11]
      inputs: [dram_input0]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 2
      math_fidelity: HiFi4
      untilize_output: false
      t: 1
      mblock: [8, 6]
      ublock: [1, 1]
    feeder1:
      type: datacopy
      grid_loc: [8, 3]
      grid_size: [1, 3]
      inputs: [dram_input1]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: c
      buf_size_mb: 1
      math_fidelity: HiFi4
      untilize_output: false
      t: 12
      mblock: [11, 1]
      ublock: [1, 8]
    op0:
      type: matmul
      grid_loc: [2, 0]
      grid_size: [2, 12]
      inputs: [feeder0, feeder1]
      in_df: [Float16, Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 4
      math_fidelity: HiFi4
      attributes: {m_k: 11, u_kt: 1}
      untilize_output: false
      t: 6
      mblock: [1, 4]
      ublock: [8, 1]
      input_0_tms: [hslice: 3, hslice: 2]
      input_1_tms: [hslice: 1, hstack: 2]

programs:
  - test_multi_tm_datacopy_matmul_program:
    - param: [$p_microbatch_count, $p_microbatch_size]
    - staticvar: [$lptr, $gptr]
    - var: {$c_zero: 0, $c_wrap: 2}                         # c_wrap = 2 - finally need to be equal to 2*entries == 2*microbatch_size*microbatch_count
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_size]  # c_wrap = 2*microbatch_size
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_count] # c_wrap = 2*microbatch_size*microbatch_count
    - loop: $p_microbatch_count #loop over number of microbatches that make a minibatch
    -   execute: {
          graph_name: test_multi_tm_datacopy_matmul,
          queue_settings: {
            dram_input0: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
            dram_input1: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}
          }
        }
    -   varinst: [$lptr, incwrap, $p_microbatch_size, $c_wrap]
    -   varinst: [$gptr, incwrap, $p_microbatch_size, $c_wrap]
    - endloop

test-config:
  test-args:
    microbatch_count: 1 # entries / input_count
    microbatch_size: 2 # input_count
    minibatch_count: 1 # host loop iterations