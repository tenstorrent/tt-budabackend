# test_config_id=59
devices:
  arch: grayskull

queues:
  dram_input0:
    type: queue
    input: HOST
    entries: 4
    grid_size: [6, 6]
    t: 1
    mblock: [1, 6]
    ublock: [6, 1]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[6, 0x10000020], [6, 0x10049240], [6, 0x10092460], [6, 0x100db680], [6, 0x101248a0], [6, 0x1016dac0], [6, 0x101b6ce0], [6, 0x101fff00], [6, 0x10249120], [6, 0x10292340], [6, 0x102db560], [6, 0x10324780], [6, 0x1036d9a0], [6, 0x103b6bc0], [6, 0x103ffde0], [6, 0x10449000], [6, 0x10492220], [6, 0x104db440], [6, 0x10524660], [6, 0x1056d880], [6, 0x105b6aa0], [6, 0x105ffcc0], [6, 0x10648ee0], [6, 0x10692100], [6, 0x106db320], [6, 0x10724540], [6, 0x1076d760], [6, 0x107b6980], [6, 0x107ffba0], [6, 0x10848dc0], [6, 0x10891fe0], [6, 0x108db200], [6, 0x10924420], [6, 0x1096d640], [6, 0x109b6860], [6, 0x109ffa80]]

  dram_output:
    type: queue
    input: op0
    entries: 4
    grid_size: [3, 12]
    t: 2
    mblock: [2, 3]
    ublock: [6, 1]
    df: Float16
    ublock_order: c
    target_device: 0
    loc: dram
    dram: [[5, 0x10000020], [5, 0x10092440], [5, 0x10124860], [5, 0x101b6c80], [5, 0x102490a0], [5, 0x102db4c0], [5, 0x1036d8e0], [5, 0x103ffd00], [5, 0x10492120], [5, 0x10524540], [5, 0x105b6960], [5, 0x10648d80], [5, 0x106db1a0], [5, 0x1076d5c0], [5, 0x107ff9e0], [5, 0x10891e00], [5, 0x10924220], [5, 0x109b6640], [5, 0x10a48a60], [5, 0x10adae80], [5, 0x10b6d2a0], [5, 0x10bff6c0], [5, 0x10c91ae0], [5, 0x10d23f00], [5, 0x10db6320], [5, 0x10e48740], [5, 0x10edab60], [5, 0x10f6cf80], [5, 0x10fff3a0], [5, 0x110917c0], [5, 0x11123be0], [5, 0x111b6000], [5, 0x11248420], [5, 0x112da840], [5, 0x1136cc60], [5, 0x113ff080]]

graphs:
  test_multi_tm_datacopy_datacopy:
    target_device: 0
    input_count: 4
    feeder0:
      type: datacopy
      grid_loc: [1, 0]
      grid_size: [6, 6]
      inputs: [dram_input0]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 2
      math_fidelity: HiFi4
      untilize_output: false
      t: 1
      mblock: [1, 6]
      ublock: [6, 1]
    op0:
      type: datacopy
      grid_loc: [7, 0]
      grid_size: [3, 12]
      inputs: [feeder0]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: c
      buf_size_mb: 2
      math_fidelity: HiFi4
      untilize_output: false
      t: 2
      mblock: [2, 3]
      ublock: [6, 1]
      input_0_tms: [transpose, broadcast: {z: 2}]

programs:
  - test_multi_tm_datacopy_matmul_program:
    - param: [$p_microbatch_count, $p_microbatch_size]
    - staticvar: [$lptr, $gptr]
    - var: {$c_zero: 0, $c_wrap: 2}                         # c_wrap = 2 - finally need to be equal to 2*entries == 2*microbatch_size*microbatch_count
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_size]  # c_wrap = 2*microbatch_size
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_count] # c_wrap = 2*microbatch_size*microbatch_count
    - loop: $p_microbatch_count #loop over number of microbatches that make a minibatch
    -   execute: {
          graph_name: test_multi_tm_datacopy_datacopy,
          queue_settings: {
            dram_input0: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
          }
        }
    -   varinst: [$lptr, incwrap, $p_microbatch_size, $c_wrap]
    -   varinst: [$gptr, incwrap, $p_microbatch_size, $c_wrap]
    - endloop

test-config:
  test-args:
    microbatch_count: 1 # entries / input_count
    microbatch_size: 4 # input_count
    minibatch_count: 1 # host loop iterations