# test_config_id=231
devices:
  arch: grayskull

queues:
  dram_input0:
    type: queue
    input: HOST
    entries: 1
    grid_size: [6, 12]
    t: 2
    mblock: [10, 9]
    ublock: [1, 1]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[7, 0x10000040], [7, 0x1005b6e0], [7, 0x100b6d80], [7, 0x10112420], [7, 0x1016dac0], [7, 0x101c9160], [7, 0x10224800], [7, 0x1027fea0], [7, 0x102db540], [7, 0x10336be0], [7, 0x10392280], [7, 0x103ed920], [7, 0x10448fc0], [7, 0x104a4660], [7, 0x104ffd00], [7, 0x1055b3a0], [7, 0x105b6a40], [7, 0x106120e0], [7, 0x1066d780], [7, 0x106c8e20], [7, 0x107244c0], [7, 0x1077fb60], [7, 0x107db200], [7, 0x108368a0], [7, 0x10891f40], [7, 0x108ed5e0], [7, 0x10948c80], [7, 0x109a4320], [7, 0x109ff9c0], [7, 0x10a5b060], [7, 0x10ab6700], [7, 0x10b11da0], [7, 0x10b6d440], [7, 0x10bc8ae0], [7, 0x10c24180], [7, 0x10c7f820], [7, 0x10cdaec0], [7, 0x10d36560], [7, 0x10d91c00], [7, 0x10ded2a0], [7, 0x10e48940], [7, 0x10ea3fe0], [7, 0x10eff680], [7, 0x10f5ad20], [7, 0x10fb63c0], [7, 0x11011a60], [7, 0x1106d100], [7, 0x110c87a0], [7, 0x11123e40], [7, 0x1117f4e0], [7, 0x111dab80], [7, 0x11236220], [7, 0x112918c0], [7, 0x112ecf60], [7, 0x11348600], [7, 0x113a3ca0], [7, 0x113ff340], [7, 0x1145a9e0], [7, 0x114b6080], [7, 0x11511720], [7, 0x1156cdc0], [7, 0x115c8460], [7, 0x11623b00], [7, 0x1167f1a0], [7, 0x116da840], [7, 0x11735ee0], [7, 0x11791580], [7, 0x117ecc20], [7, 0x118482c0], [7, 0x118a3960], [7, 0x118ff000], [7, 0x1195a6a0]]

  dram_output:
    type: queue
    input: op0
    entries: 1
    grid_size: [1, 5]
    t: 216
    mblock: [1, 2]
    ublock: [1, 6]
    df: Float16
    ublock_order: c
    target_device: 0
    loc: dram
    dram: [[5, 0x10000020], [5, 0x10524440], [5, 0x10a48860], [5, 0x10f6cc80], [5, 0x114910a0]]

graphs:
  test_multi_tm_datacopy_datacopy:
    target_device: 0
    input_count: 1
    feeder0:
      type: datacopy
      grid_loc: [1, 0]
      grid_size: [6, 12]
      inputs: [dram_input0]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 2
      math_fidelity: HiFi4
      untilize_output: false
      t: 2
      mblock: [10, 9]
      ublock: [1, 1]
    op0:
      type: datacopy
      grid_loc: [8, 0]
      grid_size: [1, 5]
      inputs: [feeder0]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: c
      buf_size_mb: 2
      math_fidelity: HiFi4
      untilize_output: false
      t: 216
      mblock: [1, 2]
      ublock: [1, 6]
      input_0_tms: [transpose, vslice: 108]

programs:
  - test_multi_tm_datacopy_matmul_program:
    - param: [$p_microbatch_count, $p_microbatch_size]
    - staticvar: [$lptr, $gptr]
    - var: {$c_zero: 0, $c_wrap: 2}                         # c_wrap = 2 - finally need to be equal to 2*entries == 2*microbatch_size*microbatch_count
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_size]  # c_wrap = 2*microbatch_size
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_count] # c_wrap = 2*microbatch_size*microbatch_count
    - loop: $p_microbatch_count #loop over number of microbatches that make a minibatch
    -   execute: {
          graph_name: test_multi_tm_datacopy_datacopy,
          queue_settings: {
            dram_input0: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
          }
        }
    -   varinst: [$lptr, incwrap, $p_microbatch_size, $c_wrap]
    -   varinst: [$gptr, incwrap, $p_microbatch_size, $c_wrap]
    - endloop

test-config:
  test-args:
    microbatch_count: 1 # entries / input_count
    microbatch_size: 1 # input_count
    minibatch_count: 1 # host loop iterations