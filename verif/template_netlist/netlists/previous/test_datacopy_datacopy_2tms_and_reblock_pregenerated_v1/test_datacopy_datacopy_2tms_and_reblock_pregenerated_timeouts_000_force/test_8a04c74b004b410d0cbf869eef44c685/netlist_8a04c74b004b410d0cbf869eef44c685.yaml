# test_config_id=87
devices:
  arch: grayskull

queues:
  dram_input0:
    type: queue
    input: HOST
    entries: 1
    grid_size: [1, 12]
    t: 8
    mblock: [5, 5]
    ublock: [1, 2]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[6, 0x10000080], [6, 0x100cb2a0], [6, 0x101964c0], [6, 0x102616e0], [6, 0x1032c900], [6, 0x103f7b20], [6, 0x104c2d40], [6, 0x1058df60], [6, 0x10659180], [6, 0x107243a0], [6, 0x107ef5c0], [6, 0x108ba7e0]]

  dram_output:
    type: queue
    input: op0
    entries: 1
    grid_size: [6, 5]
    t: 8
    mblock: [20, 3]
    ublock: [1, 1]
    df: Float16
    ublock_order: c
    target_device: 0
    loc: dram
    dram: [[5, 0x100000a0], [5, 0x100f3cc0], [5, 0x101e78e0], [5, 0x102db500], [5, 0x103cf120], [5, 0x104c2d40], [5, 0x105b6960], [5, 0x106aa580], [5, 0x1079e1a0], [5, 0x10891dc0], [5, 0x109859e0], [5, 0x10a79600], [5, 0x10b6d220], [5, 0x10c60e40], [5, 0x10d54a60], [5, 0x10e48680], [5, 0x10f3c2a0], [5, 0x1102fec0], [5, 0x11123ae0], [5, 0x11217700], [5, 0x1130b320], [5, 0x113fef40], [5, 0x114f2b60], [5, 0x115e6780], [5, 0x116da3a0], [5, 0x117cdfc0], [5, 0x118c1be0], [5, 0x119b5800], [5, 0x11aa9420], [5, 0x11b9d040]]

graphs:
  test_multi_tm_datacopy_datacopy:
    target_device: 0
    input_count: 1
    feeder0:
      type: datacopy
      grid_loc: [9, 0]
      grid_size: [1, 12]
      inputs: [dram_input0]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 2
      math_fidelity: HiFi4
      untilize_output: false
      t: 8
      mblock: [5, 5]
      ublock: [1, 2]
    op0:
      type: datacopy
      grid_loc: [0, 1]
      grid_size: [6, 5]
      inputs: [feeder0]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: c
      buf_size_mb: 1
      math_fidelity: HiFi4
      untilize_output: false
      t: 8
      mblock: [20, 3]
      ublock: [1, 1]
      input_0_tms: [transpose, broadcast: {c: 3}]

programs:
  - test_multi_tm_datacopy_matmul_program:
    - param: [$p_microbatch_count, $p_microbatch_size]
    - staticvar: [$lptr, $gptr]
    - var: {$c_zero: 0, $c_wrap: 2}                         # c_wrap = 2 - finally need to be equal to 2*entries == 2*microbatch_size*microbatch_count
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_size]  # c_wrap = 2*microbatch_size
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_count] # c_wrap = 2*microbatch_size*microbatch_count
    - loop: $p_microbatch_count #loop over number of microbatches that make a minibatch
    -   execute: {
          graph_name: test_multi_tm_datacopy_datacopy,
          queue_settings: {
            dram_input0: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
          }
        }
    -   varinst: [$lptr, incwrap, $p_microbatch_size, $c_wrap]
    -   varinst: [$gptr, incwrap, $p_microbatch_size, $c_wrap]
    - endloop

test-config:
  test-args:
    microbatch_count: 1 # entries / input_count
    microbatch_size: 1 # input_count
    minibatch_count: 1 # host loop iterations