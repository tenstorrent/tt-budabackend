devices:
  arch: grayskull

queues:
  dram_input0:
    type: queue
    input: HOST
    entries: 1
    grid_size: [2, 9]
    t: 4
    mblock: [6, 3]
    ublock: [2, 2]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[4, 0x10000000], [4, 0x10092420], [4, 0x10124840], [4, 0x101b6c60], [4, 0x10249080], [4, 0x102db4a0], [4, 0x1036d8c0], [4, 0x103ffce0], [4, 0x10492100], [4, 0x10524520], [4, 0x105b6940], [4, 0x10648d60], [4, 0x106db180], [4, 0x1076d5a0], [4, 0x107ff9c0], [4, 0x10891de0], [4, 0x10924200], [4, 0x109b6620]]

  dram_output:
    type: queue
    input: op0
    entries: 1
    grid_size: [4, 6]
    t: 2
    mblock: [3, 18]
    ublock: [2, 1]
    df: Float16
    ublock_order: c
    target_device: 0
    loc: dram
    dram: [[5, 0x10000000], [5, 0x1006db20], [5, 0x100db640], [5, 0x10149160], [5, 0x101b6c80], [5, 0x102247a0], [5, 0x102922c0], [5, 0x102ffde0], [5, 0x1036d900], [5, 0x103db420], [5, 0x10448f40], [5, 0x104b6a60], [5, 0x10524580], [5, 0x105920a0], [5, 0x105ffbc0], [5, 0x1066d6e0], [5, 0x106db200], [5, 0x10748d20], [5, 0x107b6840], [5, 0x10824360], [5, 0x10891e80], [5, 0x108ff9a0], [5, 0x1096d4c0], [5, 0x109dafe0]]

graphs:
  test_multi_tm_datacopy_datacopy:
    target_device: 0
    input_count: 1
    feeder0:
      type: datacopy
      grid_loc: [0, 0]
      grid_size: [2, 9]
      inputs: [dram_input0]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 1
      math_fidelity: HiFi4
      untilize_output: false
      t: 4
      mblock: [6, 3]
      ublock: [2, 2]
    op0:
      type: datacopy
      grid_loc: [2, 6]
      grid_size: [4, 6]
      inputs: [feeder0]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: c
      buf_size_mb: 2
      math_fidelity: HiFi4
      untilize_output: false
      t: 2
      mblock: [3, 18]
      ublock: [2, 1]
      input_0_tms: [hslice: 6, hstack: 12]

programs:
  - test_multi_tm_datacopy_matmul_program:
    - param: [$p_microbatch_count, $p_microbatch_size]
    - staticvar: [$lptr, $gptr]
    - var: {$c_zero: 0, $c_wrap: 2}                         # c_wrap = 2 - finally need to be equal to 2*entries == 2*microbatch_size*microbatch_count
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_size]  # c_wrap = 2*microbatch_size
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_count] # c_wrap = 2*microbatch_size*microbatch_count
    - loop: $p_microbatch_count #loop over number of microbatches that make a minibatch
    -   execute: {
          graph_name: test_multi_tm_datacopy_datacopy,
          queue_settings: {
            dram_input0: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
          }
        }
    -   varinst: [$lptr, incwrap, $p_microbatch_size, $c_wrap]
    -   varinst: [$gptr, incwrap, $p_microbatch_size, $c_wrap]
    - endloop

test-config:
  test-args:
    microbatch_count: 1 # entries / input_count
    microbatch_size: 1 # input_count
    minibatch_count: 1 # host loop iterations