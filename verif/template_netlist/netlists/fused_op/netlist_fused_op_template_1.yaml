devices:
  arch: [grayskull, wormhole, wormhole_b0]

queues:
  input0:  {type: queue, input: HOST, entries: 8, grid_size: [1, 1], t: 8, mblock: [1, 1], ublock: [2, 2], df: Bfp8, target_device: 0, loc: dram, dram: [[0, 0x30000000]]}
  input1:  {type: queue, input: HOST, entries: 8, grid_size: [1, 1], t: 8, mblock: [1, 1], ublock: [2, 2], df: Bfp8, target_device: 0, loc: dram, dram: [[0, 0x31000000]]}
  input2:  {type: queue, input: HOST, entries: 8, grid_size: [1, 1], t: 8, mblock: [1, 1], ublock: [2, 2], df: Bfp8, target_device: 0, loc: dram, dram: [[0, 0x32000000]]}
  input3:  {type: queue, input: HOST, entries: 8, grid_size: [1, 1], t: 8, mblock: [1, 1], ublock: [2, 2], df: Bfp8, target_device: 0, loc: dram, dram: [[0, 0x33000000]]}
  input4:  {type: queue, input: HOST, entries: 8, grid_size: [1, 1], t: 8, mblock: [1, 1], ublock: [2, 2], df: Bfp8, target_device: 0, loc: dram, dram: [[0, 0x34000000]]}
  input5:  {type: queue, input: HOST, entries: 8, grid_size: [1, 1], t: 8, mblock: [1, 1], ublock: [2, 2], df: Bfp8, target_device: 0, loc: dram, dram: [[0, 0x35000000]]}
  input6:  {type: queue, input: HOST, entries: 8, grid_size: [1, 1], t: 8, mblock: [1, 2], ublock: [2, 2], df: Bfp8, target_device: 0, loc: dram, dram: [[0, 0x36000000]]}
  input7:  {type: queue, input: HOST, entries: 8, grid_size: [1, 1], t: 8, mblock: [2, 1], ublock: [2, 2], df: Bfp8, target_device: 0, loc: dram, dram: [[0, 0x37000000]]}
  input8:  {type: ram, input: HOST, entries: 1, grid_size: [1, 1], t: 8, mblock: [2, 1], ublock: [2, 2], df: Bfp8, target_device: 0, loc: dram, dram: [[0, 0x38000000]]}
  output0:  {type: queue, input: op0 , entries: 8, grid_size: [1, 1], t: 8, mblock: [1, 1], ublock: [2, 2], df: Bfp8, target_device: 0, loc: dram, dram: [[1, 0x30000000]]}

graphs:
  test_op:
    target_device: 0
    input_count:  8
    op_nop0: 
      type: nop
      grid_loc: [1, 1]   # [r,c]
      grid_size: [1, 1] # [r,c]
      inputs: [input0]
      in_df: [Bfp8]
      acc_df: Float16
      out_df: Bfp8  
      intermed_df: Bfp8
      ublock_order: r
      buf_size_mb: 2
      math_fidelity: HiFi3
      untilize_output: false 
      gradient_op: false
      t: 8
      mblock: [1, 1]
      ublock: [2, 2]
      input_0_tms:
    op_nop1: 
      type: nop
      grid_loc: [1, 2]   # [r,c]
      grid_size: [1, 1] # [r,c]
      inputs: [input1]
      in_df: [Bfp8]
      acc_df: Float16
      out_df: Bfp8  
      intermed_df: Bfp8
      ublock_order: r
      buf_size_mb: 2
      math_fidelity: HiFi3
      untilize_output: false 
      gradient_op: false
      t: 8
      mblock: [1, 1]
      ublock: [2, 2]
      input_0_tms:
    op_nop2: 
      type: nop
      grid_loc: [1, 3]   # [r,c]
      grid_size: [1, 1] # [r,c]
      inputs: [input2]
      in_df: [Bfp8]
      acc_df: Float16
      out_df: Bfp8  
      intermed_df: Bfp8
      ublock_order: r
      buf_size_mb: 2
      math_fidelity: HiFi3
      untilize_output: false 
      gradient_op: false
      t: 8
      mblock: [1, 1]
      ublock: [2, 2]
      input_0_tms:
    op_nop3: 
      type: nop
      grid_loc: [1, 4]   # [r,c]
      grid_size: [1, 1] # [r,c]
      inputs: [input3]
      in_df: [Bfp8]
      acc_df: Float16
      out_df: Bfp8  
      intermed_df: Bfp8
      ublock_order: r
      buf_size_mb: 2
      math_fidelity: HiFi3
      untilize_output: false 
      gradient_op: false
      t: 8
      mblock: [1, 1]
      ublock: [2, 2]
      input_0_tms:
    op_nop4: 
      type: nop
      grid_loc: [1, 5]   # [r,c]
      grid_size: [1, 1] # [r,c]
      inputs: [input4]
      in_df: [Bfp8]
      acc_df: Float16
      out_df: Bfp8  
      intermed_df: Bfp8
      ublock_order: r
      buf_size_mb: 2
      math_fidelity: HiFi3
      untilize_output: false 
      gradient_op: false
      t: 8
      mblock: [1, 1]
      ublock: [2, 2]
      input_0_tms:
    op_nop5: 
      type: nop
      grid_loc: [1, 6]   # [r,c]
      grid_size: [1, 1] # [r,c]
      inputs: [input5]
      in_df: [Bfp8]
      acc_df: Float16
      out_df: Bfp8  
      intermed_df: Bfp8
      ublock_order: r
      buf_size_mb: 2
      math_fidelity: HiFi3
      untilize_output: false 
      gradient_op: false
      t: 8
      mblock: [1, 1]
      ublock: [2, 2]
      input_0_tms:
    op_nop6: 
      type: nop
      grid_loc: [1, 7]   # [r,c]
      grid_size: [1, 1] # [r,c]
      inputs: [input6]
      in_df: [Bfp8]
      acc_df: Float16
      out_df: Bfp8  
      intermed_df: Bfp8
      ublock_order: r
      buf_size_mb: 2
      math_fidelity: HiFi3
      untilize_output: false 
      gradient_op: false
      t: 8
      mblock: [1, 2]
      ublock: [2, 2]
      input_0_tms:
    op0: 
      type: fused_op
      grid_loc: [0, 0]   # [r,c]
      grid_size: [1, 1] # [r,c]
      inputs: [input0, op_nop0, input1, op_nop1, input2, op_nop2, input3, op_nop3, 
               input4, op_nop4, input5, op_nop5, input6, op_nop6, input7, input8]
      in_df: [Bfp8, Bfp8, Bfp8, Bfp8, Bfp8, Bfp8, Bfp8, Bfp8,
              Bfp8, Bfp8, Bfp8, Bfp8, Bfp8, Bfp8, Bfp8, Bfp8]
      acc_df: Float16
      out_df: Bfp8  
      intermed_df: Bfp8
      ublock_order: r
      buf_size_mb: 2
      math_fidelity: HiFi3
      untilize_output: false 
      gradient_op: false
      attributes: {fused_op_id: 0}
      t: 8
      mblock: [1, 1]
      ublock: [2, 2]
      input_0_tms:
      input_1_tms: None
      
programs:
  - program0:
      - staticvar: [$lptr, $gptr, $c_loop_count, $c_input_count]
      - var: [$ramrdptr, $ramwrptr, $c_zero]
      - varinst: [$c_loop_count, set, 1]  # load loop count
      - varinst: [$c_input_count, set, 8]  # load loop count
      - loop: $c_loop_count
      - execute: {graph_name: test_op, queue_settings: {
         input0: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
         input1: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
         input2: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
         input3: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
         input4: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
         input5: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
         input6: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
         input7: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
         input8: {prologue: true, epilogue: false, zero: false, wr_ptr_global: $c_zero, rd_ptr_global: $c_zero}}}
      -   varinst: [$lptr, incwrap, $c_input_count, 16]
      -   varinst: [$gptr, incwrap, $c_input_count, 16]
      - endloop 

fused_ops:
  0:
    inputs: 16
    intermediates: 8
    schedules: 
      -
        - add0: { type: add, inputs: [input0,    input1],                                 mblock: [1, 1], ublock: [2, 2], output: intermed0}
        - add1: { type: add, inputs: [input2,    input3],                                 mblock: [1, 1], ublock: [2, 2], output: intermed1}
        - add2: { type: add, inputs: [input4,    input5],                                 mblock: [1, 1], ublock: [2, 2], output: intermed2}
        - add3: { type: add, inputs: [input6,    input7],                                 mblock: [1, 1], ublock: [2, 2], output: intermed3}
        - mul: { type: multiply, inputs: [intermed0, intermed1], pop: [intermed0, intermed1], mblock: [1, 1], ublock: [2, 2], output: dest}
        - sub0: { type: subtract, inputs: [dest, intermed2], pop: [intermed2], mblock: [1, 1], ublock: [2, 2], output: intermed2}
        - add4: { type: add, inputs: [intermed2, intermed3], pop: [intermed2, intermed3], mblock: [1, 1], ublock: [2, 2], output: dest}
        - add5: { type: add, inputs: [dest,      input8],                                 mblock: [1, 1], ublock: [2, 2], output: intermed0}
        - add6: { type: add, inputs: [intermed0, input9],    pop: [intermed0],            mblock: [1, 1], ublock: [2, 2], output: dest}
        - sub1: { type: add, inputs: [dest,     input10],                                mblock: [1, 1], ublock: [2, 2], output: intermed0}
        - add7: { type: subtract, inputs: [intermed0,  input11], pop: [intermed0],       mblock: [1, 1], ublock: [2, 2], output: intermed0}
      -  
        - add8: { type: matmul, inputs: [input12,   input14], attributes: {m_k: 2, u_kt: 2}, mblock: [1, 1], ublock: [2, 2], output: intermed1}
      -  
        - add9: { type: matmul, inputs: [input13,   input15], attributes: {m_k: 2, u_kt: 2}, mblock: [1, 1], ublock: [2, 2], output: intermed2}
      -  
        - add10: { type: add, inputs: [intermed1, intermed2], pop: [intermed1, intermed2], mblock: [1, 1], ublock: [2, 2], output: intermed4}
      -  
        - add11: { type: add, inputs: [intermed4, intermed0], pop: [intermed4, intermed0], mblock: [1, 1], ublock: [2, 2], output: intermed5}
      -  
        - add12: { type: add, inputs: [intermed5, input0], pop: [intermed5, input0], mblock: [1, 1], ublock: [2, 2], output: intermed6}
      -  
        - add13: { type: add, inputs: [intermed6, input1], pop: [intermed6, input1], mblock: [1, 1], ublock: [2, 2], output: intermed7}
      -  
        - add14: { type: add, inputs: [intermed7, input2], pop: [intermed7, input2], mblock: [1, 1], ublock: [2, 2], output: output}

test-config:
  comparison-config:
    type: AllCloseHw
    atol: 0.01
    rtol: 0.15
    check_pct: 0.9
    check_pcc: 0.99
    verbosity: Concise
  stimulus-config:
    type: Uniform
    #type: Constant
    #constant_value: 2.0
    #type: DebugTileId
    #debug_tile_id_base: 1.0
    #debug_tile_id_step: 1.0
    uniform_lower_bound: 0.0
    uniform_upper_bound: 2.0