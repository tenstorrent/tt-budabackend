# test_config_id=98
devices:
  arch: grayskull

queues:
  dram_input0:
    type: queue
    input: HOST
    entries: 1
    grid_size: [3, 3]
    t: 1
    mblock: [6, 1]
    ublock: [1, 6]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[0, 0x10000060], [0, 0x10012500], [0, 0x100249a0], [0, 0x10036e40], [0, 0x100492e0], [0, 0x1005b780], [0, 0x1006dc20], [0, 0x100800c0], [0, 0x10092560]]

  dram_input1:
    type: queue
    input: HOST
    entries: 1
    grid_size: [3, 3]
    t: 30
    mblock: [6, 1]
    ublock: [1, 5]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[3, 0x10000020], [3, 0x101c90c0], [3, 0x10392160], [3, 0x1055b200], [3, 0x107242a0], [3, 0x108ed340], [3, 0x10ab63e0], [3, 0x10c7f480], [3, 0x10e48520]]

  dram_output:
    type: queue
    input: op0
    entries: 1
    grid_size: [9, 6]
    t: 5
    mblock: [2, 1]
    ublock: [1, 5]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[5, 0x10000040], [5, 0x100196a0], [5, 0x10032d00], [5, 0x1004c360], [5, 0x100659c0], [5, 0x1007f020], [5, 0x10098680], [5, 0x100b1ce0], [5, 0x100cb340], [5, 0x100e49a0], [5, 0x100fe000], [5, 0x10117660], [5, 0x10130cc0], [5, 0x1014a320], [5, 0x10163980], [5, 0x1017cfe0], [5, 0x10196640], [5, 0x101afca0], [5, 0x101c9300], [5, 0x101e2960], [5, 0x101fbfc0], [5, 0x10215620], [5, 0x1022ec80], [5, 0x102482e0], [5, 0x10261940], [5, 0x1027afa0], [5, 0x10294600], [5, 0x102adc60], [5, 0x102c72c0], [5, 0x102e0920], [5, 0x102f9f80], [5, 0x103135e0], [5, 0x1032cc40], [5, 0x103462a0], [5, 0x1035f900], [5, 0x10378f60], [5, 0x103925c0], [5, 0x103abc20], [5, 0x103c5280], [5, 0x103de8e0], [5, 0x103f7f40], [5, 0x104115a0], [5, 0x1042ac00], [5, 0x10444260], [5, 0x1045d8c0], [5, 0x10476f20], [5, 0x10490580], [5, 0x104a9be0], [5, 0x104c3240], [5, 0x104dc8a0], [5, 0x104f5f00], [5, 0x1050f560], [5, 0x10528bc0], [5, 0x10542220]]

graphs:
  test_multi_tm_datacopy_matmul:
    target_device: 0
    input_count: 1
    feeder0:
      type: datacopy
      grid_loc: [0, 9]
      grid_size: [3, 3]
      inputs: [dram_input0]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: c
      buf_size_mb: 1
      math_fidelity: HiFi4
      untilize_output: false
      t: 1
      mblock: [6, 1]
      ublock: [1, 6]
    feeder1:
      type: datacopy
      grid_loc: [0, 0]
      grid_size: [3, 3]
      inputs: [dram_input1]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 2
      math_fidelity: HiFi4
      untilize_output: false
      t: 30
      mblock: [6, 1]
      ublock: [1, 5]
    op0:
      type: matmul
      grid_loc: [0, 3]
      grid_size: [9, 6]
      inputs: [feeder0, feeder1]
      in_df: [Float16, Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 1
      math_fidelity: HiFi4
      attributes: {m_k: 9, u_kt: 6}
      untilize_output: false
      t: 5
      mblock: [2, 1]
      ublock: [1, 5]
      input_0_tms: [broadcast: {z: 15}, hstack: 3]
      input_1_tms: [vstack: 3, hstack: 2]

programs:
  - test_multi_tm_datacopy_matmul_program:
    - param: [$p_microbatch_count, $p_microbatch_size]
    - staticvar: [$lptr, $gptr]
    - var: {$c_zero: 0, $c_wrap: 2}                         # c_wrap = 2 - finally need to be equal to 2*entries == 2*microbatch_size*microbatch_count
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_size]  # c_wrap = 2*microbatch_size
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_count] # c_wrap = 2*microbatch_size*microbatch_count
    - loop: $p_microbatch_count #loop over number of microbatches that make a minibatch
    -   execute: {
          graph_name: test_multi_tm_datacopy_matmul,
          queue_settings: {
            dram_input0: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
            dram_input1: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}
          }
        }
    -   varinst: [$lptr, incwrap, $p_microbatch_size, $c_wrap]
    -   varinst: [$gptr, incwrap, $p_microbatch_size, $c_wrap]
    - endloop

test-config:
  test-args:
    microbatch_count: 1 # entries / input_count
    microbatch_size: 1 # input_count
    minibatch_count: 1 # host loop iterations# Generation Command: SEED=701 ARCH_NAME=grayskull verif/template_netlist/run_generate_ci_tests.sh test_modules.test_datacopy_matmul_multiple_tms_and_reblock verif/graph_tests/netlists/z3/test_datacopy_matmul_2tms_and_reblock_20220928_091831 104 1