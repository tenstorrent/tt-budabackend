# test_config_id=84
devices:
  arch: grayskull

queues:
  dram_input0:
    type: queue
    input: HOST
    entries: 1
    grid_size: [3, 1]
    t: 416
    mblock: [3, 2]
    ublock: [1, 1]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[6, 0x10000060], [6, 0x104f3880], [6, 0x109e70a0]]

  dram_input1:
    type: queue
    input: HOST
    entries: 1
    grid_size: [1, 2]
    t: 96
    mblock: [1, 13]
    ublock: [6, 1]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[0, 0x100000a0], [0, 0x10eda8c0]]

  dram_output:
    type: queue
    input: op0
    entries: 1
    grid_size: [3, 6]
    t: 32
    mblock: [3, 3]
    ublock: [3, 1]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[1, 0x10000080], [1, 0x101b6ca0], [1, 0x1036d8c0], [1, 0x105244e0], [1, 0x106db100], [1, 0x10891d20], [1, 0x10a48940], [1, 0x10bff560], [1, 0x10db6180], [1, 0x10f6cda0], [1, 0x111239c0], [1, 0x112da5e0], [1, 0x11491200], [1, 0x11647e20], [1, 0x117fea40], [1, 0x119b5660], [1, 0x11b6c280], [1, 0x11d22ea0]]

graphs:
  test_multi_tm_datacopy_matmul:
    target_device: 0
    input_count: 1
    feeder0:
      type: datacopy
      grid_loc: [2, 8]
      grid_size: [3, 1]
      inputs: [dram_input0]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: c
      buf_size_mb: 2
      math_fidelity: HiFi4
      untilize_output: false
      t: 416
      mblock: [3, 2]
      ublock: [1, 1]
    feeder1:
      type: datacopy
      grid_loc: [5, 0]
      grid_size: [1, 2]
      inputs: [dram_input1]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: c
      buf_size_mb: 2
      math_fidelity: HiFi4
      untilize_output: false
      t: 96
      mblock: [1, 13]
      ublock: [6, 1]
    op0:
      type: matmul
      grid_loc: [1, 2]
      grid_size: [3, 6]
      inputs: [feeder0, feeder1]
      in_df: [Float16, Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 1
      math_fidelity: HiFi4
      attributes: {m_k: 26, u_kt: 1}
      untilize_output: false
      t: 32
      mblock: [3, 3]
      ublock: [3, 1]
      input_0_tms: [broadcast: {r: 3}, hstack: 13]
      input_1_tms: [transpose, hstack: 3]

programs:
  - test_multi_tm_datacopy_matmul_program:
    - param: [$p_microbatch_count, $p_microbatch_size]
    - staticvar: [$lptr, $gptr]
    - var: {$c_zero: 0, $c_wrap: 2}                         # c_wrap = 2 - finally need to be equal to 2*entries == 2*microbatch_size*microbatch_count
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_size]  # c_wrap = 2*microbatch_size
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_count] # c_wrap = 2*microbatch_size*microbatch_count
    - loop: $p_microbatch_count #loop over number of microbatches that make a minibatch
    -   execute: {
          graph_name: test_multi_tm_datacopy_matmul,
          queue_settings: {
            dram_input0: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
            dram_input1: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}
          }
        }
    -   varinst: [$lptr, incwrap, $p_microbatch_size, $c_wrap]
    -   varinst: [$gptr, incwrap, $p_microbatch_size, $c_wrap]
    - endloop

test-config:
  test-args:
    microbatch_count: 1 # entries / input_count
    microbatch_size: 1 # input_count
    minibatch_count: 1 # host loop iterations# Generation Command: SEED=701 ARCH_NAME=grayskull verif/template_netlist/run_generate_ci_tests.sh test_modules.test_datacopy_matmul_multiple_tms_and_reblock verif/graph_tests/netlists/z3/test_datacopy_matmul_2tms_and_reblock_20220928_091831 104 1