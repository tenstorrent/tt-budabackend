# test_config_id=62
devices:
  arch: grayskull

queues:
  dram_input0:
    type: queue
    input: HOST
    entries: 2
    grid_size: [5, 12]
    t: 1
    mblock: [8, 11]
    ublock: [1, 1]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[7, 0x10000f00], [7, 0x1005a520], [7, 0x100b3b40], [7, 0x1010d160], [7, 0x10166780], [7, 0x101bfda0], [7, 0x102193c0], [7, 0x102729e0], [7, 0x102cc000], [7, 0x10325620], [7, 0x1037ec40], [7, 0x103d8260], [7, 0x10431880], [7, 0x1048aea0], [7, 0x104e44c0], [7, 0x1053dae0], [7, 0x10597100], [7, 0x105f0720], [7, 0x10649d40], [7, 0x106a3360], [7, 0x106fc980], [7, 0x10755fa0], [7, 0x107af5c0], [7, 0x10808be0], [7, 0x10862200], [7, 0x108bb820], [7, 0x10914e40], [7, 0x1096e460], [7, 0x109c7a80], [7, 0x10a210a0], [7, 0x10a7a6c0], [7, 0x10ad3ce0], [7, 0x10b2d300], [7, 0x10b86920], [7, 0x10bdff40], [7, 0x10c39560], [7, 0x10c92b80], [7, 0x10cec1a0], [7, 0x10d457c0], [7, 0x10d9ede0], [7, 0x10df8400], [7, 0x10e51a20], [7, 0x10eab040], [7, 0x10f04660], [7, 0x10f5dc80], [7, 0x10fb72a0], [7, 0x110108c0], [7, 0x11069ee0], [7, 0x110c3500], [7, 0x1111cb20], [7, 0x11176140], [7, 0x111cf760], [7, 0x11228d80], [7, 0x112823a0], [7, 0x112db9c0], [7, 0x11334fe0], [7, 0x1138e600], [7, 0x113e7c20], [7, 0x11441240], [7, 0x1149a860]]

  dram_input1:
    type: queue
    input: HOST
    entries: 2
    grid_size: [3, 4]
    t: 1
    mblock: [11, 1]
    ublock: [1, 8]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[6, 0x10000f20], [6, 0x1005a540], [6, 0x100b3b60], [6, 0x1010d180], [6, 0x101667a0], [6, 0x101bfdc0], [6, 0x102193e0], [6, 0x10272a00], [6, 0x102cc020], [6, 0x10325640], [6, 0x1037ec60], [6, 0x103d8280]]

  dram_output:
    type: queue
    input: op0
    entries: 2
    grid_size: [1, 8]
    t: 4
    mblock: [5, 4]
    ublock: [4, 1]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[1, 0x10000f40], [1, 0x10145f60], [1, 0x1028af80], [1, 0x103cffa0], [1, 0x10514fc0], [1, 0x10659fe0], [1, 0x1079f000], [1, 0x108e4020]]

graphs:
  test_multi_tm_datacopy_matmul:
    target_device: 0
    input_count: 2
    feeder0:
      type: datacopy
      grid_loc: [0, 0]
      grid_size: [5, 12]
      inputs: [dram_input0]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: c
      buf_size_mb: 2
      math_fidelity: HiFi4
      untilize_output: false
      t: 1
      mblock: [8, 11]
      ublock: [1, 1]
    feeder1:
      type: datacopy
      grid_loc: [7, 8]
      grid_size: [3, 4]
      inputs: [dram_input1]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 2
      math_fidelity: HiFi4
      untilize_output: false
      t: 1
      mblock: [11, 1]
      ublock: [1, 8]
    op0:
      type: matmul
      grid_loc: [9, 0]
      grid_size: [1, 8]
      inputs: [feeder0, feeder1]
      in_df: [Float16, Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 1
      math_fidelity: HiFi4
      attributes: {m_k: 132, u_kt: 1}
      untilize_output: false
      t: 4
      mblock: [5, 4]
      ublock: [4, 1]
      input_0_tms: [vslice: 4, broadcast: {r: 2}]
      input_1_tms: [broadcast: {z: 16}, vstack: 4]

programs:
  - test_multi_tm_datacopy_matmul_program:
    - param: [$p_microbatch_count, $p_microbatch_size]
    - staticvar: [$lptr, $gptr]
    - var: {$c_zero: 0, $c_wrap: 2}                         # c_wrap = 2 - finally need to be equal to 2*entries == 2*microbatch_size*microbatch_count
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_size]  # c_wrap = 2*microbatch_size
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_count] # c_wrap = 2*microbatch_size*microbatch_count
    - loop: $p_microbatch_count #loop over number of microbatches that make a minibatch
    -   execute: {
          graph_name: test_multi_tm_datacopy_matmul,
          queue_settings: {
            dram_input0: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
            dram_input1: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}
          }
        }
    -   varinst: [$lptr, incwrap, $p_microbatch_size, $c_wrap]
    -   varinst: [$gptr, incwrap, $p_microbatch_size, $c_wrap]
    - endloop

test-config:
  test-args:
    microbatch_count: 1 # entries / input_count
    microbatch_size: 2 # input_count
    minibatch_count: 1 # host loop iterations# Generation Command: SEED=517 ARCH_NAME=grayskull verif/template_netlist/run_generate_ci_tests.sh test_modules.test_datacopy_matmul_multiple_tms_and_reblock verif/graph_tests/netlists/z3/test_datacopy_matmul_2tms_and_reblock_20220929_083806 107 1