# test_config_id=83
devices:
  arch: grayskull

queues:
  dram_input0:
    type: queue
    input: HOST
    entries: 2
    grid_size: [2, 11]
    t: 2
    mblock: [2, 1]
    ublock: [1, 3]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[0, 0x10000440], [0, 0x1000c760], [0, 0x10018a80], [0, 0x10024da0], [0, 0x100310c0], [0, 0x1003d3e0], [0, 0x10049700], [0, 0x10055a20], [0, 0x10061d40], [0, 0x1006e060], [0, 0x1007a380], [0, 0x100866a0], [0, 0x100929c0], [0, 0x1009ece0], [0, 0x100ab000], [0, 0x100b7320], [0, 0x100c3640], [0, 0x100cf960], [0, 0x100dbc80], [0, 0x100e7fa0], [0, 0x100f42c0], [0, 0x101005e0]]

  dram_input1:
    type: queue
    input: HOST
    entries: 2
    grid_size: [7, 11]
    t: 1
    mblock: [2, 24]
    ublock: [1, 2]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[7, 0x10000020], [7, 0x10061840], [7, 0x100c3060], [7, 0x10124880], [7, 0x101860a0], [7, 0x101e78c0], [7, 0x102490e0], [7, 0x102aa900], [7, 0x1030c120], [7, 0x1036d940], [7, 0x103cf160], [7, 0x10430980], [7, 0x104921a0], [7, 0x104f39c0], [7, 0x105551e0], [7, 0x105b6a00], [7, 0x10618220], [7, 0x10679a40], [7, 0x106db260], [7, 0x1073ca80], [7, 0x1079e2a0], [7, 0x107ffac0], [7, 0x108612e0], [7, 0x108c2b00], [7, 0x10924320], [7, 0x10985b40], [7, 0x109e7360], [7, 0x10a48b80], [7, 0x10aaa3a0], [7, 0x10b0bbc0], [7, 0x10b6d3e0], [7, 0x10bcec00], [7, 0x10c30420], [7, 0x10c91c40], [7, 0x10cf3460], [7, 0x10d54c80], [7, 0x10db64a0], [7, 0x10e17cc0], [7, 0x10e794e0], [7, 0x10edad00], [7, 0x10f3c520], [7, 0x10f9dd40], [7, 0x10fff560], [7, 0x11060d80], [7, 0x110c25a0], [7, 0x11123dc0], [7, 0x111855e0], [7, 0x111e6e00], [7, 0x11248620], [7, 0x112a9e40], [7, 0x1130b660], [7, 0x1136ce80], [7, 0x113ce6a0], [7, 0x1142fec0], [7, 0x114916e0], [7, 0x114f2f00], [7, 0x11554720], [7, 0x115b5f40], [7, 0x11617760], [7, 0x11678f80], [7, 0x116da7a0], [7, 0x1173bfc0], [7, 0x1179d7e0], [7, 0x117ff000], [7, 0x11860820], [7, 0x118c2040], [7, 0x11923860], [7, 0x11985080], [7, 0x119e68a0], [7, 0x11a480c0], [7, 0x11aa98e0], [7, 0x11b0b100], [7, 0x11b6c920], [7, 0x11bce140], [7, 0x11c2f960], [7, 0x11c91180], [7, 0x11cf29a0]]

  dram_output:
    type: queue
    input: op0
    entries: 2
    grid_size: [10, 1]
    t: 2
    mblock: [1, 7]
    ublock: [2, 2]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[5, 0x10000420], [5, 0x10039240], [5, 0x10072060], [5, 0x100aae80], [5, 0x100e3ca0], [5, 0x1011cac0], [5, 0x101558e0], [5, 0x1018e700], [5, 0x101c7520], [5, 0x10200340]]

graphs:
  test_multi_tm_datacopy_matmul:
    target_device: 0
    input_count: 2
    feeder0:
      type: datacopy
      grid_loc: [1, 1]
      grid_size: [2, 11]
      inputs: [dram_input0]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 2
      math_fidelity: HiFi4
      untilize_output: false
      t: 2
      mblock: [2, 1]
      ublock: [1, 3]
    feeder1:
      type: datacopy
      grid_loc: [3, 1]
      grid_size: [7, 11]
      inputs: [dram_input1]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: c
      buf_size_mb: 2
      math_fidelity: HiFi4
      untilize_output: false
      t: 1
      mblock: [2, 24]
      ublock: [1, 2]
    op0:
      type: matmul
      grid_loc: [0, 0]
      grid_size: [10, 1]
      inputs: [feeder0, feeder1]
      in_df: [Float16, Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 4
      math_fidelity: HiFi4
      attributes: {m_k: 264, u_kt: 1}
      untilize_output: false
      t: 2
      mblock: [1, 7]
      ublock: [2, 2]
      input_0_tms: [broadcast: {r: 5}, broadcast: {c: 8}]
      input_1_tms: [hslice: 2, transpose]

programs:
  - test_multi_tm_datacopy_matmul_program:
    - param: [$p_microbatch_count, $p_microbatch_size]
    - staticvar: [$lptr, $gptr]
    - var: {$c_zero: 0, $c_wrap: 2}                         # c_wrap = 2 - finally need to be equal to 2*entries == 2*microbatch_size*microbatch_count
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_size]  # c_wrap = 2*microbatch_size
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_count] # c_wrap = 2*microbatch_size*microbatch_count
    - loop: $p_microbatch_count #loop over number of microbatches that make a minibatch
    -   execute: {
          graph_name: test_multi_tm_datacopy_matmul,
          queue_settings: {
            dram_input0: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
            dram_input1: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}
          }
        }
    -   varinst: [$lptr, incwrap, $p_microbatch_size, $c_wrap]
    -   varinst: [$gptr, incwrap, $p_microbatch_size, $c_wrap]
    - endloop

test-config:
  test-args:
    microbatch_count: 1 # entries / input_count
    microbatch_size: 2 # input_count
    minibatch_count: 1 # host loop iterations# Generation Command: SEED=413 ARCH_NAME=grayskull verif/template_netlist/run_generate_ci_tests.sh test_modules.test_datacopy_matmul_multiple_tms_and_reblock verif/graph_tests/netlists/z3/test_datacopy_matmul_2tms_and_reblock_20220929_145815 107 1