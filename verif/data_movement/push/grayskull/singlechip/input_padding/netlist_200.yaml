# test_config_id=9
devices:
  arch: grayskull

queues:
  input0_dram:
    type: queue
    input: HOST
    entries: 2
    grid_size: [3, 1]
    t: 20
    mblock: [2, 2]
    ublock: [4, 2]
    df: Float16
    ublock_order: r
    target_device: 0
    loc: dram
    dram: [[3, 0x10000000], [3, 0x1028a020], [3, 0x10514040]]

  input1_dram:
    type: queue
    input: HOST
    entries: 2
    grid_size: [5, 4]
    t: 2
    mblock: [9, 1]
    ublock: [1, 3]
    df: Float16
    ublock_order: r
    target_device: 0
    loc: dram
    dram: [[1, 0x10000000], [1, 0x10036da0], [1, 0x1006db40], [1, 0x100a48e0], [1, 0x100db680], [1, 0x10112420], [1, 0x101491c0], [1, 0x1017ff60], [1, 0x101b6d00], [1, 0x101edaa0], [1, 0x10224840], [1, 0x1025b5e0], [1, 0x10292380], [1, 0x102c9120], [1, 0x102ffec0], [1, 0x10336c60], [1, 0x1036da00], [1, 0x103a47a0], [1, 0x103db540], [1, 0x104122e0]]

  output_dram:
    type: queue
    input: op0
    entries: 2
    grid_size: [6, 6]
    t: 2
    mblock: [1, 4]
    ublock: [4, 2]
    df: Float16
    ublock_order: r
    target_device: 0
    loc: dram
    dram: [[3, 0x1079e060], [3, 0x107df080], [3, 0x108200a0], [3, 0x108610c0], [3, 0x108a20e0], [3, 0x108e3100], [3, 0x10924120], [3, 0x10965140], [3, 0x109a6160], [3, 0x109e7180], [3, 0x10a281a0], [3, 0x10a691c0], [3, 0x10aaa1e0], [3, 0x10aeb200], [3, 0x10b2c220], [3, 0x10b6d240], [3, 0x10bae260], [3, 0x10bef280], [3, 0x10c302a0], [3, 0x10c712c0], [3, 0x10cb22e0], [3, 0x10cf3300], [3, 0x10d34320], [3, 0x10d75340], [3, 0x10db6360], [3, 0x10df7380], [3, 0x10e383a0], [3, 0x10e793c0], [3, 0x10eba3e0], [3, 0x10efb400], [3, 0x10f3c420], [3, 0x10f7d440], [3, 0x10fbe460], [3, 0x10fff480], [3, 0x110404a0], [3, 0x110814c0]]

graphs:
  test_multi_tm_dram_matmul:
    target_device: 0
    input_count: 1
    op0:
      type: matmul
      grid_loc: [1, 1]
      grid_size: [6, 6]
      inputs: [input0_dram, input1_dram]
      in_df: [Float16, Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 2
      math_fidelity: HiFi4
      attributes: {m_k: 10, u_kt: 1}
      untilize_output: false
      t: 2
      mblock: [1, 4]
      ublock: [4, 2]

      input_0_unpad: {rt: 2, ct: 3}
      input_0_tms: [hstack: 10]
      input_0_pad: {rt: 2, ct: 0, pad_value: 0.0}

      input_1_unpad: {rt: 4, ct: 2}
      input_1_tms: [transpose]
      input_1_pad: {rt: 0, ct: 7, pad_value: 0.0}

programs:
  - test_multi_tm_dram_matmul_program:
    - param: [$p_microbatch_count, $p_microbatch_size]
    - staticvar: [$lptr, $gptr]
    - var: {$c_zero: 0, $c_wrap: 2}                         # c_wrap = 2 - finally need to be equal to 2*entries == 2*microbatch_size*microbatch_count
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_size]  # c_wrap = 2*microbatch_size
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_count] # c_wrap = 2*microbatch_size*microbatch_count
    - loop: $p_microbatch_count #loop over number of microbatches that make a minibatch
    -   execute: {
          graph_name: test_multi_tm_dram_matmul,
          queue_settings: {
               input0_dram: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
               input1_dram: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}
          }
        }
    -   varinst: [$lptr, incwrap, $p_microbatch_size, $c_wrap]
    -   varinst: [$gptr, incwrap, $p_microbatch_size, $c_wrap]
    - endloop

test-config:
  test-args:
    microbatch_count: 2 # entries / input_count
    microbatch_size: 1 # input_count
    minibatch_count: 2 # host loop iterations