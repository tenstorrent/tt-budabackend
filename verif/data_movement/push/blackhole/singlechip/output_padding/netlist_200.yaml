# test_config_id=0
devices:
  arch: wormhole_b0

queues:
  input0_dram:
    type: queue
    input: HOST
    entries: 2
    grid_size: [3, 1]
    t: 44
    mblock: [1, 5]
    ublock: [2, 1]
    df: Float16
    ublock_order: r
    target_device: 0
    loc: dram
    dram: [[2, 0x10000000], [2, 0x101d3840], [2, 0x103a7080]]

  input1_dram:
    type: queue
    input: HOST
    entries: 2
    grid_size: [1, 2]
    t: 44
    mblock: [3, 1]
    ublock: [1, 8]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[3, 0x10000000], [3, 0x10462040]]

  output_dram:
    type: queue
    input: output
    entries: 2
    grid_size: [6, 2]
    t: 11
    mblock: [2, 5]
    ublock: [3, 2]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[5, 0x10000000], [5, 0x102bd440], [5, 0x1057a880], [5, 0x10837cc0], [5, 0x10af5100], [5, 0x10db2540], [5, 0x1106f980], [5, 0x1132cdc0], [5, 0x115ea200], [5, 0x118a7640], [5, 0x11b64a80], [5,
        0x11e21ec0]]

graphs:
  test_multi_tm_datacopy_matmul:
    target_device: 0
    input_count: 2
    feeder0:
      type: datacopy
      grid_loc: [0, 0]
      grid_size: [3, 1]
      inputs: [input0_dram]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 1
      math_fidelity: HiFi4
      t: 44
      mblock: [1, 5]
      ublock: [2, 1]
      input_0_pad: {rt: 0, ct: 0, pad_value: 0.0}
    feeder1:
      type: datacopy
      grid_loc: [7, 1]
      grid_size: [1, 2]
      inputs: [input1_dram]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: c
      buf_size_mb: 2
      math_fidelity: HiFi4
      t: 44
      mblock: [3, 1]
      ublock: [1, 8]
      input_0_pad: {rt: 0, ct: 0, pad_value: 0.0}
    output:
      type: matmul
      grid_loc: [1, 3]
      grid_size: [6, 2]
      inputs: [feeder0, feeder1]
      in_df: [Float16, Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 1
      math_fidelity: HiFi4
      attributes: {m_k: 4, u_kt: 2}
      untilize_output: false
      t: 11
      mblock: [2, 5]
      ublock: [3, 2]

      input_0_unpad: {rt: 1, ct: 3}
      input_0_tms: [broadcast: {r: 7}, hstack: 4]
      input_0_pad: {rt: 1, ct: 0, pad_value: 0.0}

      input_1_unpad: {rt: 1, ct: 7}
      input_1_tms: [broadcast: {c: 2}, vstack: 4]
      input_1_pad: {rt: 0, ct: 2, pad_value: 0.0}

programs:
- test_multi_tm_datacopy_matmul_program:
  - param: [$p_microbatch_count, $p_microbatch_size]
  - staticvar: [$lptr, $gptr]
  - var: {$c_zero: 0, $c_wrap: 2}                           # c_wrap = 2 - finally need to be equal to 2*entries == 2*microbatch_size*microbatch_count
  - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_size]    # c_wrap = 2*microbatch_size
  - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_count]   # c_wrap = 2*microbatch_size*microbatch_count
  - loop: $p_microbatch_count   #loop over number of microbatches that make a minibatch
  - execute: {graph_name: test_multi_tm_datacopy_matmul, queue_settings: {input0_dram: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}, input1_dram: {prologue: false,
          epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}}}
  - varinst: [$lptr, incwrap, $p_microbatch_size, $c_wrap]
  - varinst: [$gptr, incwrap, $p_microbatch_size, $c_wrap]
  - endloop

test-config:
  test-args:
    microbatch_count: 1 # entries / input_count
    microbatch_size: 2 # input_count
    minibatch_count: 1 # host loop iterations
