# test_config_id=0
devices:
  arch: wormhole_b0

queues:
  input0_dram:
    type: queue
    input: HOST
    entries: 1
    grid_size: [1, 2]
    t: 1
    mblock: [46, 62]
    ublock: [1, 2]
    df: Float16
    ublock_order: r
    target_device: 0
    loc: dram
    dram: [[2, 0x10000000], [2, 0x10bd6440]]

  input1_dram:
    type: queue
    input: HOST
    entries: 1
    grid_size: [1, 8]
    t: 62
    mblock: [8, 1]
    ublock: [1, 7]
    df: Float16
    ublock_order: r
    target_device: 0
    loc: dram
    dram: [[0, 0x10000000], [0, 0x10734840], [0, 0x10e69080], [0, 0x1159d8c0], [0, 0x11cd2100], [0, 0x12406940], [0, 0x12b3b180], [0, 0x1326f9c0]]

  output_dram:
    type: queue
    input: target_op0
    entries: 1
    grid_size: [1, 4]
    t: 62
    mblock: [23, 14]
    ublock: [1, 1]
    df: Float16
    ublock_order: r
    target_device: 0
    loc: dram
    dram: [[3, 0x10000000], [3, 0x1296de40], [3, 0x152dbc80], [3, 0x17c49ac0]]

graphs:
  test_op:
    target_device: 0
    input_count: 1
    feeder0:
      type: datacopy
      grid_loc: [4, 4]
      grid_size: [1, 2]
      inputs: [input0_dram]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 2
      math_fidelity: HiFi4
      t: 62
      mblock: [23, 2]
      ublock: [1, 2]
      input_0_tms: [hslice: 31, vslice: 2]
    feeder1:
      type: datacopy
      grid_loc: [2, 0]
      grid_size: [1, 4]
      inputs: [input1_dram]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: c
      buf_size_mb: 2
      math_fidelity: HiFi4
      t: 62
      mblock: [8, 2]
      ublock: [1, 7]
    target_op0:
      type: matmul
      grid_loc: [5, 4]
      grid_size: [1, 4]
      inputs: [feeder0, feeder1]
      in_df: [Float16, Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 1
      math_fidelity: HiFi4
      attributes: {m_k: 8, u_kt: 1}
      t: 62
      mblock: [23, 14]
      ublock: [1, 1]
      untilize_output: false

programs:
- program0:
  - var: [$c_microbatch_count, $c_zero]
  - staticvar: {$gptr_q0: 0, $lptr_q0: 0}
  - varinst: [$c_microbatch_count, set, 1]
  - varinst: [$c_zero, set, 0]
  - loop: $c_microbatch_count   #loop over number of microbatches that make a minibatch
  - execute: {graph_name: test_op, queue_settings: {input0_dram: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr_q0, rd_ptr_global: $gptr_q0}, input1_dram: {prologue: false, epilogue: false,
          zero: false, rd_ptr_local: $lptr_q0, rd_ptr_global: $gptr_q0}}}
  - endloop

test-config:
  test-args:
    microbatch_count: 1 # entries / input_count
    microbatch_size: 1 # input_count
    minibatch_count: 1 # host loop iterations
