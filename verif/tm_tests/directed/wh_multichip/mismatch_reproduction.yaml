devices:
  arch: [wormhole, wormhole_b0]

queues:
  input0:  {type: queue, input: HOST, entries: 2, grid_size: [3, 2], t: 3, mblock: [2, 3], ublock: [3, 2], df: Float16, target_device: 0, loc: dram, dram: [[0, 0x30000000], [0, 0x31000000], [0, 0x32000000], [0, 0x33000000], [0, 0x34000000], [0, 0x35000000]]}
  input2:  {type: queue, input: HOST, entries: 2, grid_size: [3, 2], t: 3, mblock: [3, 2], ublock: [2, 3], df: Float16, target_device: 0, loc: dram, dram: [[0, 0x3c000000], [0, 0x3d000000], [0, 0x3e000000], [0, 0x3f000000], [0, 0x3a800000], [0, 0x3b800000]]}
  # output:  {type: queue, input: op0 , entries: 2, grid_size: [1, 1], t: 3, mblock: [18, 12], ublock: [1, 1], df: Float16, target_device: 1, loc: dram, dram: [[0, 0x10000000]]}
  output1:  {type: queue, input: op1 , entries: 2, grid_size: [1, 1], t: 3, mblock: [18, 12], ublock: [1, 1], df: Float16, target_device: 1, loc: dram, dram: [[1, 0x10000000]]}
  output2:  {type: queue, input: op2 , entries: 2, grid_size: [1, 1], t: 3, mblock: [18, 12], ublock: [1, 1], df: Float16, target_device: 1, loc: dram, dram: [[2, 0x10000000]]}


#######
###  IF YOU....
###  - Uncomment op1(datacopy) and op2 and output 2, TEST PASSES 
###  - Uncomment op1(add), TEST FAILS WITH MISMATCH  --- PASSES SOMETIMES - WE HAVE A RACE CONDITION
###  - Uncomment all - it passes sometimes...
###  - Uncomment only op0 and op2 - it passes... more frequently
###  Looks like it's some unpacker bug???
#######
graphs:
  test_tm:
    target_device: 0
    input_count: 2
    dc0: 
      type: datacopy 
      grid_loc: [0, 0] 
      grid_size: [3, 2]
      inputs: [input0] #, input1] 
      in_df: [Float16] #, Float16] 
      acc_df: Float16
      out_df: Float16  
      intermed_df: Float16 
      ublock_order: r
      buf_size_mb: 2
      math_fidelity: HiFi3 
      untilize_output: false 
      t: 3
      mblock: [2, 3]
      ublock: [3, 2]
      input_0_tms: []
  test_tm2:
    target_device: 1
    input_count: 2
    # op0: 
    #   type: add 
    #   grid_loc: [0, 2] 
    #   grid_size: [3, 2]
    #   inputs: [dc0, input2] 
    #   in_df: [Float16, Float16] 
    #   acc_df: Float16
    #   out_df: Float16  
    #   intermed_df: Float16 
    #   ublock_order: r
    #   buf_size_mb: 2
    #   math_fidelity: HiFi3 
    #   untilize_output: true 
    #   t: 3
    #   mblock: [3, 2]
    #   ublock: [2, 3]
    #   input_0_tms: 
    op1: 
      type: datacopy
      grid_loc: [4, 0] 
      grid_size: [3, 2]
      inputs: [dc0]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16  
      intermed_df: Float16 
      ublock_order: r
      buf_size_mb: 2
      math_fidelity: HiFi3 
      untilize_output: true 
      t: 3
      mblock: [3, 2]
      ublock: [2, 3]
      input_0_tms: 
    op2: 
      type: datacopy
      grid_loc: [4, 5] 
      grid_size: [3, 2]
      inputs: [input2]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16  
      intermed_df: Float16 
      ublock_order: r
      buf_size_mb: 2
      math_fidelity: HiFi3 
      untilize_output: true 
      t: 3
      mblock: [3, 2]
      ublock: [2, 3]
      input_0_tms: 
      
programs:
  - program0:
      - var: [$lptr, $gptr, $c_loop_count, $c_input_count]
      - varinst: [$c_loop_count, set, 1]  # load loop count
      - loop: $c_loop_count
      - execute: {graph_name: test_tm, queue_settings: {
          input0: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}}} #,
          # input1: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}}}
      - execute: {graph_name: test_tm2, queue_settings: {
          input2: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}}}
      - varinst: [$lptr, add, $lptr, $c_input_count] # add two variables
      - varinst: [$gptr, add, $gptr, $c_input_count] # add two variables
      - endloop 
