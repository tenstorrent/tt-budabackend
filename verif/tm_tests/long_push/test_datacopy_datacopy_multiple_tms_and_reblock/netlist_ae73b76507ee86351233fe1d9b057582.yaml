# test_config_id=20
devices:
  arch: grayskull

queues:
  dram_input0:
    type: queue
    input: HOST
    entries: 3
    grid_size: [1, 9]
    t: 24
    mblock: [1, 1]
    ublock: [1, 5]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[3, 0x10000000], [3, 0x100b6d20], [3, 0x1016da40], [3, 0x10224760], [3, 0x102db480], [3, 0x103921a0], [3, 0x10448ec0], [3, 0x104ffbe0], [3, 0x105b6900]]

  dram_output:
    type: queue
    input: op0
    entries: 3
    grid_size: [4, 5]
    t: 6
    mblock: [2, 3]
    ublock: [2, 3]
    df: Float16
    ublock_order: c
    target_device: 0
    loc: dram
    dram: [[7, 0x10000000], [7, 0x10149120], [7, 0x10292240], [7, 0x103db360], [7, 0x10524480], [7, 0x1066d5a0], [7, 0x107b66c0], [7, 0x108ff7e0], [7, 0x10a48900], [7, 0x10b91a20], [7, 0x10cdab40], [7, 0x10e23c60], [7, 0x10f6cd80], [7, 0x110b5ea0], [7, 0x111fefc0], [7, 0x113480e0], [7, 0x11491200], [7, 0x115da320], [7, 0x11723440], [7, 0x1186c560]]

graphs:
  test_multi_tm_datacopy_datacopy:
    target_device: 0
    input_count: 3
    feeder0:
      type: datacopy
      grid_loc: [4, 3]
      grid_size: [1, 9]
      inputs: [dram_input0]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 1
      math_fidelity: HiFi4
      untilize_output: false
      t: 24
      mblock: [1, 1]
      ublock: [1, 5]
    op0:
      type: datacopy
      grid_loc: [0, 0]
      grid_size: [4, 5]
      inputs: [feeder0]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: c
      buf_size_mb: 2
      math_fidelity: HiFi4
      untilize_output: false
      t: 6
      mblock: [2, 3]
      ublock: [2, 3]
      input_0_tms: [broadcast: {r: 4}, vstack: 4]

programs:
  - test_multi_tm_datacopy_matmul_program:
    - param: [$p_microbatch_count, $p_microbatch_size]
    - staticvar: [$lptr, $gptr]
    - var: {$c_zero: 0, $c_wrap: 2}                         # c_wrap = 2 - finally need to be equal to 2*entries == 2*microbatch_size*microbatch_count
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_size]  # c_wrap = 2*microbatch_size
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_count] # c_wrap = 2*microbatch_size*microbatch_count
    - loop: $p_microbatch_count #loop over number of microbatches that make a minibatch
    -   execute: {
          graph_name: test_multi_tm_datacopy_datacopy,
          queue_settings: {
            dram_input0: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
          }
        }
    -   varinst: [$lptr, incwrap, $p_microbatch_size, $c_wrap]
    -   varinst: [$gptr, incwrap, $p_microbatch_size, $c_wrap]
    - endloop

test-config:
  test-args:
    microbatch_count: 1 # entries / input_count
    microbatch_size: 3 # input_count
    minibatch_count: 1 # host loop iterations