# test_config_id=25
devices:
  arch: grayskull

queues:
  dram_input0:
    type: queue
    input: HOST
    entries: 2
    grid_size: [4, 8]
    t: 1
    mblock: [3, 4]
    ublock: [2, 4]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[6, 0x10000000], [6, 0x10061820], [6, 0x100c3040], [6, 0x10124860], [6, 0x10186080], [6, 0x101e78a0], [6, 0x102490c0], [6, 0x102aa8e0], [6, 0x1030c100], [6, 0x1036d920], [6, 0x103cf140], [6, 0x10430960], [6, 0x10492180], [6, 0x104f39a0], [6, 0x105551c0], [6, 0x105b69e0], [6, 0x10618200], [6, 0x10679a20], [6, 0x106db240], [6, 0x1073ca60], [6, 0x1079e280], [6, 0x107ffaa0], [6, 0x108612c0], [6, 0x108c2ae0], [6, 0x10924300], [6, 0x10985b20], [6, 0x109e7340], [6, 0x10a48b60], [6, 0x10aaa380], [6, 0x10b0bba0], [6, 0x10b6d3c0], [6, 0x10bcebe0]]

  dram_input1:
    type: queue
    input: HOST
    entries: 2
    grid_size: [1, 2]
    t: 24
    mblock: [5, 8]
    ublock: [2, 2]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[1, 0x10000000], [1, 0x10f3c020]]

  dram_output:
    type: queue
    input: op0
    entries: 2
    grid_size: [6, 5]
    t: 12
    mblock: [2, 2]
    ublock: [2, 1]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[4, 0x10000000], [4, 0x10061820], [4, 0x100c3040], [4, 0x10124860], [4, 0x10186080], [4, 0x101e78a0], [4, 0x102490c0], [4, 0x102aa8e0], [4, 0x1030c100], [4, 0x1036d920], [4, 0x103cf140], [4, 0x10430960], [4, 0x10492180], [4, 0x104f39a0], [4, 0x105551c0], [4, 0x105b69e0], [4, 0x10618200], [4, 0x10679a20], [4, 0x106db240], [4, 0x1073ca60], [4, 0x1079e280], [4, 0x107ffaa0], [4, 0x108612c0], [4, 0x108c2ae0], [4, 0x10924300], [4, 0x10985b20], [4, 0x109e7340], [4, 0x10a48b60], [4, 0x10aaa380], [4, 0x10b0bba0]]

graphs:
  test_multi_tm_datacopy_matmul:
    target_device: 0
    input_count: 1
    feeder0:
      type: datacopy
      grid_loc: [6, 4]
      grid_size: [4, 8]
      inputs: [dram_input0]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: c
      buf_size_mb: 1
      math_fidelity: HiFi4
      untilize_output: false
      t: 1
      mblock: [3, 4]
      ublock: [2, 4]
    feeder1:
      type: datacopy
      grid_loc: [0, 0]
      grid_size: [1, 2]
      inputs: [dram_input1]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: c
      buf_size_mb: 1
      math_fidelity: HiFi4
      untilize_output: false
      t: 24
      mblock: [5, 8]
      ublock: [2, 2]
    op0:
      type: matmul
      grid_loc: [0, 7]
      grid_size: [6, 5]
      inputs: [feeder0, feeder1]
      in_df: [Float16, Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 1
      math_fidelity: HiFi4
      attributes: {m_k: 8, u_kt: 8}
      untilize_output: false
      t: 12
      mblock: [2, 2]
      ublock: [2, 1]
      input_0_tms: [broadcast: {z: 6}, hslice: 2]
      input_1_tms: [transpose, vstack: 2]

programs:
  - test_multi_tm_datacopy_matmul_program:
    - param: [$p_microbatch_count, $p_microbatch_size]
    - staticvar: [$lptr, $gptr]
    - var: {$c_zero: 0, $c_wrap: 2}                         # c_wrap = 2 - finally need to be equal to 2*entries == 2*microbatch_size*microbatch_count
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_size]  # c_wrap = 2*microbatch_size
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_count] # c_wrap = 2*microbatch_size*microbatch_count
    - loop: $p_microbatch_count #loop over number of microbatches that make a minibatch
    -   execute: {
          graph_name: test_multi_tm_datacopy_matmul,
          queue_settings: {
            dram_input0: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
            dram_input1: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}
          }
        }
    -   varinst: [$lptr, incwrap, $p_microbatch_size, $c_wrap]
    -   varinst: [$gptr, incwrap, $p_microbatch_size, $c_wrap]
    - endloop

test-config:
  test-args:
    microbatch_count: 2 # entries / input_count
    microbatch_size: 1 # input_count
    minibatch_count: 1 # host loop iterations