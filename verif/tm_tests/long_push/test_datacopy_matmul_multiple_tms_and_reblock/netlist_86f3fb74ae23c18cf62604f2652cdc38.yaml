# test_config_id=63
devices:
  arch: grayskull

queues:
  dram_input0:
    type: queue
    input: HOST
    entries: 12
    grid_size: [5, 1]
    t: 1
    mblock: [1, 12]
    ublock: [6, 1]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[0, 0x10000020], [0, 0x101b6c40], [0, 0x1036d860], [0, 0x10524480], [0, 0x106db0a0]]

  dram_input1:
    type: queue
    input: HOST
    entries: 12
    grid_size: [5, 2]
    t: 1
    mblock: [12, 1]
    ublock: [1, 1]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[6, 0x10000040], [6, 0x10049260], [6, 0x10092480], [6, 0x100db6a0], [6, 0x101248c0], [6, 0x1016dae0], [6, 0x101b6d00], [6, 0x101fff20], [6, 0x10249140], [6, 0x10292360]]

  dram_output:
    type: queue
    input: op0
    entries: 12
    grid_size: [6, 10]
    t: 2
    mblock: [1, 1]
    ublock: [5, 1]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[7, 0x10000060], [7, 0x1003cf80], [7, 0x10079ea0], [7, 0x100b6dc0], [7, 0x100f3ce0], [7, 0x10130c00], [7, 0x1016db20], [7, 0x101aaa40], [7, 0x101e7960], [7, 0x10224880], [7, 0x102617a0], [7, 0x1029e6c0], [7, 0x102db5e0], [7, 0x10318500], [7, 0x10355420], [7, 0x10392340], [7, 0x103cf260], [7, 0x1040c180], [7, 0x104490a0], [7, 0x10485fc0], [7, 0x104c2ee0], [7, 0x104ffe00], [7, 0x1053cd20], [7, 0x10579c40], [7, 0x105b6b60], [7, 0x105f3a80], [7, 0x106309a0], [7, 0x1066d8c0], [7, 0x106aa7e0], [7, 0x106e7700], [7, 0x10724620], [7, 0x10761540], [7, 0x1079e460], [7, 0x107db380], [7, 0x108182a0], [7, 0x108551c0], [7, 0x108920e0], [7, 0x108cf000], [7, 0x1090bf20], [7, 0x10948e40], [7, 0x10985d60], [7, 0x109c2c80], [7, 0x109ffba0], [7, 0x10a3cac0], [7, 0x10a799e0], [7, 0x10ab6900], [7, 0x10af3820], [7, 0x10b30740], [7, 0x10b6d660], [7, 0x10baa580], [7, 0x10be74a0], [7, 0x10c243c0], [7, 0x10c612e0], [7, 0x10c9e200], [7, 0x10cdb120], [7, 0x10d18040], [7, 0x10d54f60], [7, 0x10d91e80], [7, 0x10dceda0], [7, 0x10e0bcc0]]

graphs:
  test_multi_tm_datacopy_matmul:
    target_device: 0
    input_count: 2
    feeder0:
      type: datacopy
      grid_loc: [0, 10]
      grid_size: [5, 1]
      inputs: [dram_input0]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 2
      math_fidelity: HiFi4
      untilize_output: false
      t: 1
      mblock: [1, 12]
      ublock: [6, 1]
    feeder1:
      type: datacopy
      grid_loc: [5, 10]
      grid_size: [5, 2]
      inputs: [dram_input1]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: c
      buf_size_mb: 2
      math_fidelity: HiFi4
      untilize_output: false
      t: 1
      mblock: [12, 1]
      ublock: [1, 1]
    op0:
      type: matmul
      grid_loc: [0, 0]
      grid_size: [6, 10]
      inputs: [feeder0, feeder1]
      in_df: [Float16, Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 1
      math_fidelity: HiFi4
      attributes: {m_k: 15, u_kt: 4}
      untilize_output: false
      t: 2
      mblock: [1, 1]
      ublock: [5, 1]
      input_0_tms: [broadcast: {z: 10}, hstack: 5]
      input_1_tms: [broadcast: {z: 10}, hstack: 5]

programs:
  - test_multi_tm_datacopy_matmul_program:
    - param: [$p_microbatch_count, $p_microbatch_size]
    - staticvar: [$lptr, $gptr]
    - var: {$c_zero: 0, $c_wrap: 2}                         # c_wrap = 2 - finally need to be equal to 2*entries == 2*microbatch_size*microbatch_count
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_size]  # c_wrap = 2*microbatch_size
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_count] # c_wrap = 2*microbatch_size*microbatch_count
    - loop: $p_microbatch_count #loop over number of microbatches that make a minibatch
    -   execute: {
          graph_name: test_multi_tm_datacopy_matmul,
          queue_settings: {
            dram_input0: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
            dram_input1: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}
          }
        }
    -   varinst: [$lptr, incwrap, $p_microbatch_size, $c_wrap]
    -   varinst: [$gptr, incwrap, $p_microbatch_size, $c_wrap]
    - endloop

test-config:
  test-args:
    microbatch_count: 6 # entries / input_count
    microbatch_size: 2 # input_count
    minibatch_count: 2 # host loop iterations