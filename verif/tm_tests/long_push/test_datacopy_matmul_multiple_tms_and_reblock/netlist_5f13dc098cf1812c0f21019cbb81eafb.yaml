# test_config_id=11
devices:
  arch: grayskull

queues:
  dram_input0:
    type: queue
    input: HOST
    entries: 2
    grid_size: [1, 1]
    t: 105
    mblock: [2, 1]
    ublock: [1, 4]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[0, 0x10000000]]

  dram_input1:
    type: queue
    input: HOST
    entries: 2
    grid_size: [1, 12]
    t: 30
    mblock: [1, 1]
    ublock: [2, 1]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[4, 0x10000000], [4, 0x1003cf20], [4, 0x10079e40], [4, 0x100b6d60], [4, 0x100f3c80], [4, 0x10130ba0], [4, 0x1016dac0], [4, 0x101aa9e0], [4, 0x101e7900], [4, 0x10224820], [4, 0x10261740], [4, 0x1029e660]]

  dram_output:
    type: queue
    input: op0
    entries: 2
    grid_size: [1, 6]
    t: 30
    mblock: [2, 2]
    ublock: [7, 1]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[3, 0x10000000], [3, 0x10355220], [3, 0x106aa440], [3, 0x109ff660], [3, 0x10d54880], [3, 0x110a9aa0]]

graphs:
  test_multi_tm_datacopy_matmul:
    target_device: 0
    input_count: 2
    feeder0:
      type: datacopy
      grid_loc: [9, 0]
      grid_size: [1, 1]
      inputs: [dram_input0]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 14
      math_fidelity: HiFi4
      untilize_output: false
      t: 105
      mblock: [2, 1]
      ublock: [1, 4]
    feeder1:
      type: datacopy
      grid_loc: [8, 0]
      grid_size: [1, 12]
      inputs: [dram_input1]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: c
      buf_size_mb: 4
      math_fidelity: HiFi4
      untilize_output: false
      t: 30
      mblock: [1, 1]
      ublock: [2, 1]
    op0:
      type: matmul
      grid_loc: [7, 6]
      grid_size: [1, 6]
      inputs: [feeder0, feeder1]
      in_df: [Float16, Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 4
      math_fidelity: HiFi4
      attributes: {m_k: 2, u_kt: 1}
      untilize_output: false
      t: 30
      mblock: [2, 2]
      ublock: [7, 1]
      input_0_tms: [vstack: 7, hslice: 2]
      input_1_tms: [vstack: 2, vslice: 2]

programs:
  - test_multi_tm_datacopy_matmul_program:
    - param: [$p_microbatch_count, $p_microbatch_size]
    - staticvar: [$lptr, $gptr]
    - var: {$c_zero: 0, $c_wrap: 2}                         # c_wrap = 2 - finally need to be equal to 2*entries == 2*microbatch_size*microbatch_count
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_size]  # c_wrap = 2*microbatch_size
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_count] # c_wrap = 2*microbatch_size*microbatch_count
    - loop: $p_microbatch_count #loop over number of microbatches that make a minibatch
    -   execute: {
          graph_name: test_multi_tm_datacopy_matmul,
          queue_settings: {
            dram_input0: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
            dram_input1: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}
          }
        }
    -   varinst: [$lptr, incwrap, $p_microbatch_size, $c_wrap]
    -   varinst: [$gptr, incwrap, $p_microbatch_size, $c_wrap]
    - endloop

test-config:
  test-args:
    microbatch_count: 1 # entries / input_count
    microbatch_size: 2 # input_count
    minibatch_count: 1 # host loop iterations