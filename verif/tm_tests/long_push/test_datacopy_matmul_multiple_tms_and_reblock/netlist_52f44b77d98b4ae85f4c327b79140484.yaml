# test_config_id=18
devices:
  arch: grayskull

queues:
  dram_input0:
    type: queue
    input: HOST
    entries: 1
    grid_size: [1, 3]
    t: 28
    mblock: [3, 5]
    ublock: [2, 3]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[2, 0x10000000], [2, 0x104ffb20], [2, 0x109ff640]]

  dram_input1:
    type: queue
    input: HOST
    entries: 1
    grid_size: [9, 1]
    t: 84
    mblock: [5, 2]
    ublock: [1, 2]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[5, 0x10000000], [5, 0x10355220], [5, 0x106aa440], [5, 0x109ff660], [5, 0x10d54880], [5, 0x110a9aa0], [5, 0x113fecc0], [5, 0x11753ee0], [5, 0x11aa9100]]

  dram_output:
    type: queue
    input: op0
    entries: 1
    grid_size: [1, 3]
    t: 14
    mblock: [2, 4]
    ublock: [3, 1]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[7, 0x10000000], [7, 0x100aaa20], [7, 0x10155440]]

graphs:
  test_multi_tm_datacopy_matmul:
    target_device: 0
    input_count: 1
    feeder0:
      type: datacopy
      grid_loc: [8, 9]
      grid_size: [1, 3]
      inputs: [dram_input0]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: c
      buf_size_mb: 1
      math_fidelity: HiFi4
      untilize_output: false
      t: 28
      mblock: [3, 5]
      ublock: [2, 3]
    feeder1:
      type: datacopy
      grid_loc: [0, 8]
      grid_size: [9, 1]
      inputs: [dram_input1]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 12
      math_fidelity: HiFi4
      untilize_output: false
      t: 84
      mblock: [5, 2]
      ublock: [1, 2]
    op0:
      type: matmul
      grid_loc: [9, 9]
      grid_size: [1, 3]
      inputs: [feeder0, feeder1]
      in_df: [Float16, Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 1
      math_fidelity: HiFi4
      attributes: {m_k: 18, u_kt: 5}
      untilize_output: false
      t: 14
      mblock: [2, 4]
      ublock: [3, 1]
      input_0_tms: [hslice: 1, hstack: 2]
      input_1_tms: [hstack: 3, vstack: 2]

programs:
  - test_multi_tm_datacopy_matmul_program:
    - param: [$p_microbatch_count, $p_microbatch_size]
    - staticvar: [$lptr, $gptr]
    - var: {$c_zero: 0, $c_wrap: 2}                         # c_wrap = 2 - finally need to be equal to 2*entries == 2*microbatch_size*microbatch_count
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_size]  # c_wrap = 2*microbatch_size
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_count] # c_wrap = 2*microbatch_size*microbatch_count
    - loop: $p_microbatch_count #loop over number of microbatches that make a minibatch
    -   execute: {
          graph_name: test_multi_tm_datacopy_matmul,
          queue_settings: {
            dram_input0: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
            dram_input1: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}
          }
        }
    -   varinst: [$lptr, incwrap, $p_microbatch_size, $c_wrap]
    -   varinst: [$gptr, incwrap, $p_microbatch_size, $c_wrap]
    - endloop

test-config:
  test-args:
    microbatch_count: 1 # entries / input_count
    microbatch_size: 1 # input_count
    minibatch_count: 1 # host loop iterations