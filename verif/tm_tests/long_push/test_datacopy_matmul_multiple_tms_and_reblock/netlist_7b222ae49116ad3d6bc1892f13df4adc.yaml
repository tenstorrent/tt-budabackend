# test_config_id=49
devices:
  arch: grayskull

queues:
  dram_input0:
    type: queue
    input: HOST
    entries: 14
    grid_size: [1, 1]
    t: 6
    mblock: [1, 18]
    ublock: [1, 1]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[1, 0x10000020]]

  dram_input1:
    type: queue
    input: HOST
    entries: 14
    grid_size: [3, 5]
    t: 2
    mblock: [3, 1]
    ublock: [6, 1]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[5, 0x10000040], [5, 0x100fff60], [5, 0x101ffe80], [5, 0x102ffda0], [5, 0x103ffcc0], [5, 0x104ffbe0], [5, 0x105ffb00], [5, 0x106ffa20], [5, 0x107ff940], [5, 0x108ff860], [5, 0x109ff780], [5, 0x10aff6a0], [5, 0x10bff5c0], [5, 0x10cff4e0], [5, 0x10dff400]]

  dram_output:
    type: queue
    input: op0
    entries: 14
    grid_size: [1, 1]
    t: 2
    mblock: [7, 1]
    ublock: [1, 5]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[2, 0x10000060]]

graphs:
  test_multi_tm_datacopy_matmul:
    target_device: 0
    input_count: 2
    feeder0:
      type: datacopy
      grid_loc: [1, 0]
      grid_size: [1, 1]
      inputs: [dram_input0]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: c
      buf_size_mb: 6
      math_fidelity: HiFi4
      untilize_output: false
      t: 6
      mblock: [1, 18]
      ublock: [1, 1]
    feeder1:
      type: datacopy
      grid_loc: [0, 6]
      grid_size: [3, 5]
      inputs: [dram_input1]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: c
      buf_size_mb: 4
      math_fidelity: HiFi4
      untilize_output: false
      t: 2
      mblock: [3, 1]
      ublock: [6, 1]
    op0:
      type: matmul
      grid_loc: [2, 11]
      grid_size: [1, 1]
      inputs: [feeder0, feeder1]
      in_df: [Float16, Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 1
      math_fidelity: HiFi4
      attributes: {m_k: 18, u_kt: 3}
      untilize_output: false
      t: 2
      mblock: [7, 1]
      ublock: [1, 5]
      input_0_tms: [broadcast: {r: 7}, hstack: 3]
      input_1_tms: [hstack: 2, hslice: 2]

programs:
  - test_multi_tm_datacopy_matmul_program:
    - param: [$p_microbatch_count, $p_microbatch_size]
    - staticvar: [$lptr, $gptr]
    - var: {$c_zero: 0, $c_wrap: 2}                         # c_wrap = 2 - finally need to be equal to 2*entries == 2*microbatch_size*microbatch_count
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_size]  # c_wrap = 2*microbatch_size
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_count] # c_wrap = 2*microbatch_size*microbatch_count
    - loop: $p_microbatch_count #loop over number of microbatches that make a minibatch
    -   execute: {
          graph_name: test_multi_tm_datacopy_matmul,
          queue_settings: {
            dram_input0: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
            dram_input1: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}
          }
        }
    -   varinst: [$lptr, incwrap, $p_microbatch_size, $c_wrap]
    -   varinst: [$gptr, incwrap, $p_microbatch_size, $c_wrap]
    - endloop

test-config:
  test-args:
    microbatch_count: 7 # entries / input_count
    microbatch_size: 2 # input_count
    minibatch_count: 2 # host loop iterations