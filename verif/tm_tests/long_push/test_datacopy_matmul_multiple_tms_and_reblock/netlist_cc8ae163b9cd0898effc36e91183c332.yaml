# test_config_id=23
devices:
  arch: grayskull

queues:
  dram_input0:
    type: queue
    input: HOST
    entries: 2
    grid_size: [1, 3]
    t: 1
    mblock: [1, 2]
    ublock: [1, 3]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[6, 0x10000000], [6, 0x100061a0], [6, 0x1000c340]]

  dram_input1:
    type: queue
    input: HOST
    entries: 2
    grid_size: [3, 5]
    t: 4
    mblock: [3, 3]
    ublock: [3, 2]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[4, 0x10000000], [4, 0x100db620], [4, 0x101b6c40], [4, 0x10292260], [4, 0x1036d880], [4, 0x10448ea0], [4, 0x105244c0], [4, 0x105ffae0], [4, 0x106db100], [4, 0x107b6720], [4, 0x10891d40], [4, 0x1096d360], [4, 0x10a48980], [4, 0x10b23fa0], [4, 0x10bff5c0]]

  dram_output:
    type: queue
    input: op0
    entries: 2
    grid_size: [3, 10]
    t: 6
    mblock: [2, 1]
    ublock: [1, 3]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[2, 0x10000000], [2, 0x10024920], [2, 0x10049240], [2, 0x1006db60], [2, 0x10092480], [2, 0x100b6da0], [2, 0x100db6c0], [2, 0x100fffe0], [2, 0x10124900], [2, 0x10149220], [2, 0x1016db40], [2, 0x10192460], [2, 0x101b6d80], [2, 0x101db6a0], [2, 0x101fffc0], [2, 0x102248e0], [2, 0x10249200], [2, 0x1026db20], [2, 0x10292440], [2, 0x102b6d60], [2, 0x102db680], [2, 0x102fffa0], [2, 0x103248c0], [2, 0x103491e0], [2, 0x1036db00], [2, 0x10392420], [2, 0x103b6d40], [2, 0x103db660], [2, 0x103fff80], [2, 0x104248a0]]

graphs:
  test_multi_tm_datacopy_matmul:
    target_device: 0
    input_count: 2
    feeder0:
      type: datacopy
      grid_loc: [6, 9]
      grid_size: [1, 3]
      inputs: [dram_input0]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: c
      buf_size_mb: 1
      math_fidelity: HiFi4
      untilize_output: false
      t: 1
      mblock: [1, 2]
      ublock: [1, 3]
    feeder1:
      type: datacopy
      grid_loc: [4, 4]
      grid_size: [3, 5]
      inputs: [dram_input1]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 4
      math_fidelity: HiFi4
      untilize_output: false
      t: 4
      mblock: [3, 3]
      ublock: [3, 2]
    op0:
      type: matmul
      grid_loc: [7, 2]
      grid_size: [3, 10]
      inputs: [feeder0, feeder1]
      in_df: [Float16, Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 12
      math_fidelity: HiFi4
      attributes: {m_k: 3, u_kt: 6}
      untilize_output: false
      t: 6
      mblock: [2, 1]
      ublock: [1, 3]
      input_0_tms: [broadcast: {z: 6}, broadcast: {r: 6}]
      input_1_tms: [vslice: 3, vstack: 2]

programs:
  - test_multi_tm_datacopy_matmul_program:
    - param: [$p_microbatch_count, $p_microbatch_size]
    - staticvar: [$lptr, $gptr]
    - var: {$c_zero: 0, $c_wrap: 2}                         # c_wrap = 2 - finally need to be equal to 2*entries == 2*microbatch_size*microbatch_count
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_size]  # c_wrap = 2*microbatch_size
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_count] # c_wrap = 2*microbatch_size*microbatch_count
    - loop: $p_microbatch_count #loop over number of microbatches that make a minibatch
    -   execute: {
          graph_name: test_multi_tm_datacopy_matmul,
          queue_settings: {
            dram_input0: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
            dram_input1: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}
          }
        }
    -   varinst: [$lptr, incwrap, $p_microbatch_size, $c_wrap]
    -   varinst: [$gptr, incwrap, $p_microbatch_size, $c_wrap]
    - endloop

test-config:
  test-args:
    microbatch_count: 1 # entries / input_count
    microbatch_size: 2 # input_count
    minibatch_count: 1 # host loop iterations