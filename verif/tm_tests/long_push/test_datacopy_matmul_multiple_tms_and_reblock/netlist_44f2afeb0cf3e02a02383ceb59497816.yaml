# test_config_id=19
devices:
  arch: grayskull

queues:
  dram_input0:
    type: queue
    input: HOST
    entries: 6
    grid_size: [4, 5]
    t: 1
    mblock: [4, 1]
    ublock: [1, 8]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[6, 0x10000000], [6, 0x10061820], [6, 0x100c3040], [6, 0x10124860], [6, 0x10186080], [6, 0x101e78a0], [6, 0x102490c0], [6, 0x102aa8e0], [6, 0x1030c100], [6, 0x1036d920], [6, 0x103cf140], [6, 0x10430960], [6, 0x10492180], [6, 0x104f39a0], [6, 0x105551c0], [6, 0x105b69e0], [6, 0x10618200], [6, 0x10679a20], [6, 0x106db240], [6, 0x1073ca60]]

  dram_input1:
    type: queue
    input: HOST
    entries: 6
    grid_size: [5, 1]
    t: 16
    mblock: [4, 3]
    ublock: [1, 2]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[2, 0x10000000], [2, 0x10492020], [2, 0x10924040], [2, 0x10db6060], [2, 0x11248080]]

  dram_output:
    type: queue
    input: op0
    entries: 6
    grid_size: [4, 8]
    t: 2
    mblock: [2, 3]
    ublock: [4, 1]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[0, 0x10000000], [0, 0x10092420], [0, 0x10124840], [0, 0x101b6c60], [0, 0x10249080], [0, 0x102db4a0], [0, 0x1036d8c0], [0, 0x103ffce0], [0, 0x10492100], [0, 0x10524520], [0, 0x105b6940], [0, 0x10648d60], [0, 0x106db180], [0, 0x1076d5a0], [0, 0x107ff9c0], [0, 0x10891de0], [0, 0x10924200], [0, 0x109b6620], [0, 0x10a48a40], [0, 0x10adae60], [0, 0x10b6d280], [0, 0x10bff6a0], [0, 0x10c91ac0], [0, 0x10d23ee0], [0, 0x10db6300], [0, 0x10e48720], [0, 0x10edab40], [0, 0x10f6cf60], [0, 0x10fff380], [0, 0x110917a0], [0, 0x11123bc0], [0, 0x111b5fe0]]

graphs:
  test_multi_tm_datacopy_matmul:
    target_device: 0
    input_count: 6
    feeder0:
      type: datacopy
      grid_loc: [4, 7]
      grid_size: [4, 5]
      inputs: [dram_input0]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: c
      buf_size_mb: 1
      math_fidelity: HiFi4
      untilize_output: false
      t: 1
      mblock: [4, 1]
      ublock: [1, 8]
    feeder1:
      type: datacopy
      grid_loc: [0, 0]
      grid_size: [5, 1]
      inputs: [dram_input1]
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: c
      buf_size_mb: 1
      math_fidelity: HiFi4
      untilize_output: false
      t: 16
      mblock: [4, 3]
      ublock: [1, 2]
    op0:
      type: matmul
      grid_loc: [0, 1]
      grid_size: [4, 8]
      inputs: [feeder0, feeder1]
      in_df: [Float16, Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 1
      math_fidelity: HiFi4
      attributes: {m_k: 8, u_kt: 5}
      untilize_output: false
      t: 2
      mblock: [2, 3]
      ublock: [4, 1]
      input_0_tms: [broadcast: {z: 4}, vstack: 2]
      input_1_tms: [hstack: 4, vstack: 2]

programs:
  - test_multi_tm_datacopy_matmul_program:
    - param: [$p_microbatch_count, $p_microbatch_size]
    - staticvar: [$lptr, $gptr]
    - var: {$c_zero: 0, $c_wrap: 2}                         # c_wrap = 2 - finally need to be equal to 2*entries == 2*microbatch_size*microbatch_count
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_size]  # c_wrap = 2*microbatch_size
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_count] # c_wrap = 2*microbatch_size*microbatch_count
    - loop: $p_microbatch_count #loop over number of microbatches that make a minibatch
    -   execute: {
          graph_name: test_multi_tm_datacopy_matmul,
          queue_settings: {
            dram_input0: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
            dram_input1: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}
          }
        }
    -   varinst: [$lptr, incwrap, $p_microbatch_size, $c_wrap]
    -   varinst: [$gptr, incwrap, $p_microbatch_size, $c_wrap]
    - endloop

test-config:
  test-args:
    microbatch_count: 1 # entries / input_count
    microbatch_size: 6 # input_count
    minibatch_count: 1 # host loop iterations