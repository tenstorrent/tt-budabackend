# test_config_id=43
devices:
  arch: grayskull

queues:
  dram_input0:
    type: queue
    input: HOST
    entries: 6
    grid_size: [9, 1]
    t: 5
    mblock: [1, 16]
    ublock: [2, 1]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[7, 0x10000000], [7, 0x101e7820], [7, 0x103cf040], [7, 0x105b6860], [7, 0x1079e080], [7, 0x109858a0], [7, 0x10b6d0c0], [7, 0x10d548e0], [7, 0x10f3c100]]

  dram_input1:
    type: queue
    input: HOST
    entries: 6
    grid_size: [4, 12]
    t: 3
    mblock: [4, 1]
    ublock: [1, 2]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[6, 0x10000000], [6, 0x10049220], [6, 0x10092440], [6, 0x100db660], [6, 0x10124880], [6, 0x1016daa0], [6, 0x101b6cc0], [6, 0x101ffee0], [6, 0x10249100], [6, 0x10292320], [6, 0x102db540], [6, 0x10324760], [6, 0x1036d980], [6, 0x103b6ba0], [6, 0x103ffdc0], [6, 0x10448fe0], [6, 0x10492200], [6, 0x104db420], [6, 0x10524640], [6, 0x1056d860], [6, 0x105b6a80], [6, 0x105ffca0], [6, 0x10648ec0], [6, 0x106920e0], [6, 0x106db300], [6, 0x10724520], [6, 0x1076d740], [6, 0x107b6960], [6, 0x107ffb80], [6, 0x10848da0], [6, 0x10891fc0], [6, 0x108db1e0], [6, 0x10924400], [6, 0x1096d620], [6, 0x109b6840], [6, 0x109ffa60], [6, 0x10a48c80], [6, 0x10a91ea0], [6, 0x10adb0c0], [6, 0x10b242e0], [6, 0x10b6d500], [6, 0x10bb6720], [6, 0x10bff940], [6, 0x10c48b60], [6, 0x10c91d80], [6, 0x10cdafa0], [6, 0x10d241c0], [6, 0x10d6d3e0]]

  output:
    type: queue
    input: op0
    entries: 6
    grid_size: [10, 12]
    t: 3
    mblock: [1, 1]
    ublock: [3, 2]
    df: Float16
    ublock_order: r
    target_device: 0
    loc: dram
    dram: [[5, 0x10000000], [5, 0x10036da0], [5, 0x1006db40], [5, 0x100a48e0], [5, 0x100db680], [5, 0x10112420], [5, 0x101491c0], [5, 0x1017ff60], [5, 0x101b6d00], [5, 0x101edaa0], [5, 0x10224840], [5, 0x1025b5e0], [5, 0x10292380], [5, 0x102c9120], [5, 0x102ffec0], [5, 0x10336c60], [5, 0x1036da00], [5, 0x103a47a0], [5, 0x103db540], [5, 0x104122e0], [5, 0x10449080], [5, 0x1047fe20], [5, 0x104b6bc0], [5, 0x104ed960], [5, 0x10524700], [5, 0x1055b4a0], [5, 0x10592240], [5, 0x105c8fe0], [5, 0x105ffd80], [5, 0x10636b20], [5, 0x1066d8c0], [5, 0x106a4660], [5, 0x106db400], [5, 0x107121a0], [5, 0x10748f40], [5, 0x1077fce0], [5, 0x107b6a80], [5, 0x107ed820], [5, 0x108245c0], [5, 0x1085b360], [5, 0x10892100], [5, 0x108c8ea0], [5, 0x108ffc40], [5, 0x109369e0], [5, 0x1096d780], [5, 0x109a4520], [5, 0x109db2c0], [5, 0x10a12060], [5, 0x10a48e00], [5, 0x10a7fba0], [5, 0x10ab6940], [5, 0x10aed6e0], [5, 0x10b24480], [5, 0x10b5b220], [5, 0x10b91fc0], [5, 0x10bc8d60], [5, 0x10bffb00], [5, 0x10c368a0], [5, 0x10c6d640], [5, 0x10ca43e0], [5, 0x10cdb180], [5, 0x10d11f20], [5, 0x10d48cc0], [5, 0x10d7fa60], [5, 0x10db6800], [5, 0x10ded5a0], [5, 0x10e24340], [5, 0x10e5b0e0], [5, 0x10e91e80], [5, 0x10ec8c20], [5, 0x10eff9c0], [5, 0x10f36760], [5, 0x10f6d500], [5, 0x10fa42a0], [5, 0x10fdb040], [5, 0x11011de0], [5, 0x11048b80], [5, 0x1107f920], [5, 0x110b66c0], [5, 0x110ed460], [5, 0x11124200], [5, 0x1115afa0], [5, 0x11191d40], [5, 0x111c8ae0], [5, 0x111ff880], [5, 0x11236620], [5, 0x1126d3c0], [5, 0x112a4160], [5, 0x112daf00], [5, 0x11311ca0], [5, 0x11348a40], [5, 0x1137f7e0], [5, 0x113b6580], [5, 0x113ed320], [5, 0x114240c0], [5, 0x1145ae60], [5, 0x11491c00], [5, 0x114c89a0], [5, 0x114ff740], [5, 0x115364e0], [5, 0x1156d280], [5, 0x115a4020], [5, 0x115dadc0], [5, 0x11611b60], [5, 0x11648900], [5, 0x1167f6a0], [5, 0x116b6440], [5, 0x116ed1e0], [5, 0x11723f80], [5, 0x1175ad20], [5, 0x11791ac0], [5, 0x117c8860], [5, 0x117ff600], [5, 0x118363a0], [5, 0x1186d140], [5, 0x118a3ee0], [5, 0x118dac80], [5, 0x11911a20], [5, 0x119487c0], [5, 0x1197f560]]

graphs:
  test_multi_tm_dram_matmul:
    target_device: 0
    input_count: 2
    op0:
      type: matmul
      grid_loc: [0, 0]
      grid_size: [10, 12]
      inputs: [dram_input0, dram_input1]
      in_df: [Float16, Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 2
      math_fidelity: HiFi4
      attributes: {m_k: 8, u_kt: 2}
      untilize_output: false
      t: 3
      mblock: [1, 1]
      ublock: [3, 2]
      input_0_tms: [vslice: 3, vstack: 5]
      input_1_tms: [transpose, transpose]

programs:
  - test_multi_tm_dram_matmul_program:
    - param: [$p_microbatch_count, $p_microbatch_size]
    - staticvar: [$lptr, $gptr]
    - var: {$c_zero: 0, $c_wrap: 2}                         # c_wrap = 2 - finally need to be equal to 2*entries == 2*microbatch_size*microbatch_count
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_size]  # c_wrap = 2*microbatch_size
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_count] # c_wrap = 2*microbatch_size*microbatch_count
    - loop: $p_microbatch_count #loop over number of microbatches that make a minibatch
    -   execute: {
          graph_name: test_multi_tm_dram_matmul,
          queue_settings: {
               dram_input0: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
               dram_input1: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}
          }
        }
    -   varinst: [$lptr, incwrap, $p_microbatch_size, $c_wrap]
    -   varinst: [$gptr, incwrap, $p_microbatch_size, $c_wrap]
    - endloop

test-config:
  test-args:
    microbatch_count: 3 # entries / input_count
    microbatch_size: 2 # input_count
    minibatch_count: 1 # host loop iterations