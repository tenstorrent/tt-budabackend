# test_config_id=23
devices:
  arch: grayskull

queues:
  dram_input0:
    type: queue
    input: HOST
    entries: 6
    grid_size: [1, 4]
    t: 1
    mblock: [1, 2]
    ublock: [8, 2]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[5, 0x10000000], [5, 0x10061820], [5, 0x100c3040], [5, 0x10124860]]

  dram_input1:
    type: queue
    input: HOST
    entries: 6
    grid_size: [1, 2]
    t: 2
    mblock: [5, 2]
    ublock: [8, 8]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[7, 0x10000000], [7, 0x10f3c020]]

  output:
    type: queue
    input: op0
    entries: 6
    grid_size: [2, 10]
    t: 4
    mblock: [2, 2]
    ublock: [2, 2]
    df: Float16
    ublock_order: r
    target_device: 0
    loc: dram
    dram: [[1, 0x10000000], [1, 0x100c3020], [1, 0x10186040], [1, 0x10249060], [1, 0x1030c080], [1, 0x103cf0a0], [1, 0x104920c0], [1, 0x105550e0], [1, 0x10618100], [1, 0x106db120], [1, 0x1079e140], [1, 0x10861160], [1, 0x10924180], [1, 0x109e71a0], [1, 0x10aaa1c0], [1, 0x10b6d1e0], [1, 0x10c30200], [1, 0x10cf3220], [1, 0x10db6240], [1, 0x10e79260]]

graphs:
  test_multi_tm_dram_matmul:
    target_device: 0
    input_count: 6
    op0:
      type: matmul
      grid_loc: [0, 0]
      grid_size: [2, 10]
      inputs: [dram_input0, dram_input1]
      in_df: [Float16, Float16]
      acc_df: Float16
      out_df: Float16
      intermed_df: Float16
      ublock_order: r
      buf_size_mb: 8
      math_fidelity: HiFi4
      attributes: {m_k: 16, u_kt: 1}
      untilize_output: false
      t: 4
      mblock: [2, 2]
      ublock: [2, 2]
      input_0_tms: [hslice: 1, broadcast: {z: 4}]
      input_1_tms: [transpose, vslice: 2]

programs:
  - test_multi_tm_dram_matmul_program:
    - param: [$p_microbatch_count, $p_microbatch_size]
    - staticvar: [$lptr, $gptr]
    - var: {$c_zero: 0, $c_wrap: 2}                         # c_wrap = 2 - finally need to be equal to 2*entries == 2*microbatch_size*microbatch_count
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_size]  # c_wrap = 2*microbatch_size
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_count] # c_wrap = 2*microbatch_size*microbatch_count
    - loop: $p_microbatch_count #loop over number of microbatches that make a minibatch
    -   execute: {
          graph_name: test_multi_tm_dram_matmul,
          queue_settings: {
               dram_input0: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr},
               dram_input1: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}
          }
        }
    -   varinst: [$lptr, incwrap, $p_microbatch_size, $c_wrap]
    -   varinst: [$gptr, incwrap, $p_microbatch_size, $c_wrap]
    - endloop

test-config:
  test-args:
    microbatch_count: 1 # entries / input_count
    microbatch_size: 6 # input_count
    minibatch_count: 1 # host loop iterations