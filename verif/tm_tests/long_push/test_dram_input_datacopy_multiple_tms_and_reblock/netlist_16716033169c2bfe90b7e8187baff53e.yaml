devices:
  arch: grayskull

queues:
  dram_input:
    type: queue
    input: HOST
    entries: 1
    grid_size: [1, 12]
    t: 1
    mblock: [12, 4]
    ublock: [3, 5]
    df: Float16
    target_device: 0
    loc: dram
    dram: [[7, 0x10000060], [7, 0x1016da80], [7, 0x102db4a0], [7, 0x10448ec0], [7, 0x105b68e0], [7, 0x10724300], [7, 0x10891d20], [7, 0x109ff740], [7, 0x10b6d160], [7, 0x10cdab80], [7, 0x10e485a0], [7, 0x10fb5fc0]]

  dram_output:
    type: queue
    input: datacopy0
    entries: 1
    grid_size: [9, 6]
    t: 34
    mblock: [1, 40]
    ublock: [4, 1]
    df: Float16
    ublock_order: c
    target_device: 0
    loc: dram
    dram: [[3, 0x10000040], [3, 0x10aca860], [3, 0x11595080], [3, 0x1205f8a0], [3, 0x12b2a0c0], [3, 0x135f48e0], [3, 0x140bf100], [3, 0x14b89920], [3, 0x15654140], [3, 0x1611e960], [3, 0x16be9180], [3, 0x176b39a0], [3, 0x1817e1c0], [3, 0x18c489e0], [3, 0x19713200], [3, 0x1a1dda20], [3, 0x1aca8240], [3, 0x1b772a60], [3, 0x1c23d280], [3, 0x1cd07aa0], [3, 0x1d7d22c0], [3, 0x1e29cae0], [3, 0x1ed67300], [3, 0x1f831b20], [3, 0x202fc340], [3, 0x20dc6b60], [3, 0x21891380], [3, 0x2235bba0], [3, 0x22e263c0], [3, 0x238f0be0], [3, 0x243bb400], [3, 0x24e85c20], [3, 0x25950440], [3, 0x2641ac60], [3, 0x26ee5480], [3, 0x279afca0], [3, 0x2847a4c0], [3, 0x28f44ce0], [3, 0x29a0f500], [3, 0x2a4d9d20], [3, 0x2afa4540], [3, 0x2ba6ed60], [3, 0x2c539580], [3, 0x2d003da0], [3, 0x2dace5c0], [3, 0x2e598de0], [3, 0x2f063600], [3, 0x2fb2de20], [3, 0x305f8640], [3, 0x310c2e60], [3, 0x31b8d680], [3, 0x32657ea0], [3, 0x331226c0], [3, 0x33becee0]]

graphs:
  test_multi_tm_dram_op:
    target_device: 0
    input_count: 1
    datacopy0: 
      type: datacopy 
      grid_loc: [0, 2] 
      grid_size: [9, 6]
      inputs: [dram_input] 
      in_df: [Float16]
      acc_df: Float16
      out_df: Float16  
      intermed_df: Float16
      ublock_order: c
      buf_size_mb: 1
      math_fidelity: HiFi3 
      untilize_output: false 
      t: 34
      mblock: [1, 40]
      ublock: [4, 1]
      input_0_tms: [broadcast: {z: 34}, hstack: 1]
      
programs:
  - multi_tm_test_program:
    - param: [$p_microbatch_count, $p_microbatch_size]
    - staticvar: [$lptr, $gptr]
    - var: {$c_zero: 0, $c_wrap: 2}                         # c_wrap = 2 - finally need to be equal to 2*entries == 2*microbatch_size*microbatch_count
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_size]  # c_wrap = 2*microbatch_size
    - varinst: [$c_wrap, mul, $c_wrap, $p_microbatch_count] # c_wrap = 2*microbatch_size*microbatch_count
    - loop: $p_microbatch_count #loop over number of microbatches that make a minibatch
    -   execute: {
          graph_name: test_multi_tm_dram_op,
          queue_settings: {
               dram_input: {prologue: false, epilogue: false, zero: false, rd_ptr_local: $lptr, rd_ptr_global: $gptr}
          }
        }
    -   varinst: [$lptr, incwrap, $p_microbatch_size, $c_wrap]
    -   varinst: [$gptr, incwrap, $p_microbatch_size, $c_wrap]
    - endloop

test-config:
  test-args:
    microbatch_count: 1 # entries / input_count
    microbatch_size: 1 # input_count
    minibatch_count: 1 # host loop iterations